_dp("\n[_mv.txt]");
// 行動リストテーブル


local t = {};

t.Mv_WinMotionMessage <-
{
	function Init_After()
	{
		local rnd = BMvEff.Random_Limit(2);
		switch( rnd )
		{
		case 0:
			tDDC.Support_SetMessage( "@C100", 200, 100 ); // 
			break;
		case 1:
			tDDC.Support_SetMessage( "@C101", 200, 101 ); // 
			break;
		}
	}
}

t.Mv_LoseMotionMessage <-
{
	function Init_After()
	{
		local rnd = BMvEff.Random_Limit(2);
		switch( rnd )
		{
		case 0:
			tDDC.Support_SetMessage( "@C110", 200, 110 ); // 
			break;
		case 1:
			tDDC.Support_SetMessage( "@C111", 200, 111 ); // 
			break;
		}
	}
}

t.Mv_SupportChargeMessage <-
{
	function Init_After()
	{
		local rnd = BMvEff.Random_Limit(2);
		switch( rnd )
		{
		case 0:
			tDDC.Support_SetMessage( "@C120", 200, 160 ); // 
			break;
		case 1:
			tDDC.Support_SetMessage( "@C121", 200, 161 ); // 
			break;
		}
	}
}


//-----------------------------------------------------------------------------
// サポートキャラ
//-----------------------------------------------------------------------------

// 親のMvが変化したらFrameID900に飛ぶか消えるMv
local makemv_CheckOyaMvGrp = function( param={} )
{
	local retmv = {};
	
	local usepat = BMvEff.GetPatternNum( { datatype=0, pat=param.pat } );
	
	retmv.Init <- function() : (usepat)
	{
		BMvTbl.SetPattern( usepat );
		
		BMvEff.SetObjectFlags( { flags=_ObjFlags_NoGround } );
		
		BMvTbl.SetLP(0,0); // 消えるアニメへジャンプしたかどうか
	}
	retmv.FrameUpdate <- function()
	{
		if( BMvTbl.GetLP(0)==0 ) // まだ消えるアニメにジャンプしていない
		{
			if( BMvTbl.CheckMvUniqueID( { datatype=_DataType_Parent } ) == 0 )
			{
				if( BMvTbl.JumpFrameID( 900 ) == -1 )
				{
					BMvTbl.SetFinalize( 0 ); // 飛ぶ先が無いなら消える
				}
				BMvTbl.SetLP(0,1); // おわり
			}
		}
	}
	retmv.Finalize <- function()
	{
		BMvTbl.SetDeleteMoveTable();
	}
	
	return retmv;
}

// ゼロの周りにでるツタ
t.Mv_Tuta_StB <- makemv_CheckOyaMvGrp( { pat="tuta_stB" } );

// 6Sで進むツタ
t.Mv_Tuta_Move <- makemv_CheckOyaMvGrp( { pat="tuta_move" } );

// 6Sで突き上げるツタ
t.Mv_Tuta_DrillB <- makemv_CheckOyaMvGrp( { pat="tuta_drillB" } );


//-----------------------------------------------------------------------------
// 攻撃１
//-----------------------------------------------------------------------------

local pat_num_Sup00 = BMvEff.GetPatternNum( { datatype=0, pat="Sup00" } ); // パターン文字列のパターン番号を事前取得

t.Mv_SupportChara <-
{
	function Init_After() : (pat_num_Sup00)
	{
		BMvTbl.SetPattern( pat_num_Sup00 );
		
		// 表示座標指定
		Battle_Std.AddXPos_NearEnemy( 200, 200 ); // 移動距離, これ以上相手と近くならない
		
		BMvTbl.SetLP(5,0); // 反射回数？
		BMvTbl.SetLP(6,0); // 前回消えてもいいエフェクトを呼んだMvCount(0もある)
	}
	function FrameUpdate_After()
	{
		Battle_Std.Sousai.FrameUpdate_NoHitFlag();
		
		switch( Battle_Std.GetUpdateFrameID() )
		{
		case 100:
			break;
		case 900: // 当身終わり
			break;
		}
	}
	function HitInterrupt_After()
	{
		local mvs = BMvTbl.GetMvStatus();
		local mvcount = mvs.MvCount;
		local last_mvcount = BMvTbl.GetLP(6); // 前回消えてもいいエフェクトを呼んだMvCount(0もある)
		local is_CallEffectTiming = (mvcount - last_mvcount > 10); // 前回エフェクトから10Fぐらい経過してないとエフェクトは呼ばない
		
		// 初回orエフェクトよんでいいタイミングかどうかで、当身成功時のエフェクトを切り替える
		local sousai_param = ( BMvTbl.GetLP(5)==0 || is_CallEffectTiming )? { hitstop=4 } : { noeffect=1, nosound=1, hitstop=4 };
		local mvhs = Battle_Std.Sousai.HitInterrupt( sousai_param );
		if( mvhs ) // 有効なら0以外
		{
			if( mvhs.isFirstUpdate )
			{
				Battle_Std.SupSt_AddFlag( def_PP_Success );
				
				local count = BMvTbl.AddLP(5,1); // よんだ回数記憶
				if( count == 1 ) // 相殺１回目
				{
					local eff = BMvEff.CreateObject( { start_pat="SousaiMahoBarr", x=50*128, y=-255*128 } );
					BSound.SE_Play( { type=_SeType_Player, num=[170,171] } );
					BMvTbl.SetLP(6,mvcount); // エフェクトを呼んだMvCountを記憶
					
				}
				else if( is_CallEffectTiming ) // 10Fぐらい隙間が無いとダメにする
				{
					local eff = BMvEff.CreateObject( { start_pat="SousaiMahoBarr", x=50*128, y=-255*128 } );
					BMvTbl.SetLP(6,mvcount); // エフェクトを呼んだMvCountを記憶
				}
			}
			BMvTbl.SetFinalizeCode(0); // 同フレームに殴られていると撤退するので行動上書き
		}
	}
}

local pat_num_Sup00_Esc = BMvEff.GetPatternNum( { datatype=0, pat="Sup00_Esc" } ); // パターン文字列のパターン番号を事前取得

//サポートキャラがダメージを受けると入る行動
t.Mv_SupportCharaDamage <-
{
	function Init_After() : (pat_num_Sup00_Esc)
	{
		BMvTbl.SetPattern( pat_num_Sup00_Esc );
		BSound.SE_Play( { type=_SeType_Player, num=[140] } ); // やられ音声
	}
}

//出現途中で親が殴られると入る行動
t.Mv_SupportCharaEscape <-
{
	function Init_After() : (pat_num_Sup00_Esc)
	{
		BMvTbl.SetPattern( pat_num_Sup00_Esc );
		BSound.SE_Play( { type=_SeType_Player, num=[140] } ); // やられ音声
	}
}

//-----------------------------------------------------------------------------
// 攻撃２
//-----------------------------------------------------------------------------

/*
ミーザ・リ・キブ
蠢き捕らえ締め上げろ！
捕縛の章・第八項、蔦籠（カプラタ）！
承認せよ、我はゼロなり！
*/

local pat_num_Sup10 = BMvEff.GetPatternNum( { datatype=0, pat="Sup10" } ); // パターン文字列のパターン番号を事前取得
local pat_num_Sup10_End = BMvEff.GetPatternNum( { datatype=0, pat="Sup10_End" } ); // パターン文字列のパターン番号を事前取得

t.Mv_SupportChara2 <- // サポートキャラの行動
{
	function Init_After() : (pat_num_Sup10)
	{
		BMvTbl.SetPattern( pat_num_Sup10 ); // 表示するパターンを設定
		
		// 表示座標指定
		Battle_Std.AddXPos_NearEnemy( 200, 200 ); // 移動距離, これ以上相手と近くならない
		
		BMvTbl.SetLP(0,0); // 子TLから受け取る自分の終了 99:終わり
		
		BMvTbl.SetLP(1,0); // 自分の状態 1:終わり
	}
	function FrameUpdate_After() : (pat_num_Sup10_End)
	{
		if( BMvTbl.GetLP(1)==0 && BMvTbl.GetLP(0) == 99 ) // まだ終わりじゃない時、子から終わりを受け取った
		{
			BMvTbl.SetLP(1,1); // 終わり
			BMvTbl.SetPattern( pat_num_Sup10_End );
		}
		
		switch( Battle_Std.GetUpdateFrameID() )
		{
		case 50:
			BSound.SE_Play( { type=_SeType_Player, num=[180,182] } );
			break;
		case 100:
			BMvEff.CreateObject( { mvname="Mv_GroundMove" } );
			break;
		case 900: // ビーム発射終わり(別パターン)
			break;
		}	
	}
	function HitInterrupt_After()
	{
	}
}

local pat_num_GroundMove = BMvEff.GetPatternNum( { datatype=0, pat="GroundMove" } ); // パターン文字列のパターン番号を事前取得

// 相手に向かって進む透明なオブジェクト
// これがタイムライン
t.Mv_GroundMove <-
{
	function Init() : (pat_num_GroundMove)
	{
		BMvTbl.SetPattern( pat_num_GroundMove );
		
		BMvEff.SetObjectFlags( { flags=_ObjFlags_NoGround|_ObjFlags_EraseParentPatChange } );
		
		// ゼロがやられたらすぐ消えよう
		
		BMvEff.CreateObject( { mvname="Mv_Tuta_StB" } );
		
		BMvTbl.SetLP(0,0); // 移動をとめたかどうか
	}
	function FrameUpdate()
	{
		local mvs = BMvTbl.GetMvStatus();
		
		switch( Battle_Std.GetUpdateFrameID() )
		{
		case 100:
			// ベクトル入れた後
			// コンボ中で画面端近かったらベクトル止める
			if( BMvTbl.GetLP(0)==1 || ( Battle_Std.CheckEnemyisDamage() && Battle_Std.CheckFrontStageDistance( 100 ) ) )
			{
				BMvTbl.SetVector( { x=0, flags=_Vector_Normal } );
				BMvTbl.SetLP(0,1); // とめたのを記憶して以降は進まない
			}
			else
			{
				// _dp("\n 生成");
				BMvEff.CreateObject( { mvname="Mv_Tuta_Move" } );
			}
			break;
		case 300: // とどめ待機
			break;
		case 400:
			BMvEff.CreateObject( { mvname="Mv_Tuta_DrillB" } );
			break;
		}
	}
	function HitInterrupt()
	{
		if( Battle_Std.CheckHitTiming_FrameID( 100 ) )
		{
			local epos = Battle_Std.GetEnemyPosition();
			BMvTbl.SetPosition( { x=epos.x } );
			BMvTbl.JumpFrameID( 300 ); // とどめ待機
		}
	}
	function Finalize()
	{
		BMvTbl.SetDeleteMoveTable();
	}
	function LastUpdate()
	{
		if( BMvTbl.CheckMvUniqueID( { datatype=_DataType_Parent } ) != 0 ) // 親がゼロのままなら
		{
			local oya = BMvCore.GetParentCharaData();
			if( oya.push() )
			{
				BMvTbl.SetLP(0,99); // 終了をゼロに伝える
				oya.pop();
			}
		}
	}
}


local pat_num_Sup10_Esc = BMvEff.GetPatternNum( { datatype=0, pat="Sup10_Esc" } ); // パターン文字列のパターン番号を事前取得

//サポートキャラがダメージを受けると入る行動
t.Mv_SupportCharaDamage2 <-
{
	function Init_After() : (pat_num_Sup10_Esc)
	{
		BMvTbl.SetPattern( pat_num_Sup10_Esc );
		BSound.SE_Play( { type=_SeType_Player, num=[140] } ); // やられ音声
	}
}

//出現途中で親が殴られると入る行動
t.Mv_SupportCharaEscape2 <-
{
	function Init_After() : (pat_num_Sup10_Esc)
	{
		BMvTbl.SetPattern( pat_num_Sup10_Esc );
		BSound.SE_Play( { type=_SeType_Player, num=[140] } ); // やられ音声
	}
}


//-----------------------------------------------------------------------------
// 攻撃３　ゼロカウンター
//-----------------------------------------------------------------------------

local pat_num_Sup30 = BMvEff.GetPatternNum( { datatype=0, pat="Sup30" } ); // パターン文字列のパターン番号を事前取得
local pat_num_Sup30_End = BMvEff.GetPatternNum( { datatype=0, pat="Sup30_End" } ); // パターン文字列のパターン番号を事前取得

/*
却下だ
却下する
承認せよ、我はゼロなり
それは我輩の魔法だ
*/

// ガーキャンをエスブラされるのってどうなんだろう
t.Mv_GuardSupportChara <-
{
	function Init_After() : (pat_num_Sup30)
	{
		BMvTbl.SetPattern( pat_num_Sup30 );
		
		// 表示座標指定
		Battle_Std.AddXPos_NearEnemy( 200, 200 ); // 移動距離, これ以上相手と近くならない
		
		BMvTbl.SetLP(0,0); // 子TLから受け取る自分の終了 99:終われ
		
		BMvTbl.SetLP(1,0); // 自分の状態 1:終わり

		// ガーキャンの発生を取った攻撃に応じて変化させる
		local stopFrame = 36;
		local main = BMvCore.GetMainCharaData();
		if( main.push() )
		{
			local enemy = BMvCore.GetLastDamageCharaData( 0 );
			// _dp("\n enemy.isPlayer():"+enemy.isPlayer() );
			if( enemy.isPlayer() && enemy.push() )
			{
				local atkLow = Battle_Std.MoveCodeEx.CheckFlag( 1, def_MC1_AtkLow ); // 弱攻撃レベル
				
				enemy.pop();
				
				if( atkLow )
				{
					_dp("\n 弱攻撃なので弱い");
					stopFrame = 18;
				}
			}
			main.pop();
		}
		
		// 時間停止して暗転中にアニメを進めてガーキャンする
		BMvEff.SetStopTime( { time=stopFrame } );
		local cutTime = stopFrame - 9;
		if( cutTime < 9 ) cutTime = 9;
		BMvEff.CutInProc_Set({ time=[3,cutTime,6], cutin_mv="",erasetype=2, bgtype=1 }); 
		tDDC.Jem_SetMessageEx( 1, -1, "", 45 ); // ポテンシャルカットイン
		
		BSound.SE_Play( { type=_SeType_Player, num=[172,173] } );
	}
	function FrameUpdate_After() : (pat_num_Sup30_End)
	{
		if( BMvTbl.GetLP(1)==0 && BMvTbl.GetLP(0) == 99 ) // TLエフェクトから終了を受けたら消える
		{
			BMvTbl.SetLP(1,1); // 終わり
			BMvTbl.SetPattern( pat_num_Sup30_End );
		}
		
		switch( Battle_Std.GetUpdateFrameID() )
		{
		case 100:
			BMvEff.CreateObject( { mvname="Mv_GCMahoBarr", x=50*128, y=-255*128 } );
			break;
		case 900: // ビーム発射終わり
			break;
		}
	}
}

local pat_num_GCMahoBarr = BMvEff.GetPatternNum( { datatype=0, pat="GCMahoBarr" } ); // パターン文字列のパターン番号を事前取得

t.Mv_GCMahoBarr <-
{
	function Init() : (pat_num_GCMahoBarr)
	{
		BMvTbl.SetPattern( pat_num_GCMahoBarr );
		
		BMvEff.SetObjectFlags( { flags=_ObjFlags_NoGround|_ObjFlags_EraseParentPatChange } );
		
		// ゼロがやられたらすぐ消えよう
	}
	function Finalize()
	{
		BMvTbl.SetDeleteMoveTable();
	}
	function LastUpdate()
	{
		if( BMvTbl.CheckMvUniqueID( { datatype=_DataType_Parent } ) != 0 )
		{
			local oya = BMvCore.GetParentCharaData();
			if( oya.push() )
			{
				BMvTbl.SetLP(0,99); // 終了をゼロに伝える
				oya.pop();
			}
		}
	}
}

local pat_num_Sup30_Esc = BMvEff.GetPatternNum( { datatype=0, pat="Sup30_Esc" } ); // パターン文字列のパターン番号を事前取得

//サポートキャラがダメージを受けると入る行動
t.Mv_GuardSupportCharaDamage <-
{
	function Init_After() : (pat_num_Sup30_Esc)
	{
		BMvTbl.SetPattern( pat_num_Sup30_Esc );
		BSound.SE_Play( { type=_SeType_Player, num=[140] } ); // やられ音声
	}
}

//出現途中で親が殴られると入る行動
t.Mv_GuardSupportCharaEscape <-
{
	function Init_After() : (pat_num_Sup30_Esc)
	{
		BMvTbl.SetPattern( pat_num_Sup30_Esc );
		BSound.SE_Play( { type=_SeType_Player, num=[140] } ); // やられ音声
	}
}


ZER_S_MoveTable <- Battle_Std.SupportChara.MakeMoveTable( t, Def_ChrNo_Zer_s );

_dp(" -> Load OK");
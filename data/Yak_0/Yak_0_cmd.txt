//コマンドテーブル skillは格ゲーコマンド表記
btl_debPrint2("\n[cmd.txt]");

local t =
{
	MultiJump_F = { CmdCheck = { HeightLimit = def_POS_AirDashLimitHeight, }	},
	MultiJump_N = { CmdCheck = { HeightLimit = def_POS_AirDashLimitHeight, }	},
	MultiJump_B = { CmdCheck = { HeightLimit = def_POS_AirDashLimitHeight, }	},
	MultiJumpCancel_F = { CmdCheck = { HeightLimit = def_POS_AirDashLimitHeight, }	},
	MultiJumpCancel_N = { CmdCheck = { HeightLimit = def_POS_AirDashLimitHeight, }	},
	MultiJumpCancel_B = { CmdCheck = { HeightLimit = def_POS_AirDashLimitHeight, }	},

	Skill_236A = {},
	Skill_236B = {},
	Skill_236C = {},
	Skill_236EX = {},

	Skill_J236A = {},
	Skill_J236B = {},
	Skill_J236C = {},
	Skill_J236EX = {},

	Skill_214A = {},
	Skill_214B = {},
	Skill_214C = {},
	Skill_214EX = {},
	
	Skill_Sousai2 =
	{
		function CmdAfterFunc()
		{
			local findobj = BMvCore.CFindObject(); // クラス生成
			local findchara = findobj.Get(2); // ID2を検索
			if( findchara.isdone() )
			{
				// 既にでてる
				_dp("\n ※既に監視が出てるのでスキップ");
			}
			else
			{
				// コマンドが成立したら監視オブジェクトを生成する
				local eff = BMvEff.CreateObject( { mvname="Mv_Null_DoppoChecker", id=2 } );
				if( eff.push() )
				{
					eff.pop();
				}
			}
			return 1;
		},	
	},
	Skill_Sousai = {},
	Skill_Sousai4 = {},
	Skill_Sousai4_JAdd = {},	
	
	Skill_Kirifuda = {},
	
	Skill_41236SP = {},
	Skill_63214SP = {},
	
	Atk_JC_JC = {},
	
	Std_Atk_StdB =
	{
		function CmdAfterFunc()
		{
			BMvTbl.SetPP( def_PP_Yak_Yakuho, 0 );

			// ちょっとアレだけどダッシュ中に6+Bでヤクホになるようにする
			local mvname = BMvTbl.GetMvName();
			if ( mvname == "Mv_Dash_F" || mvname == "Mv_DashStop_F" )
			{
				if( BMvTbl.CheckCommandString( "6" ) )
				{
					BMvTbl.SetPP( def_PP_Yak_Yakuho, 1 );
					
					// 光るやくほ
					if( mvname == "Mv_Dash_F" )
					{
						local mvs = BMvTbl.GetMvStatus();
						if( mvs.MvCount <=1 )
						{
							BMvTbl.SetPP( def_PP_Yak_Yakuho, 2 );
						}
					}
				}
			}
			return 1;
		}
	}
	
}

local ar =
[
	{
		CheckMoveName="Mv_Atk_StdA",
		UpdateMoveName="Mv_Atk_StdB",
		SrcCmdTmpl="Std_Atk_StdB", // これを入れないとdef_PP_Yak_Yakuhoが初期化されない
	},
	{
		CheckMoveName="Mv_Atk_StdB",
		UpdateMoveName="Mv_Atk_StdC",
		ResetTmplName="Std_Atk_StdB"
	},
	{
		CheckMoveName="Mv_Atk_StdC",
		UpdateMoveName="Mv_Skill_Sousai",
		ResetTmplName="Std_Atk_StdC",
		CmdTmplFlags=def_CMDFlags_AnnounceSmaetSteer, //スマートステアアナウンスの追加
	},
	{
		CheckMoveName="Mv_Skill_Sousai",
		UpdateMoveName="Mv_Skill_236EX",
		ResetTmplName="Skill_Sousai",
		CmdCheck = 
		{
			SkillType = "ExSpecial",
			HitStatus="Damage",
			Cost = { ComboGauge = 10000 },
		}
	},
]
Battle_Std.MakeStdCombo( t, ar, 0 );

local ar =
[
	{
		CheckMoveName="Mv_Atk_CroA",
		UpdateMoveName="Mv_Atk_CroB",
	},
	{
		CheckMoveName="Mv_Atk_CroB",
		UpdateMoveName="Mv_Atk_StdC",
		ResetTmplName="Std_Atk_CroB"
	},
	{
		CheckMoveName="Mv_Atk_StdC",
		UpdateMoveName="Mv_Skill_Sousai",
		ResetTmplName="Std_Atk_StdC",
		CmdTmplFlags=def_CMDFlags_AnnounceSmaetSteer, //スマートステアアナウンスの追加
	},
	{
		CheckMoveName="Mv_Skill_Sousai",
		UpdateMoveName="Mv_Skill_236EX",
		ResetTmplName="Skill_Sousai",
		CmdCheck = 
		{
			SkillType = "ExSpecial",
			HitStatus="Damage",
			Cost = { ComboGauge = 10000 },
		}
	},
]
Battle_Std.MakeStdCombo( t, ar, 1 );

local ar =
[
	{
		CheckMoveName="Mv_Atk_AirA",
		UpdateMoveName="Mv_Atk_AirB",
	},
	{
		CheckMoveName="Mv_Atk_AirB",
		UpdateMoveName="Mv_Atk_AirC",
		ResetTmplName="Std_Atk_AirB",
		CmdTmplFlags=def_CMDFlags_AnnounceSmaetSteerAir, //スマートステアアナウンスの追加
	},	
]
Battle_Std.MakeStdCombo( t, ar, 2 );

YAK_CommandTable <- Battle_Std.MakeCommandTable( t );

_dp(" -> Load OK");

//__dofile__( "./data/_combase.txt" );

// ※※※ここで定義されたローカル変数をfunction内に使うと落ちる。

// 半定数 なんとなく
const com_throw_recover_pos = 99; // 投げぬけ動作位置
local throw_recover_avg = 70; // 投げぬけ失敗確率

const com_frequency0 = 1; // 発動頻度（仮	1
const com_frequency1 = 10; // 発動頻度（仮	10
const com_frequency2 = 30; // 発動頻度（仮	30
const com_frequency3 = 100; // 発動頻度（仮	100
const com_frequency4 = 300; // 発動頻度（仮	300

local nowskillnum = 0;

//-------------------------------------------------------------
// com動作生成

local comcount = 200; // 最大数 できるだけギリギリに
local com = CCom(comcount); // COM用オブジェクト

com.SetGuardAvg( 40 ); // ガード確率


local stmp = 0;
local mtmp = 0;

//--------------------------------------------------------------
{	// ０は待機
	stmp = com.GetSkill(0); // 作成
	stmp.checkfunc = function() // チェック
	{
		return com_frequency3;
	}
	stmp.updatefunc = function() // 採用時の更新
	{
		return 1;
	}
	// 0-0
	mtmp = stmp.PlusMove(); // 動き追加
	mtmp.Set( 0, 0,  30, 180,  _eComMoveFlag_StickHold | _eComMoveFlag_MoveEnd );
}

//--------------------------------------------------------------
{	// 前進
	stmp = com.GetSkill(1); // 作成
	stmp.checkfunc = function() // チェック
	{
		local st = BCom.GetStatus();
		if( st.GetELenX() < 25000 ) return 0; // 近すぎたら発動しない

		return com_frequency1;
	}
	stmp.updatefunc = function() // 採用時の更新
	{
		local st = BCom.GetStatus();

		if( st.GetELenX() < 25000 ) // 近づいたら終了
		{
			BCom.Move_End(-1); // -1以外にすると次の行動指定ができる
		}
		// print( "\nX:" + st.GetELenX() + " Y:" + st.GetELenY() );
		return 1;
	}
	// 0-0
	mtmp = stmp.PlusMove(); // 動き追加
	mtmp.Set( 6, 0,  20, 80,  _eComMoveFlag_StickHold | _eComMoveFlag_MoveEnd );
}

//--------------------------------------------------------------
{	// 後退
	stmp = com.GetSkill(2); // 作成
	stmp.checkfunc = function() // チェック
	{
		local st = BCom.GetStatus();
		if( st.GetELenX() > 120000 ) return 0; // 遠いときは発動しない
		return com_frequency1;
	}
	stmp.updatefunc = function() // 採用時の更新
	{
		local st = BCom.GetStatus();

		// print( "\nX:" + st.GetELenX() + " Y:" + st.GetELenY() );
		return 1;
	}
	// 0-0
	mtmp = stmp.PlusMove(); // 動き追加
	mtmp.Set( 4, 0,  10, 30,  _eComMoveFlag_StickHold | _eComMoveFlag_MoveEnd );
}

//--------------------------------------------------------------
{	// ダッシュ
	stmp = com.GetSkill(3); // 作成
	stmp.checkfunc = function() // チェック
	{
		local st = BCom.GetStatus();
		if( !st.CheckPosState( _PosState_Ground ) ) return 0; // 地上じゃないとだめ

		return com_frequency1;
	}
	stmp.updatefunc = function() // 採用時の更新
	{
		local st = BCom.GetStatus();

		if( st.GetELenX() < 25000 ) // 近づいたら終了
		{
			BCom.Move_End(-1); // -1以外にすると次の行動指定ができる
		}
		return 1;
	}
	// 0-0
	mtmp = stmp.PlusMove(); // 動き追加
	mtmp.SetSpSkill( 400 );
	mtmp.Set( 6, 0,  20, 30,  _eComMoveFlag_StickHold | _eComMoveFlag_MoveEnd );
}

//--------------------------------------------------------------
{	// バックダッシュ
	stmp = com.GetSkill(4); // 作成
	stmp.checkfunc = function() // チェック
	{
		local st = BCom.GetStatus();
		if( st.GetELenX() > 120000 ) return 0; // 遠いときは発動しない

		return com_frequency1;
	}
	stmp.updatefunc = function() // 採用時の更新
	{
		local st = BCom.GetStatus();
		if( !st.CheckPosState( _PosState_Ground ) ) return 0; // 地上じゃないとだめ

		return 1;
	}
	// 0-0
	mtmp = stmp.PlusMove(); // 動き追加
	mtmp.SetSpSkill( 401 );
	mtmp.Set( 4, 0,  5, 5,  _eComMoveFlag_StickHold | _eComMoveFlag_MoveEnd );
}

//--------------------------------------------------------------
{	// 垂直ジャンプ
	stmp = com.GetSkill(7); // 作成
	stmp.checkfunc = function() // チェック
	{
		local st = BCom.GetStatus();
		if( !st.CheckPosState( _PosState_Ground ) ) return 0; // 地上じゃないとだめ

		return com_frequency0;
	}
	stmp.updatefunc = function() // 採用時の更新
	{
		local st = BCom.GetStatus();

		return 1;
	}
	// 0-0
	mtmp = stmp.PlusMove(); // 動き追加
	mtmp.Set( 8, 0,  5, 0,  _eComMoveFlag_StickHold | _eComMoveFlag_MoveEnd );
}

//--------------------------------------------------------------
{	// 前ジャンプ
	stmp = com.GetSkill(8); // 作成
	stmp.checkfunc = function() // チェック
	{
		local st = BCom.GetStatus();
		if( !st.CheckPosState( _PosState_Ground ) ) return 0; // 地上じゃないとだめ

		return com_frequency0;
	}
	stmp.updatefunc = function() // 採用時の更新
	{
		local st = BCom.GetStatus();

		return 1;
	}
	// 0-0
	mtmp = stmp.PlusMove(); // 動き追加
	mtmp.Set( 9, 0,  5, 0,  _eComMoveFlag_StickHold | _eComMoveFlag_MoveEnd );
}

//--------------------------------------------------------------
{	// 様子見セット：近中距離
	stmp = com.GetSkill(9);						// 作成
	stmp.SetLotWait( 0 );							// 終了、失敗時のウェイト
	stmp.SetLotFailedAvg( 0 );						// 失敗確率

	stmp.checkfunc = function() // チェック
	{
		local st = BCom.GetStatus();
		
		//	自分の状態チェック	
		if( 120000 < st.GetELenX() ) return 0;		//	X軸取得
		if( !st.IsPMoveable() ) return 0;			//	行動可能の場合、発動する

		return com_frequency1;
		
	}

	stmp.updatefunc = function() // 採用時の更新
	{
		local st = BCom.GetStatus();
		
		if( BCom.GetMoveTag() == "RND_start" ) //	分岐条件判定 
		{
			local ar = ["4","6464","J8C","J9","J7","5"]; // 分岐先を定義する
			local jump = BMvEff.Random_Limit( ar.len() );
			BCom.Move_Jump( ar[jump] );
		}
		
		return 1;
	}
	//	行動設定
	//	分岐開始
	mtmp = stmp.PlusMove();	// 動き追加
	mtmp.SetTag( "RND_start" );
	mtmp.Set( 0, 0,  2, 0,  _eComMoveFlag_MoveEnd );
	{
		// 後退
		mtmp = stmp.PlusMove();	// 動き追加
		mtmp.SetTag( "4" );
		mtmp.Set( 4, 0,  30, 0,  _eComMoveFlag_StickHold | _eComMoveFlag_MoveEnd );

		// 6464 左右にフラフラする、その後ぼったち
		mtmp = stmp.PlusMove();	// 動き追加
		mtmp.SetTag( "6464" );
		mtmp.Set( 6, 0,  12, 0,  _eComMoveFlag_StickHold );
		mtmp = stmp.PlusMove();	// 動き追加
		mtmp.Set( 4, 0,  12, 0,  _eComMoveFlag_StickHold );
		mtmp = stmp.PlusMove();	// 動き追加
		mtmp.Set( 2, 0,  4, 0,  _eComMoveFlag_StickHold );
		mtmp = stmp.PlusMove();	// 動き追加
		mtmp.Set( 6, 0,  12, 0,  _eComMoveFlag_StickHold );	
		mtmp = stmp.PlusMove();	// 動き追加
		mtmp.Set( 4, 0,  12, 0,  _eComMoveFlag_StickHold );
		mtmp = stmp.PlusMove();	// 動き追加
		mtmp.Set( 0, 0,  15, 0,  _eComMoveFlag_MoveEnd );	
		
		// 垂直J8C
		mtmp = stmp.PlusMove();	// 動き追加
		mtmp.SetTag( "J8C" );
		mtmp.Set( 8 , 0,  22, 0,  0 );
		mtmp = stmp.PlusMove();	// 動き追加
		mtmp.Set( 0 , _eComButton_C ,  20, 0,  _eComMoveFlag_MoveEnd );

		// 前ジャンプ
		mtmp = stmp.PlusMove();	// 動き追加
		mtmp.SetTag( "J9" );
		mtmp.Set( 9, 0,  20, 0,  _eComMoveFlag_MoveEnd );
		
		// うしろJ
		mtmp = stmp.PlusMove();	// 動き追加
		mtmp.SetTag( "J7" );
		mtmp.Set( 7, 0,  20, 0,  _eComMoveFlag_MoveEnd );
		
		// ぼったち
		mtmp = stmp.PlusMove();	// 動き追加
		mtmp.SetTag( "5" );
		mtmp.Set( 0, 0,  30, 0,  _eComMoveFlag_MoveEnd );
	}
}

//--------------------------------------------------------------
{	// チェインシフト
	stmp = com.GetSkill(17); // 作成
	stmp.SetLotWait(180);

	stmp.checkfunc = function() // チェック
	{
		local st = BCom.GetStatus();

		return com_frequency1;
		// return com_frequency1;
	}

	stmp.updatefunc = function() // 採用時の更新
	{
		local st = BCom.GetStatus();
		
		if( BCom.GetMoveTag() == "RND_start" && st.GetELenX() < 25000) // チェインシフト時に相手が近い場合
		{
				local ar = ["0202B","0202A","0202C","throw"]; // 分岐先を定義する
				local jump = BMvEff.Random_Limit( ar.len() );
				// jumpは配列の要素数（３）のランダム＝0か1か2が入る
				BCom.Move_Jump( ar[jump] );
		}

		return 1;
	}

	// 0-0
	mtmp = stmp.PlusMove(); // 動き追加
	mtmp.SetSpSkill( def_CN_Convert ); // 
	mtmp.Set( 0, 0,  40, 0,  _eComMoveFlag_MoveableEnd );
	// チェインシフトできた場合は行動不能になる
	// チェインシフトできなかったら動いていない＝行動可能なので終了
	// チェインシフトの全体フレームは４０なので40ぐらいを入れておく
	{
		// 
		mtmp = stmp.PlusMove(); // 動き追加 判定用フラグ
		mtmp.SetTag( "RND_start" );
		mtmp.Set( 0, 0,  2, 0,  _eComMoveFlag_MoveEnd );
		
		//
		mtmp = stmp.PlusMove(); // 動き追加 22A
		mtmp.SetTag( "0202B" );
		mtmp.SetSpSkill( def_CN_Skill_0202B );
		mtmp.Set( 0, 0,  6, 0,  _eComMoveFlag_MoveEnd );
		
		//
		mtmp = stmp.PlusMove(); // 動き追加 22B
		mtmp.SetTag( "0202A" );
		mtmp.SetSpSkill( def_CN_Skill_0202A );
		mtmp.Set( 2, 0,  6, 0,  _eComMoveFlag_MoveEnd );
		
		//
		mtmp = stmp.PlusMove(); // 動き追加 22C
		mtmp.SetTag( "0202C" );
		mtmp.SetSpSkill( def_CN_Skill_0202EX );
		mtmp.Set( 2, 0,  6, 0,  _eComMoveFlag_MoveEnd );
		
		//	投げ
		mtmp = stmp.PlusMove(); // 動き追加 投げ
		mtmp.SetTag( "throw" );
		mtmp.Set( 2, _eComButton_A|_eComButton_D,  6, 0,  _eComMoveFlag_MoveEnd );
	}
}
	
//--------------------------------------------------------------
{	// ヴェールオフ
	stmp = com.GetSkill(18); // 作成

	stmp.checkfunc = function() // チェック
	{
		local st = BCom.GetStatus();

		if( !st.IsPMoveable() ) return 0;						//	行動可能じゃないと発動しない	
		if( !st.CheckPosState( _PosState_Ground ) ) return 0;		//	地上じゃないとだめ
		if( st.GetEXS() < 50  ||  st.GetEXS() == 200 ) return 0;	//	半分未満、またはVEILOFF中だったら無効

		return com_frequency0;
	}

	stmp.updatefunc = function() // 採用時の更新
	{
		local st = BCom.GetStatus();

		return 1;
	}

	// 0-0
	mtmp = stmp.PlusMove(); // 動き追加
	mtmp.Set( 0, _eComButton_A|_eComButton_B|_eComButton_C,  2, 0,  _eComMoveFlag_MoveEnd );
}

//--------------------------------------------------------------
{	// インフィニットワース（２ゲージ）
	stmp = com.GetSkill(19);							// 作成
	stmp.SetLotWait( 120 );							// 終了、失敗時のウェイト
	stmp.SetLotFailedAvg( 75 );						// 失敗確率
	stmp.checkfunc = function() // チェック
	{
		local st = BCom.GetStatus();
		if( st.GetELenX() > 90000 ) return 0; // 遠いときは発動しない
		if( st.GetEXS() < 100  ) return 0; // 
		if( !st.CheckPosState( _PosState_Ground ) ) return 0; // 地上じゃないとだめ

		return com_frequency1;
	}
	stmp.updatefunc = function() // 採用時の更新
	{
		local st = BCom.GetStatus();

		return 1;
	}
	// 0-0
	mtmp = stmp.PlusMove(); // 動き追加
	mtmp.SetSpSkill( def_CN_Skill_41236SP );
	mtmp.Set( 0, 0,  5, 0,  _eComMoveFlag_MoveEnd );
}
	
//--------------------------------------------------------------
{	// なげ
	stmp = com.GetSkill(20); // 作成
	stmp.SetLotWait( 60 );
	stmp.SetLotFailedAvg( 50 );
	stmp.checkfunc = function() // チェック
	{
		local st = BCom.GetStatus();
		if( st.GetELenX() > 20000 ) return 0; // 遠いときは発動しない
		if( !st.CheckPosState( _PosState_Ground ) ) return 0; // 地上じゃないとだめ

		return com_frequency1;
	}
	stmp.updatefunc = function() // 採用時の更新
	{
		local st = BCom.GetStatus();

		return 1;
	}
	// 0-0
	mtmp = stmp.PlusMove(); // 動き追加
	mtmp.Set( 0, _eComButton_A | _eComButton_D,  10, 0,  _eComMoveFlag_MoveEnd );
}

//--------------------------------------------------------------
{	// スマートステア5A
	stmp = com.GetSkill(27); // 作成
	stmp.SetLotWait( 300 ); // 終了、失敗時のウェイト
	stmp.SetLotFailedAvg( 50 ); // 失敗確率

	stmp.checkfunc = function() // チェック
	{
		local st = BCom.GetStatus();
		if( !st.IsPMoveable() ) return 0;					// 行動可能じゃないと発動しない
		if( 50000 < st.GetELenX() ) return 0;				// 遠いときは発動しない
		if( !st.CheckPosState( _PosState_Ground ) ) return 0;	// 地上じゃないとだめ

		return com_frequency1;
	}

	stmp.updatefunc = function() // 採用時の更新
	{
		local st = BCom.GetStatus();
		
		if( BCom.GetMoveTag() == "RND_start" ) //	分岐条件判定 
		{
			local ar = ["END1","J236C"]; // 分岐先を定義する
			local jump = BMvEff.Random_Limit( ar.len() );
			BCom.Move_Jump( ar[jump] );
		}	

		return 1;
	}


	// ダッシュ入力
	mtmp = stmp.PlusMove();	// 動き追加	ダッシュ入力1
	mtmp.Set( 6, 0,  1, 0,  0 );
	mtmp = stmp.PlusMove();	// 動き追加	ダッシュ入力ニュートラル
	mtmp.Set( 0, 0,  1, 0,  0 );
	mtmp = stmp.PlusMove();	// 動き追加	ダッシュ入力2
	mtmp.Set( 6, 0,  1, 9,  _eComMoveFlag_StickHold );

	// 0:立ちA
	mtmp = stmp.PlusMove(); // 動き追加
	mtmp.Set( 0, _eComButton_A,  60, 0,  _eComMoveFlag_HitNext | _eComMoveFlag_MoveEnd );

	// 1:立ちA２回目
	mtmp = stmp.PlusMove(); // 動き追加
	mtmp.Set( 0, _eComButton_A,  60, 0,  _eComMoveFlag_HitNext | _eComMoveFlag_MoveEnd );

	// 2:立ちB
	mtmp = stmp.PlusMove(); // 動き追加
	mtmp.Set( 0, _eComButton_A,  60, 0,  _eComMoveFlag_HitNext | _eComMoveFlag_MoveEnd );

	// 3:立ちC
	mtmp = stmp.PlusMove(); // 動き追加
	mtmp.Set( 0, _eComButton_A,  50, 0,  _eComMoveFlag_HitNext | _eComMoveFlag_MoveEnd );

	// 4:屈Ｃ
	mtmp = stmp.PlusMove(); // 動き追加
	mtmp.Set( 0, _eComButton_A,  50, 0,  _eComMoveFlag_HitNext | _eComMoveFlag_MoveEnd );

	// 5:６Ｃ
	mtmp = stmp.PlusMove(); // 動き追加
	mtmp.Set( 0, _eComButton_A,  50, 0,  _eComMoveFlag_HitNext | _eComMoveFlag_MoveEnd );

	// 6:214Ｂ（１）
	mtmp = stmp.PlusMove(); // 動き追加
	mtmp.Set( 0, _eComButton_A,  50, 0,  _eComMoveFlag_HitNext | _eComMoveFlag_MoveEnd );

	// 7:214Ｂ（３段目あたるまで待機）
	mtmp = stmp.PlusMove(); // 動き追加
	mtmp.Set( 0, 0,  45, 0,  0 );

	//	分岐開始
	mtmp = stmp.PlusMove();	// 動き追加
	mtmp.SetTag( "RND_start" );
	mtmp.Set( 0, 0,  2, 0,  _eComMoveFlag_MoveEnd );
	{

		//	END1 (何もしない 確率の水増し)
		mtmp = stmp.PlusMove(); // 動き追加
		mtmp.SetTag( "END1" );	
		mtmp.Set( 0, 0,  25, 0,  _eComMoveFlag_MoveEnd );
		
		// 8:Ｊ236ＥＸ
		mtmp = stmp.PlusMove(); // 動き追加
		mtmp.SetTag( "J236C" );	
		mtmp.Set( 0, _eComButton_A,  65, 0,  _eComMoveFlag_MoveEnd );
	}
}

//--------------------------------------------------------------
{	// アサルト分岐
	stmp = com.GetSkill(25); 				// 作成
	stmp.SetLotWait( 120 );				// 終了、失敗時のウェイト
	stmp.SetLotFailedAvg( 0 );				// 失敗確率

	stmp.checkfunc = function() // チェック
	{
		local st = BCom.GetStatus();
		if( !st.CheckPosState( _PosState_Ground ) ) return 0; // 地上じゃないとだめ

		return com_frequency1;
	}

	stmp.updatefunc = function() // 採用時の更新
	{
		local st = BCom.GetStatus();
		
		if( BCom.GetMoveTag() == "RND_start" ) //	分岐条件判定 
		{
			local ar = ["J5A","J5B","J5C","J5CJ9J2C"]; // 分岐先を定義する
			local jump = BMvEff.Random_Limit( ar.len() );
			BCom.Move_Jump( ar[jump] );
		}
		return 1;
	}
	// 0-0
	mtmp = stmp.PlusMove(); // 動き追加
	mtmp.SetSpSkill( def_CN_Assault_Std );
	mtmp.Set( 0, 0,  20, 0,  0 );

	//	分岐開始
	mtmp = stmp.PlusMove();	// 動き追加
	mtmp.SetTag( "RND_start" );
	mtmp.Set( 0, 0,  2, 0,  _eComMoveFlag_MoveEnd );
	{
		//	J5A
		mtmp = stmp.PlusMove();	// 動き追加
		mtmp.SetTag( "J5A" );
		mtmp.Set( 0, _eComButton_A,  3, 0, _eComMoveFlag_MoveEnd );

		//	J5B
		mtmp = stmp.PlusMove();	// 動き追加
		mtmp.SetTag( "J5B" );
		mtmp.Set( 0, _eComButton_B,  3, 0, _eComMoveFlag_MoveEnd );

		//	J5C
		mtmp = stmp.PlusMove();	// 動き追加
		mtmp.SetTag( "J5C" );
		mtmp.Set( 0, _eComButton_C,  3, 0, _eComMoveFlag_MoveEnd );

		//	J5CJ9J2C
		mtmp = stmp.PlusMove();	// 動き追加
		mtmp.SetTag( "J5CJ9J2C" );
		mtmp.Set( 0, _eComButton_C,  20, 0, _eComMoveFlag_HitNext | _eComMoveFlag_MoveEnd );	
		mtmp = stmp.PlusMove();	// 動き追加
		mtmp.Set( 0, 0,  30, 0, _eComMoveFlag_GroundNext );
		mtmp = stmp.PlusMove();	// 動き追加
		mtmp.Set( 9, 0,  25, 0, 0 );
		mtmp = stmp.PlusMove();	// 動き追加
		mtmp.Set( 2, _eComButton_C,  20, 0, _eComMoveFlag_MoveEnd );
		
	}
}

//--------------------------------------------------------------
{	// ジャンプアサルト分岐
	stmp = com.GetSkill(26);				// 作成
	stmp.SetLotWait( 60 );					// 終了、失敗時のウェイト
	stmp.SetLotFailedAvg( 0 );				// 失敗確率

	stmp.checkfunc = function() // チェック
	{
		local st = BCom.GetStatus();
		if( !st.CheckPosState( _PosState_Ground ) ) return 0; // 地上じゃないとだめ

		return com_frequency1;
	}

	stmp.updatefunc = function() // 採用時の更新
	{
		local st = BCom.GetStatus();
		
		if( BCom.GetMoveTag() == "RND_start" ) //	分岐条件判定
		{
			local ar = ["J5A","J5B","J5C"]; // 分岐先を定義する
			local jump = BMvEff.Random_Limit( ar.len() );
			BCom.Move_Jump( ar[jump] );
		}
		return 1;
	}

	// 0-0
	mtmp = stmp.PlusMove(); // 動き追加
	mtmp.Set( 9, 0,  10, 10,  0 );

	// 
	mtmp = stmp.PlusMove(); // 動き追加
	mtmp.SetSpSkill( def_CN_Assault_Air );
	mtmp.Set( 0, 0,  20, 0,  0 );
		
	//	分岐開始
	mtmp = stmp.PlusMove();	// 動き追加
	mtmp.SetTag( "RND_start" );
	mtmp.Set( 0, 0,  2, 0,  _eComMoveFlag_MoveEnd );
	{
		// 
		mtmp = stmp.PlusMove(); // 
		mtmp.SetTag( "J5A" );	
		mtmp.Set( 0, _eComButton_A,  2, 0,  _eComMoveFlag_MoveEnd );
		
		// 
		mtmp = stmp.PlusMove(); // 
		mtmp.SetTag( "J5B" );
		mtmp.Set( 0, _eComButton_B,  2, 0,  _eComMoveFlag_MoveEnd );

		// 
		mtmp = stmp.PlusMove(); // 
		mtmp.SetTag( "J5C" );
		mtmp.Set( 0, _eComButton_C,  2, 0,  _eComMoveFlag_MoveEnd );

	}
}


// ここからnowskillnumで定義開始
nowskillnum = 50;

//--------------------------------------------------------------
{	// 様子見セット:中遠距離
	stmp = com.GetSkill(nowskillnum); nowskillnum++;	// スキルを番号名で作成
	stmp.SetLotWait( 0 );							// 終了、失敗時のウェイト
	stmp.SetLotFailedAvg( 0 );						// 失敗確率

	stmp.checkfunc = function() // チェック
	{
		local st = BCom.GetStatus();
		
		//	自分の状態チェック
		if( st.GetELenX() < 120000 ) return 0;				//	X軸取得
		if( !st.IsPMoveable() ) return 0;					//	行動可能の場合、発動する
		
		return com_frequency1;
	}

	stmp.updatefunc = function() // 採用時の更新
	{
		local st = BCom.GetStatus();
		
		if( BCom.GetMoveTag() == "RND_start" ) //	分岐条件判定
		{
			local ar = ["6","2","6464","D","J9","6D","5"]; // 分岐先を定義する
			local jump = BMvEff.Random_Limit( ar.len() );
			BCom.Move_Jump( ar[jump] );
		}
		
		return 1;
	}

	//	行動設定
	//	分岐開始
	mtmp = stmp.PlusMove();	// 動き追加
	mtmp.SetTag( "RND_start" );
	mtmp.Set( 0, 0,  2, 0,  _eComMoveFlag_MoveEnd );
	{
		// 前進
		mtmp = stmp.PlusMove();	// 動き追加
		mtmp.SetTag( "6" );
		mtmp.Set( 6, 0,  40, 0,  _eComMoveFlag_StickHold | _eComMoveFlag_MoveEnd );

		// 屈待ち
		mtmp = stmp.PlusMove();	// 動き追加
		mtmp.SetTag( "2" );
		mtmp.Set( 2, 0,  30, 0,  _eComMoveFlag_StickHold | _eComMoveFlag_MoveEnd );

		// 6464 左右にフラフラする、その後ぼったち
		mtmp = stmp.PlusMove();	// 動き追加
		mtmp.SetTag( "6464" );
		mtmp.Set( 6, 0,  12, 0,  _eComMoveFlag_StickHold );
		mtmp = stmp.PlusMove();	// 動き追加
		mtmp.Set( 4, 0,  8, 0,  _eComMoveFlag_StickHold );
		mtmp = stmp.PlusMove();	// 動き追加
		mtmp.Set( 2, 0,  4, 0,  _eComMoveFlag_StickHold );
		mtmp = stmp.PlusMove();	// 動き追加
		mtmp.Set( 6, 0,  12, 0,  _eComMoveFlag_StickHold );	
		mtmp = stmp.PlusMove();	// 動き追加
		mtmp.Set( 4, 0,  8, 0,  _eComMoveFlag_StickHold );
		mtmp = stmp.PlusMove();	// 動き追加
		mtmp.Set( 0, 0,  15, 0,  _eComMoveFlag_MoveEnd );	
		
		// ゲージ溜め
		mtmp = stmp.PlusMove();	// 動き追加
		mtmp.SetTag( "D" );
		mtmp.Set( 2, _eComButton_D,  60, 0, _eComMoveFlag_ButtonHold | _eComMoveFlag_MoveEnd );
		
		// 前ジャンプJ
		mtmp = stmp.PlusMove();	// 動き追加
		mtmp.SetTag( "J9" );
		mtmp.Set( 9, 0,  20, 0,  _eComMoveFlag_MoveEnd );

		// 地上アサルト
		mtmp = stmp.PlusMove();	// 動き追加
		mtmp.SetTag( "6D" );
		mtmp.SetSpSkill( def_CN_Assault_Std );
		mtmp.Set( 0, 0,  20, 0,  _eComMoveFlag_MoveEnd );
		
		// ぼったち
		mtmp = stmp.PlusMove();	// 動き追加
		mtmp.SetTag( "5" );
		mtmp.Set( 0, 0,  30, 0,  _eComMoveFlag_MoveEnd );
		
	}
}

//--------------------------------------------------------------
{	// 様子見セット:中遠距離：飛び道具
	stmp = com.GetSkill(nowskillnum); nowskillnum++;	// スキルを番号名で作成
	stmp.SetLotWait( 0 );							// 終了、失敗時のウェイト
	stmp.SetLotFailedAvg( 0 );						// 失敗確率

	stmp.checkfunc = function() // チェック
	{
		local st = BCom.GetStatus();
		if( st.GetELenX() < 60000 ) return 0;		//	X軸取得
		if( !st.IsPMoveable() ) return 0;			//	行動可能の場合、発動する

		return com_frequency1;
	}

	stmp.updatefunc = function() // 採用時の更新
	{
		local st = BCom.GetStatus();
		
		if( BCom.GetMoveTag() == "RND_start" ) //	分岐条件判定
		{
			local ar = ["236A","236B","9J236A","9J236B","8J236A","8J236B"]; // 分岐先を定義する
			local jump = BMvEff.Random_Limit( ar.len() );
			BCom.Move_Jump( ar[jump] );
		}
		
		return 1;
	}

	//	行動設定
	//	分岐開始
	mtmp = stmp.PlusMove();	// 動き追加
	mtmp.SetTag( "RND_start" );
	mtmp.Set( 0, 0,  2, 0,  _eComMoveFlag_MoveEnd );
	{
		// 236A
		mtmp = stmp.PlusMove();	// 動き追加
		mtmp.SetTag( "236A" );
		mtmp.SetSpSkill( def_CN_Skill_236A );
		mtmp.Set( 0, 0,  49, 0,  _eComMoveFlag_MoveableEnd | _eComMoveFlag_MoveEnd );

		// 236B
		mtmp = stmp.PlusMove();	// 動き追加
		mtmp.SetTag( "236B" );
		mtmp.SetSpSkill( def_CN_Skill_236B );
		mtmp.Set( 0, 0,  49, 0,  _eComMoveFlag_MoveableEnd | _eComMoveFlag_MoveEnd );	

		// 前ジャンプ236A
		mtmp = stmp.PlusMove();	// 動き追加
		mtmp.SetTag( "9J236A" );
		mtmp.Set( 9, 0,  18, 0,  0 );
		mtmp = stmp.PlusMove();	// 動き追加
		mtmp.SetSpSkill( def_CN_Skill_J236A );
		mtmp.Set( 0, 0,  60, 0,  _eComMoveFlag_MoveEnd );	
		
		// 前ジャンプ236B
		mtmp = stmp.PlusMove();	// 動き追加
		mtmp.SetTag( "9J236B" );
		mtmp.Set( 9, 0,  17, 0,  0 );
		mtmp = stmp.PlusMove();	// 動き追加
		mtmp.SetSpSkill( def_CN_Skill_J236B );
		mtmp.Set( 0, 0,  60, 0,  _eComMoveFlag_MoveEnd );	
		
		// 垂直ジャンプ236A
		mtmp = stmp.PlusMove();	// 動き追加
		mtmp.SetTag( "8J236A" );
		mtmp.Set( 8, 0,  18, 0,  0 );
		mtmp = stmp.PlusMove();	// 動き追加
		mtmp.SetSpSkill( def_CN_Skill_J236A );
		mtmp.Set( 0, 0,  60, 0,  _eComMoveFlag_MoveEnd );	
		
		// 垂直ジャンプ236B
		mtmp = stmp.PlusMove();	// 動き追加
		mtmp.SetTag( "8J236B" );
		mtmp.Set( 8, 0,  15, 0,  0 );
		mtmp = stmp.PlusMove();	// 動き追加
		mtmp.SetSpSkill( def_CN_Skill_J236B );
		mtmp.Set( 0, 0,  60, 0,  _eComMoveFlag_MoveEnd );	
		
	}
}

//--------------------------------------------------------------
{	// 密着からのコンボ1
	stmp = com.GetSkill(nowskillnum); nowskillnum++;	// スキルを番号名で作成
	stmp.SetLotWait( 60 );							// 終了、失敗時のウェイト
	stmp.SetLotFailedAvg( 0 );						// 失敗確率

	// 採用判定チェック
	stmp.checkfunc = function()
	{
		local st = BCom.GetStatus();
		
		//	自分の状態チェック	
		if( 30000 < st.GetELenX() ) return 0;				//	X軸取得
		if( !st.CheckPosState( _PosState_Ground ) ) return 0;	//	地上の場合、発動する

		return com_frequency2;
	}

	// 採用時の更新
	stmp.updatefunc = function()
	{
		local st = BCom.GetStatus();
		
		//	条件分岐判定	
		if( BCom.GetMoveTag() == "RND_start" )
		{
			local ar = ["END","2B","2B2A","2B6C","5C","5C6B","2C","2C2A"]; // 分岐先を定義する
			local jump = BMvEff.Random_Limit( ar.len() );
			BCom.Move_Jump( ar[jump] );
		}
		return 1;
	}

	//	行動設定
	//	5A
	mtmp = stmp.PlusMove(); // 動き追加
	mtmp.SetTag( "5A" );
	mtmp.Set( 0, _eComButton_A,  20, 0,  _eComMoveFlag_HitNext | _eComMoveFlag_ThroughEnd );

	//	5B
	mtmp = stmp.PlusMove(); // 動き追加
	mtmp.SetTag( "5B" );
	mtmp.Set( 0, _eComButton_B,  30, 0,  _eComMoveFlag_HitNext | _eComMoveFlag_ThroughEnd );

	//	分岐開始
	mtmp = stmp.PlusMove();	// 動き追加
	mtmp.SetTag( "RND_start" );
	mtmp.Set( 0, 0,  2, 0,  _eComMoveFlag_MoveEnd );
	{
		//	何もしない
		mtmp = stmp.PlusMove();	// 動き追加
		mtmp.SetTag( "END" );
		mtmp.Set( 0, 0, 30, 0, _eComMoveFlag_MoveEnd );

		//	2B
		mtmp = stmp.PlusMove(); // 動き追加
		mtmp.SetTag( "2B" );
		mtmp.Set( 2, _eComButton_B,  25, 0,  _eComMoveFlag_MoveableEnd | _eComMoveFlag_MoveEnd );

		//	2B2A
		mtmp = stmp.PlusMove(); // 動き追加
		mtmp.SetTag( "2B2A" );
		mtmp.Set( 2, _eComButton_B,  25, 0,  _eComMoveFlag_HitEnd | _eComMoveFlag_MoveEnd );
		mtmp = stmp.PlusMove(); // 動き追加
		mtmp.Set( 2, _eComButton_A,  25, 0,  _eComMoveFlag_MoveableEnd | _eComMoveFlag_MoveEnd );
		
		//	2B6C
		mtmp = stmp.PlusMove(); // 動き追加
		mtmp.SetTag( "2B6C" );
		mtmp.Set( 2, _eComButton_B,  25, 0,  _eComMoveFlag_HitEnd | _eComMoveFlag_MoveEnd );
		mtmp = stmp.PlusMove(); // 動き追加
		mtmp.Set( 6, _eComButton_C,  90, 0,  _eComMoveFlag_MoveableEnd | _eComMoveFlag_MoveEnd );
		
		//	5C
		mtmp = stmp.PlusMove(); // 動き追加
		mtmp.SetTag( "5C" );
		mtmp.Set( 0, _eComButton_C,  60, 0,  _eComMoveFlag_MoveableEnd | _eComMoveFlag_MoveEnd );

		//	5C6B
		mtmp = stmp.PlusMove(); // 動き追加
		mtmp.SetTag( "5C6B" );
		mtmp.Set( 0, _eComButton_C,  40, 0,  _eComMoveFlag_HitEnd | _eComMoveFlag_MoveEnd );
		mtmp = stmp.PlusMove(); // 動き追加
		mtmp.Set( 6, _eComButton_B,  60, 0,  _eComMoveFlag_MoveableEnd | _eComMoveFlag_MoveEnd );
		
		//	2C
		mtmp = stmp.PlusMove();	// 動き追加
		mtmp.SetTag( "2C" );
		mtmp.Set( 2, _eComButton_C,  60, 0,  _eComMoveFlag_MoveableEnd | _eComMoveFlag_MoveEnd );

		//	2C2A
		mtmp = stmp.PlusMove();	// 動き追加
		mtmp.SetTag( "2C2A" );
		mtmp.Set( 2, _eComButton_C,  50, 0, _eComMoveFlag_HitNext | _eComMoveFlag_ThroughEnd );
		mtmp = stmp.PlusMove();	// 動き追加
		mtmp.Set( 2, _eComButton_A,  5, 0, _eComMoveFlag_MoveableEnd | _eComMoveFlag_MoveEnd );

	}
}

//--------------------------------------------------------------
{	// 密着からのコンボ2	
	stmp = com.GetSkill(nowskillnum); nowskillnum++;	// スキルを番号名で作成
	stmp.SetLotWait( 60 );							// 終了、失敗時のウェイト
	stmp.SetLotFailedAvg( 0 );						// 失敗確率
	stmp.checkfunc = function() // チェック
	{
		local st = BCom.GetStatus();
		if( 50000 < st.GetELenX() ) return 0; // 
		if( !st.CheckPosState( _PosState_Ground ) ) return 0; // 地上じゃないとだめ

		return com_frequency1;
	}

	stmp.updatefunc = function() // 採用時の更新
	{
		local st = BCom.GetStatus();
		
		if( BCom.GetMoveTag() == "RND_start" ) //密着コンボ開始 
		{
			local ar = ["665B8J8JC","5C","214B"]; // 分岐先を定義する
			local jump = BMvEff.Random_Limit( ar.len() );
			BCom.Move_Jump( ar[jump] );
		}
		return 1;
	}

	//	行動設定
	//	6C入力
	mtmp = stmp.PlusMove();	// 動き追加
	mtmp.SetTag( "6C" );
	mtmp.Set( 6, _eComButton_C , 40, 0, _eComMoveFlag_DamageNext | _eComMoveFlag_MoveEnd );

	//	分岐開始
	mtmp = stmp.PlusMove();	// 動き追加
	mtmp.SetTag( "RND_start" );
	mtmp.Set( 0, 0,  2, 0,  _eComMoveFlag_MoveEnd );
	{

		//	665B8J8JC
		mtmp = stmp.PlusMove();	// 動き追加	ダメージHIT時ディレイをかける
		mtmp.SetTag( "665B8J8JC" );
		mtmp.Set( 6, 0,  35, 0,  0 );
		mtmp = stmp.PlusMove();	// 動き追加	ダッシュ入力1
		mtmp.Set( 6, 0,  1, 0,  0 );
		mtmp = stmp.PlusMove();	// 動き追加	ダッシュ入力ニュートラル
		mtmp.Set( 0, 0,  1, 0,  0 );
		mtmp = stmp.PlusMove();	// 動き追加	ダッシュ入力2
		mtmp.Set( 6, 0,  4, 7,  _eComMoveFlag_StickHold );
		mtmp = stmp.PlusMove();	// 動き追加	ダッシュ5B
		mtmp.SetTag( "5B" );
		mtmp.Set( 0, _eComButton_B,  25, 0, _eComMoveFlag_DamageNext | _eComMoveFlag_MoveEnd );
		mtmp = stmp.PlusMove();	// 動き追加	ダッシュ5B
		mtmp.SetTag( "8J" );
		mtmp.Set( 8, 0,  16, 0,  0 );
		mtmp = stmp.PlusMove();	// 動き追加	8JC
		mtmp.SetTag( "8JC" );
		mtmp.Set( 8, _eComButton_C,  20, 0,  _eComMoveFlag_MoveEnd );	

		//	5C
		mtmp = stmp.PlusMove();	// 動き追加	ダメージHIT時ディレイをかける
		mtmp.SetTag( "5C" );
		mtmp.Set( 6, 0,  40, 0,  0 );
		mtmp = stmp.PlusMove();	// 動き追加	5C	
		mtmp.Set( 0, _eComButton_C,  10, 0, _eComMoveFlag_HitEnd | _eComMoveFlag_MoveEnd );
		
		//	214B
		mtmp = stmp.PlusMove();	// 動き追加	ダメージHIT時ディレイをかける
		mtmp.SetTag( "214B" );
		mtmp.Set( 6, 0,  40, 0,  0 );
		mtmp = stmp.PlusMove();	// 動き追加	214B
		mtmp.SetSpSkill( def_CN_Skill_214B );
		mtmp.Set( 0, 0,  10, 0, _eComMoveFlag_MoveEnd );

	}
}
	
//--------------------------------------------------------------
{	// 密着からのコンボ3
	stmp = com.GetSkill(nowskillnum); nowskillnum++;	// スキルを番号名で作成
	stmp.SetLotWait( 60 );							// 終了、失敗時のウェイト
	stmp.SetLotFailedAvg( 0 );						// 失敗確率

	stmp.checkfunc = function() // チェック
	{
		local st = BCom.GetStatus();
		if( 40000 < st.GetELenX() ) return 0; // 
		if( !st.CheckPosState( _PosState_Ground ) ) return 0; // 地上じゃないとだめ

		return com_frequency1;
	}

	stmp.updatefunc = function() // 採用時の更新
	{
		local st = BCom.GetStatus();
		
		if( BCom.GetMoveTag() == "RND_start" ) //密着コンボ開始 
		{
			local ar = ["END1","END2","236C","214C"]; // 分岐先を定義する
			local jump = BMvEff.Random_Limit( ar.len() );
			BCom.Move_Jump( ar[jump] );
		}	
		return 1;
	}

	//	5B
	mtmp = stmp.PlusMove(); // 動き追加
	mtmp.SetTag( "5B" );
	mtmp.Set( 0, _eComButton_B,  30, 0,  _eComMoveFlag_HitNext |  _eComMoveFlag_MoveEnd );

	//	2B
	mtmp = stmp.PlusMove(); // 動き追加
	mtmp.SetTag( "2B" );
	mtmp.Set( 2, _eComButton_B,  30, 0,  _eComMoveFlag_HitNext |  _eComMoveFlag_MoveEnd );

	//	5C
	mtmp = stmp.PlusMove(); // 動き追加
	mtmp.SetTag( "5C" );
	mtmp.Set( 0, _eComButton_C,  60, 0,  _eComMoveFlag_DamageNext | _eComMoveFlag_MoveEnd );

	//	236B
	mtmp = stmp.PlusMove(); // 動き追加
	mtmp.SetTag( "236B" );
	mtmp.SetSpSkill( def_CN_Skill_236B );
	mtmp.Set( 0, 0,  25, 0,  0 );

	//	分岐開始
	mtmp = stmp.PlusMove();	// 動き追加
	mtmp.SetTag( "RND_start" );
	mtmp.Set( 0, 0,  2, 0,  _eComMoveFlag_MoveEnd );
	{

		//	END1 (何もしない 確率の水増し)
		mtmp = stmp.PlusMove(); // 動き追加
		mtmp.SetTag( "END1" );
		mtmp.Set( 0, 0,  5, 0,  _eComMoveFlag_MoveEnd );

		//	END2 (何もしない 確率の水増し)
		mtmp = stmp.PlusMove(); // 動き追加
		mtmp.SetTag( "END2" );
		mtmp.Set( 0, 0,  5, 0,  _eComMoveFlag_MoveEnd );

		//	236C
		mtmp = stmp.PlusMove(); // 動き追加
		mtmp.SetTag( "236C" );
		mtmp.SetSpSkill( def_CN_Skill_236EX );
		mtmp.Set( 0, 0,  30, 0,  _eComMoveFlag_MoveEnd );
		
		//	214C
		mtmp = stmp.PlusMove(); // 動き追加
		mtmp.SetTag( "214C" );
		mtmp.SetSpSkill( def_CN_Skill_214EX );
		mtmp.Set( 0, 0,  30, 0,  _eComMoveFlag_MoveEnd );
		
	}
}

//--------------------------------------------------------------
{	// 密着からのコンボ4	下段始動
	stmp = com.GetSkill(nowskillnum); nowskillnum++;	// スキルを番号名で作成
	stmp.SetLotWait( 60 );							// 終了、失敗時のウェイト
	stmp.SetLotFailedAvg( 0 );						// 失敗確率

	stmp.checkfunc = function() // チェック
	{
		local st = BCom.GetStatus();
		if( 40000 < st.GetELenX() ) return 0;				//	X軸取得
		if( !0 == st.GetELenY() )		return 0;			//	Y軸取得	相手が地上の場合、発動する
		if( !st.CheckPosState( _PosState_Ground ) ) return 0;	//	地上の場合、発動する
		
		
		return com_frequency2;
	}

	// 採用時の更新
	stmp.updatefunc = function()
	{
		local st = BCom.GetStatus();
		
		if( BCom.GetMoveTag() == "RND_start" ) //密着コンボ開始 
		{
			local ar = ["END","5C","2C5C","2C5CJAJBJC"]; // 分岐先を定義する
			local jump = BMvEff.Random_Limit( ar.len() );
			BCom.Move_Jump( ar[jump] );
		}
		return 1;
	}

	//	行動設定

	//	2B
	mtmp = stmp.PlusMove(); // 動き追加
	mtmp.SetTag( "2B" );
	mtmp.Set( 2, _eComButton_B,  30, 0,  _eComMoveFlag_HitNext | _eComMoveFlag_ThroughEnd );

	//	5B
	mtmp = stmp.PlusMove(); // 動き追加
	mtmp.SetTag( "5B" );
	mtmp.Set( 0, _eComButton_B,  30, 0,  _eComMoveFlag_HitNext | _eComMoveFlag_ThroughEnd );

	//	分岐開始
	mtmp = stmp.PlusMove();	// 動き追加
	mtmp.SetTag( "RND_start" );
	mtmp.Set( 0, 0,  2, 0,  _eComMoveFlag_MoveEnd );
	{
		//	何もしない
		mtmp = stmp.PlusMove();	// 動き追加
		mtmp.SetTag( "END" );
		mtmp.Set( 0, 0, 30, 0, _eComMoveFlag_MoveEnd );

		//	5C
		mtmp = stmp.PlusMove(); // 動き追加
		mtmp.SetTag( "5C" );
		mtmp.Set( 0, _eComButton_C, 40, 0,  _eComMoveFlag_HitEnd | _eComMoveFlag_MoveEnd );
		
		//	2C5C
		mtmp = stmp.PlusMove();	// 動き追加	2C
		mtmp.SetTag( "2C5C" );
		mtmp.Set( 2, _eComButton_C, 40, 0,  _eComMoveFlag_HitNext | _eComMoveFlag_MoveEnd );
		mtmp = stmp.PlusMove();	// 動き追加	5C
		mtmp.Set( 5, _eComButton_C, 40, 0,  _eComMoveFlag_HitEnd | _eComMoveFlag_MoveEnd );
		
		//	2C5CJAJBJC
		mtmp = stmp.PlusMove();	// 動き追加	2C
		mtmp.SetTag( "2C5CJAJBJC" );
		mtmp.Set( 2, _eComButton_C, 40, 0,  _eComMoveFlag_DamageNext | _eComMoveFlag_MoveEnd );
		mtmp = stmp.PlusMove();	// 動き追加	5C
		mtmp.Set( 5, _eComButton_C, 40, 0,  _eComMoveFlag_DamageNext | _eComMoveFlag_MoveEnd );
		mtmp = stmp.PlusMove();	// 動き追加	9	前ジャンプ
		mtmp.Set( 9, 0, 17, 0, 0 );
		mtmp = stmp.PlusMove();	// 動き追加	JA
		mtmp.Set( 0, _eComButton_A, 22, 0,  _eComMoveFlag_DamageNext | _eComMoveFlag_MoveEnd );
		mtmp = stmp.PlusMove();	// 動き追加	JB
		mtmp.Set( 0, _eComButton_B, 32, 0,  _eComMoveFlag_DamageNext | _eComMoveFlag_MoveEnd );
		mtmp = stmp.PlusMove();	// 動き追加	JC
		mtmp.Set( 0, _eComButton_C, 45, 0,  _eComMoveFlag_HitEnd | _eComMoveFlag_MoveEnd );
	}
}

//--------------------------------------------------------------
{	// のけぞり中のコンボ1 （地上ダウン中の相手・ジャンプ攻撃HIT後に攻撃）

	stmp = com.GetSkill(nowskillnum); nowskillnum++;	// スキルを番号名で作成
	stmp.SetLotWait( 60 );							// 終了、失敗時のウェイト
	stmp.SetLotFailedAvg( 0 );						// 失敗確率

	// チェック
	stmp.checkfunc = function()
	{
		local st = BCom.GetStatus();
		
		//	自分の状態チェック	
		if( 35000 < st.GetELenX() )	return 0;			//	X軸取得
		if( !0 == st.GetELenY() )		return 0;			//	Y軸取得
		if( !st.CheckPosState( _PosState_Ground ) ) return 0;	//	地上の場合、発動する
		if( !st.IsPMoveable() ) return 0;					//	行動可能の場合、発動する

		//	敵の状態チェック
		if( !st.CheckEState( _eComState_Damage  ) ) return 0;	// 敵がやられ状態の場合、発動する
		
		return com_frequency2;
	}

	// 採用時の更新
	stmp.updatefunc = function()
	{
		local st = BCom.GetStatus();

		//	条件分岐判定	
		if( BCom.GetMoveTag() == "RND_start" )
		{
			local ar	=	["END1","5B","5C","6C","214B","22A"];	//	分岐先を定義
			local jump	=	BMvEff.Random_Limit( ar.len() );
			BCom.Move_Jump( ar[jump] );
		}

		return 1;
	}

	//	2B
	mtmp = stmp.PlusMove();	// 動き追加
	mtmp.Set( 2, _eComButton_B,  20, 0, _eComMoveFlag_DamageNext | _eComMoveFlag_MoveEnd );

	//	分岐開始
	mtmp = stmp.PlusMove();	// 動き追加
	mtmp.SetTag( "RND_start" );
	mtmp.Set( 0, 0,  2, 0,  _eComMoveFlag_MoveEnd );
	{

		//	END1 (何もしない 確率の水増し)
		mtmp = stmp.PlusMove(); // 動き追加
		mtmp.SetTag( "END1" );	
		mtmp.Set( 0, 0,  22, 0,  _eComMoveFlag_MoveEnd );

		//	5B
		mtmp = stmp.PlusMove();	// 動き追加
		mtmp.SetTag( "5B" );
		mtmp.Set( 0, _eComButton_B,  35, 0, _eComMoveFlag_DamageEnd | _eComMoveFlag_MoveEnd );
		
		
		//	5C
		mtmp = stmp.PlusMove();	// 動き追加
		mtmp.SetTag( "5C" );
		mtmp.Set( 0, _eComButton_C,  35, 0, _eComMoveFlag_DamageEnd | _eComMoveFlag_MoveEnd );

		//	6C
		mtmp = stmp.PlusMove();	// 動き追加
		mtmp.SetTag( "6C" );
		mtmp.Set( 6, _eComButton_C,  60, 0, _eComMoveFlag_DamageEnd | _eComMoveFlag_MoveEnd );
		
		//	214B
		mtmp = stmp.PlusMove();	// 動き追加
		mtmp.SetTag( "214B" );
		mtmp.SetSpSkill( def_CN_Skill_214B );
		mtmp.Set( 0, 0,  120, 0, _eComMoveFlag_MoveableEnd | _eComMoveFlag_MoveEnd );

		//	214B
		mtmp = stmp.PlusMove();	// 動き追加
		mtmp.SetTag( "22A" );
		mtmp.SetSpSkill( def_CN_Skill_0202A );
		mtmp.Set( 0, 0,  120, 0, _eComMoveFlag_MoveableEnd | _eComMoveFlag_MoveEnd );

	}
}

//--------------------------------------------------------------
{	// 近距離必殺技
	stmp = com.GetSkill(nowskillnum); nowskillnum++;	// スキルを番号名で作成
	stmp.SetLotWait( 60 );							// 終了、失敗時のウェイト
	stmp.SetLotFailedAvg( 0 );						// 失敗確率

	stmp.checkfunc = function() // チェック
	{
		local st = BCom.GetStatus();
		if( 40000 < st.GetELenX() ) return 0; // 
		if( !st.CheckPosState( _PosState_Ground ) ) return 0; // 地上じゃないとだめ

		return com_frequency1;
	}

	stmp.updatefunc = function() // 採用時の更新
	{
		local st = BCom.GetStatus();
		
		if( BCom.GetMoveTag() == "RND_start" ) //	分岐条件判定 
		{
			local ar = ["214A","214B","22B"]; // 分岐先を定義する
			local jump = BMvEff.Random_Limit( ar.len() );
			BCom.Move_Jump( ar[jump] );
		}
		return 1;
	}

	//	分岐開始
	mtmp = stmp.PlusMove();	// 動き追加
	mtmp.SetTag( "RND_start" );
	mtmp.Set( 0, 0,  2, 0,  _eComMoveFlag_MoveEnd );
	{

		//	214A
		mtmp = stmp.PlusMove();	// 動き追加
		mtmp.SetTag( "214A" );
		mtmp.SetSpSkill( def_CN_Skill_214A );
		mtmp.Set( 0, 0,  60, 0, _eComMoveFlag_MoveableEnd | _eComMoveFlag_MoveEnd );


		//	214B
		mtmp = stmp.PlusMove();	// 動き追加
		mtmp.SetTag( "214B" );
		mtmp.SetSpSkill( def_CN_Skill_214B );
		mtmp.Set( 0, 0,  60, 0, _eComMoveFlag_MoveableEnd | _eComMoveFlag_MoveEnd );

		//	22B
		mtmp = stmp.PlusMove();	// 動き追加
		mtmp.SetTag( "22B" );
		mtmp.SetSpSkill( def_CN_Skill_0202B );
		mtmp.Set( 0, 0,  60, 0, _eComMoveFlag_MoveableEnd | _eComMoveFlag_MoveEnd );
	}
}

//--------------------------------------------------------------
{	// A+B+C+D（２ゲージ）
	stmp = com.GetSkill(nowskillnum); nowskillnum++; // 作成
	stmp.SetLotWait( 60 );			// 終了、失敗時のウェイト
	stmp.SetLotFailedAvg( 75 );	// 失敗確率

	stmp.checkfunc = function()	// チェック
	{
		local st = BCom.GetStatus();
		if( 30000 < st.GetELenX() ) return 0; // 遠いときは発動しない
		if( st.GetEXS() < 100  ) return 0; // ゲージMAX以上
		if( 25 < st.GetHPP() ) return 0; //	 体力取得（割合
		if( !st.CheckPosState( _PosState_Ground ) ) return 0; // 地上じゃないとだめ

		return com_frequency1;
	}

	stmp.updatefunc = function() // 採用時の更新
	{
		local st = BCom.GetStatus();

		return 1;
	}
		// 0-0
	mtmp = stmp.PlusMove();	// 動き追加
	mtmp.SetTag( "ABCD" );
	//	mtmp.SetSpSkill( Mv_DyingIWAtk );
	mtmp.Set( 0, _eComButton_A | _eComButton_B | _eComButton_D , 110, 0,  _eComMoveFlag_MoveEnd );
}
	
//--------------------------------------------------------------
{	// ジャンプからのコンボ1
	stmp = com.GetSkill(nowskillnum); nowskillnum++; // 作成
	stmp.SetLotWait( 60 ); // 終了、失敗時のウェイト
	stmp.SetLotFailedAvg( 0 ); // 失敗確率

	stmp.checkfunc = function() // チェック
	{
		local st = BCom.GetStatus();
		if( !( 40000 < st.GetELenX() && st.GetELenX() < 72000 ) ) return 0; // 
		if( !st.CheckPosState( _PosState_Ground ) ) return 0; // 地上じゃないとだめ
		if( !st.IsPMoveable() ) return 0; // 行動可能じゃないと発動しない
		
		return com_frequency2;
	}

	stmp.updatefunc = function() // 採用時の更新
	{
		local st = BCom.GetStatus();
		
		if( BCom.GetMoveTag() == "RND_start" ) //密着コンボ開始 
		{
			local ar = ["6C","236A","214A"]; // 分岐先を定義する

			local jump = BMvEff.Random_Limit( ar.len() );
			BCom.Move_Jump( ar[jump] );
		}
		return 1;
	}

	//	行動設定
	//	9入力
	mtmp = stmp.PlusMove();	// 動き追加
	mtmp.SetTag( "9" );
	mtmp.Set( 9, 0, 19, 5, 0 );

	//	JC攻撃
	mtmp = stmp.PlusMove();	// 動き追加
	mtmp.SetTag( "jc" );
	mtmp.Set( 0, _eComButton_C,  60, 0,   _eComMoveFlag_HitNext | _eComMoveFlag_MoveEnd );

	//	HITしたら着地待ち
	mtmp = stmp.PlusMove();	// 動き追加
	mtmp.SetTag( "landwait" );
	mtmp.Set( 2, 0,  90, 0, _eComMoveFlag_GroundNext | _eComMoveFlag_MoveEnd );

	//	5C
	mtmp = stmp.PlusMove();	// 動き追加
	mtmp.SetTag( "5c" );
	mtmp.Set( 0, _eComButton_C,  60, 60,   _eComMoveFlag_HitNext | _eComMoveFlag_MoveEnd );


	//	分岐開始
	mtmp = stmp.PlusMove();	// 動き追加
	mtmp.SetTag( "RND_start" );
	mtmp.Set( 0, 0,  2, 0,  _eComMoveFlag_MoveEnd );
	{
		//	6C	浮かせ
		mtmp = stmp.PlusMove();	// 動き追加
		mtmp.SetTag( "6C" );
		mtmp.Set( 6, _eComButton_C,  40, 0,  _eComMoveFlag_MoveEnd );

		//	236A	飛び道具
		mtmp = stmp.PlusMove();	// 動き追加
		mtmp.SetTag( "236A" );
		mtmp.SetSpSkill( def_CN_Skill_236A );
		mtmp.Set( 0, 0,  40, 0,  _eComMoveFlag_MoveEnd );

		//	214A	牽制 その後に攻勢防御
		mtmp = stmp.PlusMove();	// 動き追加
		mtmp.SetTag( "214A" );
		mtmp.SetSpSkill( def_CN_Skill_214A );
		mtmp.Set( 0, 0,  4, 0,  0 );

		mtmp = stmp.PlusMove();	// 動き追加
		mtmp.Set( 2, 0,  50, 0,  0 );

		mtmp = stmp.PlusMove();	// 動き追加
		mtmp.Set( 2, _eComButton_B | _eComButton_C ,  60, 0,  _eComMoveFlag_MoveEnd );
	}
}
	
//--------------------------------------------------------------
{	// エリアル1	(アドリブ)
	stmp = com.GetSkill(nowskillnum); nowskillnum++; // 作成
	stmp.SetLotWait( 60 ); // 終了、失敗時のウェイト
	stmp.SetLotFailedAvg( 0 ); // 失敗確率

	stmp.checkfunc = function() // チェック
	{
		local st = BCom.GetStatus();
		
		// 自分の状態
		if( !( 7000 < st.GetELenX() && st.GetELenX() < 50000 ) ) return 0; // 	
		if( st.GetELenY() <= 6000 ) return 0;	//
		if( !st.CheckPosState( _PosState_Ground ) ) return 0; // 地上じゃないとだめ
		if( !st.IsPMoveable() ) return 0; // 行動可能じゃないと発動しない

		// 敵の状態
		if( !st.CheckEState( _eComState_Damage ) ) return 0; // 敵がやられじゃないとだめ	
		
		return com_frequency3;
	}

	stmp.updatefunc = function() // 採用時の更新
	{
		local st = BCom.GetStatus();
		
		if( BCom.GetMoveTag() == "RND_start" ) //	分岐条件判定 
		{
			local ar		=	["J5C","J214B","J214BJ236EX","J214BJ214EX"]; // 分岐先を定義する
			local jump	=	BMvEff.Random_Limit( ar.len() );
			BCom.Move_Jump( ar[jump] );
		}
		return 1;
	}

	//	行動設定
	//	9入力
	mtmp = stmp.PlusMove();	// 動き追加
	mtmp.SetTag( "9" );
	mtmp.Set( 9, 0, 4, 0, 0 );

	//	JA攻撃
	mtmp = stmp.PlusMove();	// 動き追加
	mtmp.SetTag( "JA" );
	mtmp.Set( 0, _eComButton_A,  60, 0,   _eComMoveFlag_HitNext | _eComMoveFlag_MoveEnd );

	//	JB攻撃
	mtmp = stmp.PlusMove();	// 動き追加
	mtmp.SetTag( "JB" );
	mtmp.Set( 0, _eComButton_B,  60, 0,   _eComMoveFlag_HitNext | _eComMoveFlag_MoveEnd );

	//	分岐開始
	mtmp = stmp.PlusMove();	// 動き追加
	mtmp.SetTag( "RND_start" );
	mtmp.Set( 0, 0,  2, 0,  _eComMoveFlag_MoveEnd );
	{
		//	J5C
		mtmp = stmp.PlusMove();	// 動き追加
		mtmp.SetTag( "J5C" );
		mtmp.Set( 0, _eComButton_C,  3, 0, _eComMoveFlag_MoveEnd );

		//	J214B
		mtmp = stmp.PlusMove();	// 動き追加
		mtmp.SetTag( "J214B" );
		mtmp.SetSpSkill( def_CN_Skill_J214B );
		mtmp.Set( 0, 0,  50, 0, _eComMoveFlag_MoveEnd );

		//	J214BJ236EX
		mtmp = stmp.PlusMove();	// 動き追加
		mtmp.SetTag( "J214BJ236EX" );
		mtmp.SetSpSkill( def_CN_Skill_J214B );
		mtmp.Set( 0, 0,  65, 0, 0 );
		mtmp = stmp.PlusMove();	// 動き追加
		mtmp.SetSpSkill( def_CN_Skill_J236EX );
		mtmp.Set( 0, 0,  60, 0, _eComMoveFlag_MoveEnd );
		
		//	J214BJ214EX
		mtmp = stmp.PlusMove();	// 動き追加
		mtmp.SetTag( "J214BJ214EX" );
		mtmp.SetSpSkill( def_CN_Skill_J214B );
		mtmp.Set( 0, 0,  40, 0, _eComMoveFlag_DamageNext | _eComMoveFlag_MoveEnd);
		mtmp = stmp.PlusMove();	// 動き追加
		mtmp.SetSpSkill( def_CN_Skill_J214EX );
		mtmp.Set( 0, 0,  150, 0, _eComMoveFlag_MoveEnd );
	}
}
	
//--------------------------------------------------------------
{	// エリアル2	(空対空)
	stmp = com.GetSkill(nowskillnum); nowskillnum++; // 作成
	stmp.SetLotWait( 60 ); // 終了、失敗時のウェイト
	stmp.SetLotFailedAvg( 0 ); // 失敗確率

	// 採用判定チェック
	stmp.checkfunc = function()
	{
		local st = BCom.GetStatus();
		
		// 自分の状態
		if( 70000 < st.GetELenX() ) return 0;				//	X軸取得	
		if( st.GetELenY() <= 6000 ) return 0;				//	Y軸取得
		if( st.CheckPosState( _PosState_Ground ) ) return 0;	//	地上の場合、発動しない
		if( !st.IsPMoveable() ) return 0;					//	行動可能の場合、発動する	
		
		return com_frequency3;
	}

	// 採用時の更新
	stmp.updatefunc = function()
	{
		local st = BCom.GetStatus();
		
		if( BCom.GetMoveTag() == "RND_start" ) //	分岐条件判定 
		{
			local ar		=	["J5C","J236A","J236B","J214B","J214BJ236EX","J214BJ214EX"]; // 分岐先を定義する
			local jump	=	BMvEff.Random_Limit( ar.len() );
			BCom.Move_Jump( ar[jump] );
		}
		return 1;
	}

	//	採用時の行動設定

	//	JA攻撃
	mtmp = stmp.PlusMove();	// 動き追加
	mtmp.SetTag( "JA" );
	mtmp.Set( 0, _eComButton_A,  60, 0,   _eComMoveFlag_HitNext | _eComMoveFlag_MoveEnd );

	//	JB攻撃
	mtmp = stmp.PlusMove();	// 動き追加
	mtmp.SetTag( "JB" );
	mtmp.Set( 0, _eComButton_B,  60, 0,   _eComMoveFlag_HitNext | _eComMoveFlag_MoveEnd );

	//	分岐開始
	mtmp = stmp.PlusMove();	// 動き追加
	mtmp.SetTag( "RND_start" );
	mtmp.Set( 0, 0,  2, 0,  _eComMoveFlag_MoveEnd );
	{
		//	J5C
		mtmp = stmp.PlusMove();	// 動き追加
		mtmp.SetTag( "J5C" );
		mtmp.Set( 0, _eComButton_C,  3, 0, _eComMoveFlag_HitEnd | _eComMoveFlag_MoveEnd );

		//	J236A
		mtmp = stmp.PlusMove();	// 動き追加
		mtmp.SetTag( "J236A" );
		mtmp.SetSpSkill( def_CN_Skill_J236A );
		mtmp.Set( 0, 0,  50, 0, _eComMoveFlag_MoveableEnd | _eComMoveFlag_MoveEnd );

		//	J236B
		mtmp = stmp.PlusMove();	// 動き追加
		mtmp.SetTag( "J236B" );
		mtmp.SetSpSkill( def_CN_Skill_J236B );
		mtmp.Set( 0, 0,  50, 0, _eComMoveFlag_MoveableEnd | _eComMoveFlag_MoveEnd );
		
		//	J214B
		mtmp = stmp.PlusMove();	// 動き追加
		mtmp.SetTag( "J214B" );
		mtmp.SetSpSkill( def_CN_Skill_J214B );
		mtmp.Set( 0, 0,  50, 0, _eComMoveFlag_MoveableEnd | _eComMoveFlag_MoveEnd );

		//	J214BJ236EX
		mtmp = stmp.PlusMove();	// 動き追加	多段ヒットの為、手動でディレイを設定します
		mtmp.SetTag( "J214BJ236EX" );
		mtmp.SetSpSkill( def_CN_Skill_J214B );
		mtmp.Set( 0, 0,  65, 0, 0 );
		mtmp = stmp.PlusMove();	// 動き追加	ディレイ後スパキャンします
		mtmp.SetSpSkill( def_CN_Skill_J236EX );
		mtmp.Set( 0, 0,  60, 0, _eComMoveFlag_MoveableEnd | _eComMoveFlag_MoveEnd );
		
		//	J214BJ214EX
		mtmp = stmp.PlusMove();	// 動き追加	多段ヒットの為、手動でディレイを設定します
		mtmp.SetTag( "J214BJ214EX" );
		mtmp.SetSpSkill( def_CN_Skill_J214B );
		mtmp.Set( 0, 0,  40, 0, _eComMoveFlag_DamageNext | _eComMoveFlag_MoveEnd);
		mtmp = stmp.PlusMove();	// 動き追加	ディレイ後スパキャンします
		mtmp.SetSpSkill( def_CN_Skill_J214EX );
		mtmp.Set( 0, 0,  150, 0, _eComMoveFlag_MoveableEnd | _eComMoveFlag_MoveEnd );
	}
}

//--------------------------------------------------------------
{	// エリアル3	(空中投げ)
	stmp = com.GetSkill(nowskillnum); nowskillnum++; // 作成
	stmp.SetLotWait( 60 ); // 終了、失敗時のウェイト
	stmp.SetLotFailedAvg( 0 ); // 失敗確率

	// 採用判定チェック
	stmp.checkfunc = function()
	{
		local st = BCom.GetStatus();
		
		// 自分の状態
		if( 26000 < st.GetELenX() ) return 0;				//	X軸取得	
		if( st.GetELenY() <= 6000 ) return 0;				//	Y軸取得
		if( st.CheckPosState( _PosState_Ground ) ) return 0;	//	地上の場合、発動しない
		if( !st.IsPMoveable() ) return 0;					//	行動可能の場合、発動する	

		//	敵の状態チェック
		if( st.CheckEState( _eComState_Damage  ) ) return 0;	// 敵がやられ状態の場合、発動しない
		
		return com_frequency3;
	}

	// 採用時の更新
	stmp.updatefunc = function()
	{
		return 1;
	}

	//	採用時の行動設定

	//	空投げ
	mtmp = stmp.PlusMove(); // 動き追加 投げ
	mtmp.SetTag( "air_throw" );
	mtmp.Set( 0, _eComButton_A|_eComButton_D,  50, 0,  _eComMoveFlag_MoveableEnd | _eComMoveFlag_MoveEnd );
}

//--------------------------------------------------------------
{	// 適当なダッシュ攻撃
	stmp = com.GetSkill(nowskillnum); nowskillnum++; // 作成
	stmp.SetLotWait( 60 ); // 終了、失敗時のウェイト
	stmp.SetLotFailedAvg( 0 ); // 失敗確率
	stmp.checkfunc = function() // チェック

	{
		local st = BCom.GetStatus();
		if( st.GetELenX() > 70000 ) return 0;				// X軸設定
		if( !st.CheckPosState( _PosState_Ground ) ) return 0;	// 地上じゃないとだめ
		if( !st.IsPMoveable() ) return 0;					// 行動可能じゃないと発動しない
		
		return com_frequency2;
	}

	stmp.updatefunc = function() // 採用時の更新
	{
		local st = BCom.GetStatus();
		if( BCom.GetMoveTag() == "RND_start" ) // 
		{
			local ar = ["44","2B","2C","J7","66B","66C"]; // 分岐先を定義する
			local jump = BMvEff.Random_Limit( ar.len() ); // jumpは配列の要素数（３）のランダム＝0か1か2が入る
			BCom.Move_Jump( ar[jump] );
		}
		return 1;
	}

	//	前ダッシュ準備
	mtmp = stmp.PlusMove(); // 動き追加
	mtmp.Set( 6, 0,  2, 0,  0 );

	//	ニュートラル
	mtmp = stmp.PlusMove(); // 動き追加
	mtmp.Set( 0, 0,  2, 0,  0 );

	//	前ダッシュ成立
	mtmp = stmp.PlusMove(); // 動き追加
	mtmp.Set( 6, 0,  4, 8,  _eComMoveFlag_StickHold );

	//	分岐開始
	mtmp = stmp.PlusMove(); // 動き追加
	mtmp.SetTag( "RND_start" );
	mtmp.Set( 6, 0,  2, 0,  _eComMoveFlag_StickHold );
	{
		//	相手の前でしゃがみガード後に後ろダッシュ
		mtmp = stmp.PlusMove(); // 動き追加	しゃがみガード
		mtmp.SetTag( "44" );
		mtmp.Set( 1, 0,  30, 0,  _eComMoveFlag_StickHold );
		mtmp = stmp.PlusMove(); // 動き追加	ニュートラル
		mtmp.Set( 0, 0,  1, 0,  0 );
		mtmp = stmp.PlusMove(); // 動き追加	後ろステップ入力１
		mtmp.Set( 4, 0,  2, 0,  0 );
		mtmp = stmp.PlusMove(); // 動き追加	後ろステップ入力２
		mtmp.Set( 4, 0,  2, 0,  _eComMoveFlag_MoveEnd );

		//	2B
		mtmp = stmp.PlusMove(); // 動き追加
		mtmp.SetTag( "2B" );
		mtmp.Set( 2, _eComButton_B,  20, 0,  _eComMoveFlag_StickHold | _eComMoveFlag_HitEnd | _eComMoveFlag_MoveEnd );

		//	2C
		mtmp = stmp.PlusMove(); // 動き追加
		mtmp.SetTag( "2C" );
		mtmp.Set( 1, _eComButton_C,  20, 0,  _eComMoveFlag_StickHold | _eComMoveFlag_HitEnd | _eComMoveFlag_MoveEnd );
		
		//	バックジャンプ
		mtmp = stmp.PlusMove(); // 動き追加
		mtmp.SetTag( "J7" );
		mtmp.Set( 7, 0,  16, 0,  _eComMoveFlag_MoveEnd );
		
		//	66B+214A
		mtmp = stmp.PlusMove(); // 動き追加
		mtmp.SetTag( "66B" );
		mtmp.Set( 6, _eComButton_B,  15, 0,  _eComMoveFlag_StickHold | _eComMoveFlag_HitNext | _eComMoveFlag_MoveEnd );
		mtmp = stmp.PlusMove(); // 動き追加
		mtmp.SetSpSkill( def_CN_Skill_214A );
		mtmp.Set( 0, 0,  4, 0,  _eComMoveFlag_MoveEnd );

		//	66C
		mtmp = stmp.PlusMove(); // 動き追加
		mtmp.SetTag( "66C" );
		mtmp.Set( 6, _eComButton_C,  16, 0,  _eComMoveFlag_StickHold | _eComMoveFlag_MoveEnd );	
	}
}

//--------------------------------------------------------------
{	// ダッシュからのコンボ 上下択
	stmp = com.GetSkill(nowskillnum); nowskillnum++; // 作成
	stmp.SetLotWait( 60 ); // 終了、失敗時のウェイト
	stmp.SetLotFailedAvg( 0 ); // 失敗確率

	stmp.checkfunc = function() // チェック
	{
		local st = BCom.GetStatus();
		if( st.GetELenX() > 70000 ) return 0; // 
		if( !st.CheckPosState( _PosState_Ground ) ) return 0; // 地上じゃないとだめ

		return com_frequency1;
	}

	stmp.updatefunc = function() // 採用時の更新
	{
		local st = BCom.GetStatus();
		
		if( BCom.GetMoveTag() == "RND_start" ) //	分岐条件判定
		{
			local ar = ["6B","2C"]; // 分岐先を定義する
			local jump = BMvEff.Random_Limit( ar.len() ); // jumpは配列の要素数（３）のランダム＝0か1か2が入る
			BCom.Move_Jump( ar[jump] );
		}
		return 1;
	}

	//	密着からのコンボ 上下択 行動設定
	//	6入力
	mtmp = stmp.PlusMove();	// 動き追加
	mtmp.Set( 6, 0, 2, 0, 0 );

	//	6入力ダッシュ
	mtmp = stmp.PlusMove();	// 動き追加
	mtmp.Set( 6, 0, 2, 25, 0 );

	//	2A
	mtmp = stmp.PlusMove();	// 動き追加
	mtmp.Set( 2, _eComButton_A,  60, 0,   _eComMoveFlag_HitNext | _eComMoveFlag_MoveEnd );

	//	2A
	mtmp = stmp.PlusMove();	// 動き追加
	mtmp.Set( 2, _eComButton_A,  60, 0,   _eComMoveFlag_HitNext | _eComMoveFlag_MoveEnd );

	//	2B
	mtmp = stmp.PlusMove();	// 動き追加
	mtmp.Set( 2, _eComButton_B,  60, 0,   _eComMoveFlag_HitNext | _eComMoveFlag_MoveEnd );

	//	2Bのディレイ待機フレーム
	mtmp = stmp.PlusMove();	// 動き追加
	mtmp.Set( 4, 0, 15, 0, 0 );

	//	分岐開始
	mtmp = stmp.PlusMove();	// 動き追加
	mtmp.SetTag( "RND_start" );
	mtmp.Set( 0, 0,  2, 0,  _eComMoveFlag_MoveEnd );
	{
		//	6B中段
		mtmp = stmp.PlusMove();	// 動き追加
		mtmp.SetTag( "6B" );
		mtmp.Set( 6, _eComButton_B,  90, 0,  _eComMoveFlag_MoveEnd );

		//	2C下段
		mtmp = stmp.PlusMove();	// 動き追加
		mtmp.SetTag( "2C" );
		mtmp.Set( 2, _eComButton_C,  60, 0,  _eComMoveFlag_MoveEnd );
	}	
}

//--------------------------------------------------------------
{	// 遠間てきとう
	stmp = com.GetSkill(nowskillnum); nowskillnum++; // 作成
	stmp.SetLotWait( 60 ); // 終了、失敗時のウェイト
	stmp.SetLotFailedAvg( 0 ); // 失敗確率
	stmp.checkfunc = function() // チェック

	{
		local st = BCom.GetStatus();
		if( st.GetELenX() < 65000 ) return 0; // 
		if( !st.CheckPosState( _PosState_Ground ) ) return 0; // 地上じゃないとだめ
		if( !st.IsPMoveable() ) return 0;					// 行動可能じゃないと発動しない
		
		return com_frequency1;
	}

	stmp.updatefunc = function() // 採用時の更新
	{
		local st = BCom.GetStatus();
		if( BCom.GetMoveTag() == "RND_start" )
		{
			local ar = ["214B","236A","236B","J236A","6DJB","6DJ236A","6DBC"]; // 分岐先を定義する
			local jump = BMvEff.Random_Limit( ar.len() );
			BCom.Move_Jump( ar[jump] );
		}
		return 1;
	}
	
	//	分岐開始
	mtmp = stmp.PlusMove(); // 動き追加
	mtmp.SetTag( "RND_start" );
	mtmp.Set( 0, 0,  2, 0,  _eComMoveFlag_MoveEnd );
	{
		// 
		mtmp = stmp.PlusMove(); // 動き追加
		mtmp.SetTag( "214B" );
		mtmp.SetSpSkill( def_CN_Skill_214B );
		mtmp.Set( 0, 0,  2, 0,  _eComMoveFlag_MoveEnd );
		
		// 
		mtmp = stmp.PlusMove(); // 動き追加
		mtmp.SetTag( "236A" );
		mtmp.SetSpSkill( def_CN_Skill_236A );
		mtmp.Set( 0, 0,  2, 0,  _eComMoveFlag_MoveEnd );
		
		// 
		mtmp = stmp.PlusMove(); // 動き追加
		mtmp.SetTag( "236B" );	
		mtmp.SetSpSkill( def_CN_Skill_236B );
		mtmp.Set( 0, 0,  2, 0,  _eComMoveFlag_MoveEnd );

		// 
		mtmp = stmp.PlusMove(); // 動き追加
		mtmp.SetTag( "J236A" );
		mtmp.Set( 9, 0,  16, 0,  0 );
		mtmp = stmp.PlusMove(); // 動き追加	
		mtmp.SetSpSkill( def_CN_Skill_J236A );
		mtmp.Set( 0, 0,  2, 0,  _eComMoveFlag_MoveEnd );

		// 
		mtmp = stmp.PlusMove(); // 動き追加
		mtmp.SetTag( "6DJB" );
		mtmp.SetSpSkill( def_CN_Assault_Std );
		mtmp.Set( 0, 0,  16, 0,  0 );
		mtmp = stmp.PlusMove(); // 動き追加	
		mtmp.Set( 0, _eComButton_B,  2, 0,  _eComMoveFlag_MoveEnd );	
		
		// 
		mtmp = stmp.PlusMove(); // 動き追加
		mtmp.SetTag( "6DJ236A" );
		mtmp.SetSpSkill( def_CN_Assault_Std );
		mtmp.Set( 0, 0,  20, 0,  0 );
		mtmp = stmp.PlusMove(); // 動き追加	
		mtmp.SetSpSkill( def_CN_Skill_J236B );
		mtmp.Set( 0, 0,  2, 0,  _eComMoveFlag_MoveEnd );

		// 
		mtmp = stmp.PlusMove(); // 動き追加
		mtmp.SetTag( "6DBC" );
		mtmp.SetSpSkill( def_CN_Assault_Std );
		mtmp.Set( 0, 0,  50, 0,  0);
		mtmp = stmp.PlusMove(); // 動き追加	
		mtmp.Set( 0, _eComButton_B | _eComButton_C , 35, 0, _eComMoveFlag_DamageNext | _eComMoveFlag_MoveEnd );
		mtmp = stmp.PlusMove(); // 動き追加
		mtmp.SetSpSkill( def_CN_Skill_214B );
		mtmp.Set( 0, 0,  2, 0,  _eComMoveFlag_MoveEnd );	
	}
}

//--------------------------------------------------------------
{	// 対空1
	stmp = com.GetSkill(nowskillnum); nowskillnum++; // 作成
	stmp.SetLotWait( 60 ); // 終了、失敗時のウェイト
	stmp.SetLotFailedAvg( 50 ); // 失敗確率

	stmp.checkfunc = function() // チェック
	{
		local st = BCom.GetStatus();
		
		//	自分の状態チェック	
		if( st.GetELenX() > 40000 ) return 0; // 
		if( st.GetELenY() <= 10 ) return 0; // 
		if( !st.CheckPosState( _PosState_Ground ) ) return 0;	//	地上の場合、発動する
		
		//	敵の状態チェック
		if( st.CheckEState( _eComState_Damage  ) ) return 0;	//	敵がやられ状態の場合、発動しない	
		
		return com_frequency2;
	}

	stmp.updatefunc = function() // 採用時の更新
	{
		local st = BCom.GetStatus();

		if( BCom.GetMoveTag() == "RND_start") // 対空分岐初期値
		{
				local ar = ["0202B","0202C","6C","BC"]; // 分岐先を定義する
				
				local jump = BMvEff.Random_Limit( ar.len() );
				BCom.Move_Jump( ar[jump] );
		}

		return 1;
	}
	
	//	分岐スタート 
	mtmp = stmp.PlusMove(); // 動き追加
	mtmp.SetTag( "RND_start" );
	mtmp.Set( 0, 0,  2, 0,  _eComMoveFlag_MoveEnd );
	{
		//	対空22B
		mtmp = stmp.PlusMove(); // 動き追加
		mtmp.SetSpSkill( def_CN_Skill_0202B );
		mtmp.SetTag( "0202B" );
		mtmp.Set( 0, 0,  30, 0,  _eComMoveFlag_MoveEnd );
		
		//	対空22C
		mtmp = stmp.PlusMove(); // 動き追加
		mtmp.SetTag( "0202C" );
		mtmp.SetSpSkill( def_CN_Skill_0202C );
		mtmp.Set( 0, 0,  30, 0,  _eComMoveFlag_MoveEnd );
		
		//	対空6C
		mtmp = stmp.PlusMove(); // 動き追加
		mtmp.SetTag( "6C" );
		mtmp.Set( 6, _eComButton_C,  35, 0,  _eComMoveFlag_MoveEnd );

		//	対空B+C
		mtmp = stmp.PlusMove(); // 動き追加	対空防御待機10Fディレイ
		mtmp.SetTag( "BC" );
		mtmp.Set( 4, 0,  10, 0, 0 );
		mtmp = stmp.PlusMove(); // 動き追加	対空防御発動
		mtmp.Set( 6, _eComButton_B | _eComButton_C,  6, 0,  _eComMoveFlag_MoveEnd );
	}
}

//--------------------------------------------------------------
{	// 投げぬけ 割り込みテスト
	stmp = com.GetSkill(com_throw_recover_pos); // 作成
	stmp.SetFlags( _eComSkillType_Interrupt ); // どこでも割り込み仕様
	stmp.SetLotWait(60);
	stmp.SetLotFailedAvg(throw_recover_avg); // 抜けすぎはうざいのでこれくらい
	stmp.checkfunc = function() // チェック
	{
		local st = BCom.GetStatus();

		// チェックを徹底的に
		if( st.GetSkill() == com_throw_recover_pos ) return 0; // この行動中でした
		if( st.IsPBound() != 2 ) return 0; // なげられていない

		return com_frequency1;
	}
	stmp.updatefunc = function() // 採用時の更新
	{
		local st = BCom.GetStatus();
		return 1;
	}
	// 瞬間にくるのでちょっとだけ待つ
	mtmp = stmp.PlusMove(); // 動き追加
	mtmp.SetWait( 2, 10 ); // 
	// 
	mtmp = stmp.PlusMove(); // 動き追加
	mtmp.Set( 0, _eComButton_A | _eComButton_D,  2, 0,  0 );
	// 
	mtmp = stmp.PlusMove(); // 動き追加
	mtmp.Set( 0, _eComButton_A | _eComButton_D,  2, 0,  0 );
	// 
	mtmp = stmp.PlusMove(); // 動き追加
	mtmp.Set( 0, _eComButton_A | _eComButton_D,  2, 0,  _eComMoveFlag_MoveEnd );
}

//--------------------------------------------------------------
{	// 飛び道具感知飛び込み
	stmp = com.GetSkill(com_throw_recover_pos+1); // 作成
	stmp.SetFlags( _eComSkillType_Interrupt ); // どこでも割り込み仕様
	stmp.SetLotWait(60);
	stmp.SetLotFailedAvg(20); // 
	stmp.checkfunc = function() // チェック
	{
		local st = BCom.GetStatus();

		// チェックを徹底的に
		if( !st.IsPMoveable() ) return 0; // 
		if( !st.CheckPosState( _PosState_Ground ) ) return 0; // 地上じゃないとだめ
		local tobitime = st.GetTobiTime();
		if( tobitime < 12  ||  st.GetTobiTime() > 30  )
		{
			local jplen = st.GetComJumpLen();
			if( jplen == 0  ||  jplen > 60000  )  return 0; // 
		}

		return com_frequency3;
	}
	stmp.updatefunc = function() // 採用時の更新
	{
		local st = BCom.GetStatus();
		return 1;
	}
	// 
	mtmp = stmp.PlusMove(); // 動き追加
	mtmp.Set( 9, 0,  12, 0,  _eComMoveFlag_MoveEnd );
	// 
}

//--------------------------------------------------------------
{	// 空中てきとう
	stmp = com.GetSkill(nowskillnum); nowskillnum++; // 作成
	stmp.SetLotWait( 0 ); // 終了、失敗時のウェイト
	stmp.SetLotFailedAvg( 30 ); // 失敗確率
	stmp.checkfunc = function() // チェック
	{
		local st = BCom.GetStatus();
		if( !st.IsPMoveable() ) return 0; // 
		if( st.GetELenX() > 40000 ) return 0; // 
		if( !st.CheckPosState( _PosState_Air ) ) return 0; // 

		return com_frequency2;
	}
	stmp.updatefunc = function() // 採用時の更新
	{
		local st = BCom.GetStatus();
		if( BCom.GetMoveTag() == "RND_start") // 空中攻撃初期値
		{
				local ar = ["6D","J5B","J5C","J2C","throw"]; // 分岐先を定義する
				local jump = BMvEff.Random_Limit( ar.len() );
				BCom.Move_Jump( ar[jump] );
		}
		return 1;
	}
	// 
	mtmp = stmp.PlusMove(); // 動き追加
	mtmp.SetTag( "RND_start" );
	mtmp.Set( 0, 0,  2, 0,  _eComMoveFlag_MoveEnd );
	
	// 
	mtmp = stmp.PlusMove(); // 動き追加	アサルト
	mtmp.SetTag( "6D" );
	mtmp.SetSpSkill( def_CN_Assault_Air );
	mtmp.Set( 0, 0,  2, 0,  _eComMoveFlag_MoveEnd );
	
	//
	mtmp = stmp.PlusMove(); // 動き追加	J5B
	mtmp.SetTag( "J5B" );
	mtmp.Set( 0, _eComButton_B,  2, 0,  _eComMoveFlag_MoveEnd );
	
	//
	mtmp = stmp.PlusMove(); // 動き追加	J5C
	mtmp.SetTag( "J5C" );
	mtmp.Set( 0, _eComButton_C,  2, 0,  _eComMoveFlag_MoveEnd );
	
	// 
	mtmp = stmp.PlusMove(); // 動き追加	アサルト→2C
	mtmp.SetTag( "J2C" );
	mtmp.SetSpSkill( def_CN_Assault_Air );
	mtmp.Set( 2, _eComButton_C,  2, 0,  _eComMoveFlag_MoveEnd );
	// 
}

//--------------------------------------------------------------
{	// 割り込み待機
	stmp = com.GetSkill(nowskillnum); nowskillnum++; // 作成
	stmp.SetFlags( _eComSkillType_Interrupt ); // どこでも割り込み仕様
	stmp.SetLotWait( 60 ); // 終了、失敗時のウェイト
	stmp.SetLotFailedAvg( 80 ); // 失敗確率
	stmp.checkfunc = function() // チェック
	{
		local st = BCom.GetStatus();
		if( !st.IsPMoveable() ) return 0; // 
		if( st.GetELenX() > 40000 ) return 0; // 
		if( st.GetELenY() > 30000 ) return 0; // 
		if( !st.CheckPosState( _PosState_Ground ) ) return 0; // 地上じゃないとだめ

		return com_frequency0;
	}
	stmp.updatefunc = function() // 採用時の更新
	{
		local st = BCom.GetStatus();
		return 1;
	}
	// 
	mtmp = stmp.PlusMove(); // 動き追加
	mtmp.Set( 0, 0,  8, 0,  _eComMoveFlag_MoveEnd );
}

//--------------------------------------------------------------
{	// 割り込みリバサ
	stmp = com.GetSkill(nowskillnum); nowskillnum++;						// スキルを番号名で作成
	stmp.SetFlags( _eComSkillType_NoInterrupt | _eComSkillType_Interrupt );	// どこでも割り込み仕様
	stmp.SetLotWait( 120 );											// 終了、失敗時のウェイト
	stmp.SetLotFailedAvg( 90 );										// 失敗確率

	stmp.checkfunc = function() // チェック
	{
		local st = BCom.GetStatus();

		//	自分の状態チェック
		if( 35000 < st.GetELenX() ) return 0; // X軸取得
		if( 10 < st.GetELenY() ) return 0; // Y軸取得
		if( !st.CheckPosState( _PosState_Ground ) ) return 0;	// 地上の場合、発動する
		if( !st.IsPMoveable() ) return 0; // 行動可能の場合、発動する

		//	敵の状態チェック
		if( st.CheckEState( _eComState_MoveAble | _eComState_Bound ) ) return 0; // 
		if( !st.CheckEState( _eComState_Chance ) ) return 0; // 
		
		//	行動比率設定
		return com_frequency1;
	}

	// 採用時の更新
	stmp.updatefunc = function()
	{
		local st = BCom.GetStatus();

		//	条件分岐判定	
		if( BCom.GetMoveTag() == "RND_start" )
		{
			local ar	=	["22B","22C"];				//	分岐先を定義
			local jump	=	BMvEff.Random_Limit( ar.len() );
			BCom.Move_Jump( ar[jump] );
		}

		return 1;
	}

	//	分岐開始
	mtmp = stmp.PlusMove();	// 動き追加
	mtmp.SetTag( "RND_start" );
	mtmp.Set( 0, 0,  2, 0,  _eComMoveFlag_MoveEnd );
	{

		//	22B
		mtmp = stmp.PlusMove(); // 動き追加
		mtmp.SetTag( "22B" );
		mtmp.SetSpSkill( def_CN_Skill_0202B );
		mtmp.Set( 0, 0,  60, 0,  _eComMoveFlag_MoveableEnd | _eComMoveFlag_MoveEnd );

		//	22C
		mtmp = stmp.PlusMove(); // 動き追加
		mtmp.SetTag( "22C" );
		mtmp.SetSpSkill( def_CN_Skill_0202EX );
		mtmp.Set( 0, 0,  60, 0,  _eComMoveFlag_MoveableEnd | _eComMoveFlag_MoveEnd );

	}
}

//--------------------------------------------------------------
{	// 割り込み投げ
	stmp = com.GetSkill(nowskillnum); nowskillnum++; // 作成
	stmp.SetFlags( _eComSkillType_NoInterrupt | _eComSkillType_Interrupt ); // どこでも割り込み仕様
	stmp.SetLotWait( 160 ); // 終了、失敗時のウェイト
	stmp.SetLotFailedAvg( 80 ); // 失敗確率
	stmp.checkfunc = function() // チェック
	{
		local st = BCom.GetStatus();
		if( !st.IsPMoveable() ) return 0; // 
		if( st.GetELenX() > 25000 ) return 0; // 
		if( st.GetELenY() > 10 ) return 0; // 
		if( !st.CheckPosState( _PosState_Ground ) ) return 0; // 地上じゃないとだめ

		if( st.CheckEState( _eComState_Chance ) )
		{
			if( !st.CheckEState( _eComState_MoveAble ) ) return 0; // 
		}


		return com_frequency2;
	}
	stmp.updatefunc = function() // 採用時の更新
	{
		return 1;
	}
	// 
	mtmp = stmp.PlusMove(); // 動き追加
	mtmp.Set( 0, _eComButton_A | _eComButton_D,  20, 0,  _eComMoveFlag_MoveEnd );
}


// 最後にglobal_com_tmpへ渡す
ComBase_GlobalComTmp_Set( com );

print("\n\n>com Loaded<\n")


//コマンドテーブル skillは格ゲーコマンド表記
_dp("\n[Sha_0_cmd.txt]");

/*

t.Atk_StdBandC <- 
{ //-------------------------------
	num = def_CN_AtkBandC, name = "Cmd_Atk_StdBandC", command = "B+C",
	flags = [ "lastdelay" ],
	CmdCheck = { SkillType = "SpecialDouji", ComboLimit = DEF_BS_CL_ATKBANDC },
	UpdateTable = { name = "Mv_Atk_StdBandC", }
}

*/

local t =
{
	MultiJump_F = { CmdCheck = { HeightLimit = def_POS_AirDashLimitHeight, }	},
	MultiJump_N = { CmdCheck = { HeightLimit = def_POS_AirDashLimitHeight, }	},
	MultiJump_B = { CmdCheck = { HeightLimit = def_POS_AirDashLimitHeight, }	},
	MultiJumpCancel_F = { CmdCheck = { HeightLimit = def_POS_AirDashLimitHeight, }	},
	MultiJumpCancel_N = { CmdCheck = { HeightLimit = def_POS_AirDashLimitHeight, }	},
	MultiJumpCancel_B = { CmdCheck = { HeightLimit = def_POS_AirDashLimitHeight, }	},	
	
	Skill_236A = {},
	Skill_236B = {},
	Skill_236C = {},
	Skill_236EX = {},

	Skill_J236A = {},
	Skill_J236B = {},
	Skill_J236C = {},
	Skill_J236EX = {},

	Skill_214A = {},
	Skill_214B = {},
	Skill_214C = {},
	Skill_214EX = {},
	
	Skill_J214A = {},
	Skill_J214B = {},
	Skill_J214C = {},
	Skill_J214EX = {},	
	
	Skill_0202A = {},	
	Skill_0202B = {},	
	Skill_0202C = {},	
	Skill_0202EX = {},	
	
	Skill_Sousai = 
	{
		Check = function()
		{
			// B+CだしたあとB+Cを離すまでフラグがたっているのでそれで弾く
			if( BMvTbl.GetPP(def_PP_Aka_Status)&def_PPFlag_Aka_KouseiHold)
			{
				return 0;
			}
			
			local checktbl1 =
			{
				SkillType = "NoneDouji",
				ComboLimit = DEF_BS_CL_ATKAANDB,
				MvCheck={ Fail="Mv_Skill_Sousai"},
				flags=Def_CmdCh_GenDoujiCheck|Def_CmdCh_KeepDoujiCheck,
				CommandButton = def_PP_CBS_ButtonA|def_PP_CBS_ButtonB,
			};
			
			if( Battle_Std.CmdCheck( checktbl1 ) == 1 ) // 最初の成功
			{
				BMvTbl.SetPP(def_PP_Aka_StdBandCType,0); //初回なのでリセット
				return 1; //成功で抜ける
			}

			//追加B+Cのチェック
			if( BMvTbl.GetPP(def_PP_Aka_KouseiSuccess) == 0 ) return 0; //こうせい成功中じゃないと失敗
			
			local kousei_sc_frame = BMvTbl.GetLP(6);
			//_dp("\n ★ kousei_sc_frame:"+kousei_sc_frame );
			if( kousei_sc_frame <= 5 ) return 0; // 最初の方は失敗(同時押しズラし押しで再度暴発する、飛び道具とってすぐ動けるのでこれも暴発する)


			
			local checktbl2 =
			{
				SkillType = "AddCommand"
				CommandButton = def_PP_CBS_ButtonA|def_PP_CBS_ButtonB,
				MvCheck = { Only = ["Mv_Skill_Sousai","Mv_Skill_Sousai2"] },
			};
			
			if( Battle_Std.CmdCheck( checktbl2 ) == 1 ) // 追加コマンドの成功
			{
				//Battle_Std.DrawDebugAttackInfo("checktbl 2 good");
				return 1; //成功で抜ける
			}
			else
			{
				//Battle_Std.DrawDebugAttackInfo("checktbl 2 bad");
			}
			
			return 0; //ここまでくると失敗
		}
	},
	
	Skill_Sousai2 = 	
	{
		Check = function()
		{
			// B+CだしたあとB+Cを離すまでフラグがたっているのでそれで弾く
			if( BMvTbl.GetPP(def_PP_Aka_Status)&def_PPFlag_Aka_KouseiHold)
			{
				return 0;
			}
			
			local checktbl1 =
			{
				SkillType = "NoneDouji",
				ComboLimit = DEF_BS_CL_ATKAANDB,
				MvCheck={ Fail="Mv_Skill_Sousai"},
				flags=Def_CmdCh_GenDoujiCheck|Def_CmdCh_KeepDoujiCheck,
				CommandButton = def_PP_CBS_ButtonA|def_PP_CBS_ButtonB,
			};
			
			if( Battle_Std.CmdCheck( checktbl1 ) == 1 ) // 最初の成功
			{
				BMvTbl.SetPP(def_PP_Aka_StdBandCType,0); //初回なのでリセット
				return 1; //成功で抜ける
			}

			//追加B+Cのチェック
			if( BMvTbl.GetPP(def_PP_Aka_KouseiSuccess) == 0 ) return 0; //こうせい成功中じゃないと失敗
			
			local kousei_sc_frame = BMvTbl.GetLP(6);
			//_dp("\n ★ kousei_sc_frame:"+kousei_sc_frame );
			if( kousei_sc_frame <= 5 ) return 0; // 最初の方は失敗(同時押しズラし押しで再度暴発する、飛び道具とってすぐ動けるのでこれも暴発する)


			
			local checktbl2 =
			{
				SkillType = "AddCommand"
				CommandButton = def_PP_CBS_ButtonA|def_PP_CBS_ButtonB,
				MvCheck = { Only = ["Mv_Skill_Sousai","Mv_Skill_Sousai2"] },
			};
			
			if( Battle_Std.CmdCheck( checktbl2 ) == 1 ) // 追加コマンドの成功
			{
				//Battle_Std.DrawDebugAttackInfo("checktbl 2 good");
				return 1; //成功で抜ける
			}
			else
			{
				//Battle_Std.DrawDebugAttackInfo("checktbl 2 bad");
			}
			
			return 0; //ここまでくると失敗
		}
	},
	
	Skill_Sousai4 = {},
	Skill_Sousai4_JAdd = {},
	
	Skill_JSousai =
	{ //-------------------------------
		num = def_CN_AtkCAandB, name = "Cmd_Skill_Sousai", command = "A+B",
		flags = [ "lastdelay" ], //1F増加
		CmdBeforeStdFunc = function()
		{
			if( Battle_Std.CancelCheck_SpecialSkill()==0 ) return 0;
			return 1;
		},
		
		Check = function()
		{
			// B+CだしたあとB+Cを離すまでフラグがたっているのでそれで弾く
			if( BMvTbl.GetPP(def_PP_Aka_Status)&def_PPFlag_Aka_KouseiHold)
			{
				return 0;
			}
			
			local checktbl1 =
			{
				SkillType = "NoneDouji",
				ComboLimit = DEF_BS_CL_ATKAANDB,
				MvCheck={ Fail="Mv_Skill_Sousai"},
				flags=Def_CmdCh_GenDoujiCheck|Def_CmdCh_KeepDoujiCheck,
				CommandButton = def_PP_CBS_ButtonA|def_PP_CBS_ButtonB,
				PosState = "Air",
			};
			
			if( Battle_Std.CmdCheck( checktbl1 ) == 1 ) // 最初の成功
			{
				BMvTbl.SetPP(def_PP_Aka_StdBandCType,0); //初回なのでリセット
				return 1; //成功で抜ける
			}

			//追加B+Cのチェック
			if( BMvTbl.GetPP(def_PP_Aka_KouseiSuccess) == 0 ) return 0; //こうせい成功中じゃないと失敗
			
			local kousei_sc_frame = BMvTbl.GetLP(6);
			//_dp("\n ★ kousei_sc_frame:"+kousei_sc_frame );
			if( kousei_sc_frame <= 5 ) return 0; // 最初の方は失敗(同時押しズラし押しで再度暴発する、飛び道具とってすぐ動けるのでこれも暴発する)


			
			local checktbl2 =
			{
				SkillType = "AddCommand"
				CommandButton = def_PP_CBS_ButtonA|def_PP_CBS_ButtonB,
				MvCheck = { Only = ["Mv_Skill_Sousai","Mv_Skill_Sousai2","Mv_Skill_JSousai"] },
				PosState = "Air",
			};
			
			if( Battle_Std.CmdCheck( checktbl2 ) == 1 ) // 追加コマンドの成功
			{
				//Battle_Std.DrawDebugAttackInfo("checktbl 2 good");
				return 1; //成功で抜ける
			}
			else
			{
				//Battle_Std.DrawDebugAttackInfo("checktbl 2 bad");
			}
			
			return 0; //ここまでくると失敗
		}

	
		CmdCheck = { SkillType="NoneDouji", MvCheck={ SkillFail="Mv_Skill_JSousai", },  PosState = "Air",
		CommandButton = def_PP_CBS_ButtonA|def_PP_CBS_ButtonB,
		flags=Def_CmdCh_GenDoujiCheck|Def_CmdCh_KeepDoujiCheck },
		UpdateTable = { name = "Mv_Skill_JSousai", }
	}
	
	Skill_Kirifuda = {},	
	
	Skill_41236SP = {},
	Skill_63214SP = {},

	
	Atk_Std6C = { num = def_CN_Atk_StdC-1 },
	
	Std_Throw_F = { command = ["4+C"] },
	
	//Atk_Air4B = {},
	
	Atk_Std6B = {},
	Atk_Air2C = {},
	
	Atk_A_A = {},
	
	Skill_StdA_A = 
	{
		num = def_CN_Atk_AddCommand2,
		command = ["0+A","4+A","6+A","^+A"],
		function CmdBeforeFunc()
		{
			local s = BMvTbl.GetMvStatus();
			if( s.FrameID != 110 && s.FrameID != 210 ) return 0;
			return 1;
		},
		CmdCheck = 
		{
			SkillType = "AddCommand", MvCheck = { Only = ["Mv_Atk_StdA"] },
		},		
		UpdateTable = { name = "Mv_Atk_StdA", }
	},
	
	Skill_CroA_A = 
	{
		num = def_CN_Atk_AddCommand1,
		command = ["v+A"],
		function CmdBeforeFunc()
		{
			local s = BMvTbl.GetMvStatus();
			if( s.FrameID != 110 && s.FrameID != 210 ) return 0;
			return 1;
		},
		CmdCheck = 
		{
			SkillType = "AddCommand", MvCheck = { Only = ["Mv_Atk_CroA"] },
		},
		UpdateTable = { name = "Mv_Atk_CroA", }
	},
	
	Atk_B_B =
	{
		function CmdBeforeFunc()
		{
			if( BMvTbl.GetPP(def_PP_Aka_Near_StdB) == 0 ) return 0;
			return 1;
		},	
	},
}

local ar =
[
	{
		CheckMoveName="Mv_Atk_StdA",
		UpdateMoveName="Mv_Atk_A_A",
	},
	{
		CheckMoveName="Mv_Atk_A_A",
		UpdateMoveName="Mv_Atk_StdB",
	},
	{
		CheckMoveName="Mv_Atk_StdB",
		UpdateMoveName="Mv_Atk_StdC",
		ResetTmplName="Std_Atk_StdB"
	},
	{
		CheckMoveName="Mv_Atk_StdC",
		UpdateMoveName="Mv_Skill_Sousai",
		ResetTmplName="Std_Atk_StdC",
		CmdTmplFlags=def_CMDFlags_AnnounceSmaetSteer, //スマートステアアナウンスの追加
	},
	{
		CheckMoveName="Mv_Skill_Sousai",
		UpdateMoveName="Mv_Skill_214EX",
		ResetTmplName="Skill_Sousai",
		CmdCheck = 
		{
			SkillType = "ExSpecial",
			HitStatus="Damage",
			Cost = { ComboGauge = 10000 },
			FrameIDCheck = { Only = [300,400] },
		}
	},
]
Battle_Std.MakeStdCombo( t, ar, 0 );

local ar =
[
	{
		CheckMoveName="Mv_Atk_CroA",
		UpdateMoveName="Mv_Atk_CroB",
		ResetTmplName="Atk_CroA",
	},
	{
		CheckMoveName="Mv_Atk_CroB",
		UpdateMoveName="Mv_Atk_StdC",
		ResetTmplName="Std_Atk_CroB"
	},	
	{
		CheckMoveName="Mv_Atk_StdC",
		UpdateMoveName="Mv_Skill_Sousai",
		ResetTmplName="Std_Atk_StdC",
		CmdTmplFlags=def_CMDFlags_AnnounceSmaetSteerCro, //スマートステアアナウンスの追加
	},
	{
		CheckMoveName="Mv_Skill_Sousai",
		UpdateMoveName="Mv_Skill_214EX",
		ResetTmplName="Skill_Sousai",
		CmdCheck = 
		{
			SkillType = "ExSpecial",
			HitStatus="Damage",
			Cost = { ComboGauge = 10000 },
			FrameIDCheck = { Only = [300,400] },
		}
	},	
]
Battle_Std.MakeStdCombo( t, ar, 1 );

local ar =
[
	{
		CheckMoveName="Mv_Atk_AirA",
		UpdateMoveName="Mv_Atk_AirB",
		ResetTmplName="Atk_AirA",
	},
	{
		CheckMoveName="Mv_Atk_AirB",
		UpdateMoveName="Mv_Atk_AirC",
		ResetTmplName="Std_Atk_AirB",
		CmdTmplFlags=def_CMDFlags_AnnounceSmaetSteerAir, //スマートステアアナウンスの追加
	},	
]
Battle_Std.MakeStdCombo( t, ar, 2 );

//local ar = ["Mv_Atk_StdB","Mv_Atk_Std3C","Mv_Skill_214A","Mv_Skill_214EX"]

AKA_CommandTable <- Battle_Std.MakeCommandTable( t );


Battle_Std.WriteCommandList( { filename="CL00_Shana.txt", cmdtmpl=t } );

_dp(" -> Load OK");

//__dofile__( "./data/_combase.txt" );

local nowskillnum = 0;

//-------------------------------------------------------------
// com動作生成

local comcount = 200; // 最大数 できるだけギリギリに
local com = CCom(comcount); // COM用オブジェクト

com.SetGuardAvg( 40 ); // ガード確率


local stmp = 0;
local mtmp = 0;

//--------------------------------------------------------------
{	// ０は待機
	stmp = com.GetSkill(0); // 作成
	stmp.checkfunc = function() // チェック
	{
		return com_frequency3;
	}
	stmp.updatefunc = function() // 採用時の更新
	{
		return 1;
	}
	// 0-0
	mtmp = stmp.PlusMove(); // 動き追加
	mtmp.Set( 0, 0,  10, 50,  _eComMoveFlag_StickHold | _eComMoveFlag_MoveEnd );
}

// 共通アクション定義
AddBasicMove( com, {
	SPSkill_XlenType = 1, // ３ゲージの発動間合いタイプ 0:ド密着 1:密着〜中距離 2:どこでも
	AVG_ThrowRecover = 70, // 投げ抜け失敗確率
	
	UNI_Combo = { recipe = ["B","2C","C","GuardEnd","9","A","B","C"] }, // ＵＮＩ汎用空コン
	Assault_GedanA = "2A",
	Assault_TyudanC = "C",
	
	AirTuigeki_Combo = { recipe = ["9","A","B","C"] }, // 空中追撃コン
	Hiroi_Combo = { recipe = [ "C","GuardEnd","22B" ] }, // 拾いコン
	Assault_Combo = { recipe = ["6D","*C",{wait=30},"2A","B","2B","C","2C","GuardEnd","6C","214B",{wait=90},{dash=30} ] }, // アサルトコン
	Sasikomi_Atk = [ // 差し込み技
	{ recipe=["6C",{meosi=60,},{dash=4},"C","GuardEnd","214A",{dl=26},"B",["9jc",14],{dl=4},"A",{dl=10},"B",{wait=60},"B","6C","22B" ] },
	{ recipe=["236B"] },
	{ recipe=["214B"] },
	{ recipe=["214A"] },
	{ recipe=["66C","236A"] },
	{ recipe=["66C","214A"] },
	],
	Follow_Combo = [ // ガードされた時のフォロー連携 0:通常 2:必殺 3:ＥＸ
	{ type=0, recipe=[ "A",{irekomi=4},"2A"] },
	{ type=0, recipe=[ "A",{irekomi=4},"2A"] },
	{ type=0, recipe=[ "6B",{meosi=60,},"B","GuardEnd","6C","214A",{dl=26},"B",["9jc",14],"A","B","C",{wait=60},{dash=20} ] },
	{ type=1, recipe=[ "236A" ] },
	{ type=1, recipe=[ "236B" ] },
	{ type=1, recipe=[ "214A" ] },
	{ type=1, recipe=[ "214A" ] },
	{ type=1, recipe=[ "214B" ] },
	{ type=1, recipe=[ "214B",{rapid=2},"J236EX" ] },
	{ type=2, recipe=[ "236EX" ] },
	],		
	
	// コンボ登録
	Pro_Combos = [
	{ // コンボ
	xlen = 30000, // 発動距離
	hazi_NearNG = 200000, // 端近すぎるとダメな距離
	list = [
		{ recipe=[ "*2A","B","C","GuardEnd","6C",{meosi=60},{dash=4},"2C"], fintag="Fin_6C" },
		{ recipe=[ "*2A","B","C","GuardEnd","6C",{meosi=60},{dash=6},"B","9","B","J214B"] },
		]
	},	
	
	{ // コンボ
	xlen = 30000, // 発動距離
	hazi_xlen = 100000, // 端までの距離
	list = [
		{ recipe=[ "*2A","B","C","GuardEnd","6C",{meosi=60},{dash=6},"B","8",{dl=2},"C","2C",{wait=60},"2C"], fintag="Fin_6C" },
		]
	},	
	
	{ // コンボ
	xlen = 30000, // 発動距離
	// hazi_NearNG = 100000, // 端近すぎるとダメな距離
	list = [
		{ recipe=[ "*2B","B","C","GuardEnd","6C",{meosi=60},{dash=6},"B","9","A","B","C",{wait=60},{dash=20} ] },
		{ recipe=[ "*2B","B","2C","GuardEnd","6C","214A",{dl=26},"A",["9jc",12],"A","B","C",{wait=60},{dash=20} ] },
		]
	},

	{ // コンボ
	xlen = 30000, // 発動距離
	gauge = [100,0], // 
	list = [
		{ recipe=[ "*2B","B","C","GuardEnd","6C",{meosi=60},"IW" ] },
		]
	},
	
	{ // コンボ
	xlen = 50000, // 発動距離
	hazi_xlen = 75000, // 端までの距離
	list = [
		{ recipe=[ "*B","2B","C","GuardEnd","6C",{meosi=60},{dash=6},"C","8",{dl=5},"B","C",{dl=15},"2C",{wait=60},"2C"], fintag="Fin_6C" },
		]
	},

	], // Pro_Combos
	
	// コンボ登録
	Pro_Finishs = [
	
	{ // コンボ
		fintag = "Fin_6C",
		list =
		[
			{ recipe=[ "6C","214B" ] },
			{ recipe=[ "6C","22B" ] },
		]
	},
	{ // コンボ
		fintag = "Fin_6C",
		gauge = [100,0], // ノーゲージ
		list =
		[
			{ recipe=[ "6C","236B",{irekomi=20},"IW" ] },
		]
	},
	
	], // Pro_Finishs		
	
	Pro_Control = [
	
	{ // ----
	x_range = [0,80000], // 発動距離
	list = [
		{ recipe=[ {key="9"},{dl=20},"2C","GuardEnd",{wait=60,},"C","GuardEnd",{dl=10},"6C",{dl=5},"214A",{dl=26},"B",["9jc",14],{dl=4},"A",{dl=11},"B",{wait=60},"A"], fintag="Fin_6C" },
		]
	},
	
	{ // ----
	x_range = [40000,70000], // 発動距離
	list = [
		{ recipe=[ {key="9"},{dl=20},"6C","GuardEnd",{wait=60,},"B","C","GuardEnd",{dl=10},"6C",{meosi=60},{dash=4},"2C"], fintag="Fin_6C" },
		]
	},
	
	{ // ----
	x_range = [40000,80000], // 発動距離
	// gauge = [50,0], // 必要ゲージ
	list = [
		{ recipe=[ "66C","(236A)","66C" ] },
		{ recipe=[ "66C","(214A)","A" ] },
		{ recipe=[ "66C","(214A)",{dash=10},"A+D" ] },
		]
	},
	
	] // Pro_Control
} );


//--------------------------------------------------------------
{	// スマートステア5A
	stmp = com.GetSkill(45); // 作成
	stmp.SetLotWait( 300 ); // 終了、失敗時のウェイト
	stmp.SetLotFailedAvg( 50 ); // 失敗確率

	stmp.checkfunc = function() // チェック
	{
		local st = BCom.GetStatus();
		if( !st.IsPMoveable() ) return 0;					// 行動可能じゃないと発動しない
		if( 50000 < st.GetELenX() ) return 0;				// 遠いときは発動しない
		if( !st.CheckPosState( _PosState_Ground ) ) return 0;	// 地上じゃないとだめ
		if( st.GetELenY() != 0 ) return 0; // 相手も地上を要求

		return com_frequency1;
	}

	stmp.updatefunc = function() // 採用時の更新
	{
		local st = BCom.GetStatus();
		
		if( BCom.GetMoveTag() == "RND_start" ) //	分岐条件判定 
		{
			local ar = ["END1","J236C"]; // 分岐先を定義する
			local jump = BMvEff.Random_Limit( ar.len() );
			BCom.Move_Jump( ar[jump] );
		}	

		return 1;
	}


	// ダッシュ入力
	mtmp = stmp.PlusMove();	// 動き追加	ダッシュ入力1
	mtmp.Set( 6, 0,  1, 0,  0 );
	mtmp = stmp.PlusMove();	// 動き追加	ダッシュ入力ニュートラル
	mtmp.Set( 0, 0,  1, 0,  0 );
	mtmp = stmp.PlusMove();	// 動き追加	ダッシュ入力2
	mtmp.Set( 6, 0,  1, 9,  _eComMoveFlag_StickHold );

	// 0:立ちA
	mtmp = stmp.PlusMove(); // 動き追加
	mtmp.Set( 0, _eComButton_A,  60, 0,  _eComMoveFlag_HitNext | _eComMoveFlag_MoveEnd );

	// 1:立ちA２回目
	mtmp = stmp.PlusMove(); // 動き追加
	mtmp.Set( 0, _eComButton_A,  60, 0,  _eComMoveFlag_HitNext | _eComMoveFlag_MoveEnd );

	// 2:立ちB
	mtmp = stmp.PlusMove(); // 動き追加
	mtmp.Set( 0, _eComButton_A,  60, 0,  _eComMoveFlag_HitNext | _eComMoveFlag_MoveEnd );

	// 3:立ちC
	mtmp = stmp.PlusMove(); // 動き追加
	mtmp.Set( 0, _eComButton_A,  50, 0,  _eComMoveFlag_HitNext | _eComMoveFlag_MoveEnd );

	// 4:屈Ｃ
	mtmp = stmp.PlusMove(); // 動き追加
	mtmp.Set( 0, _eComButton_A,  50, 0,  _eComMoveFlag_HitNext | _eComMoveFlag_MoveEnd );

	// 5:６Ｃ
	mtmp = stmp.PlusMove(); // 動き追加
	mtmp.Set( 0, _eComButton_A,  50, 0,  _eComMoveFlag_HitNext | _eComMoveFlag_MoveEnd );

	// 6:214Ｂ（１）
	mtmp = stmp.PlusMove(); // 動き追加
	mtmp.Set( 0, _eComButton_A,  50, 0,  _eComMoveFlag_HitNext | _eComMoveFlag_MoveEnd );

	// 7:214Ｂ（３段目あたるまで待機）
	mtmp = stmp.PlusMove(); // 動き追加
	mtmp.Set( 0, 0,  45, 0,  0 );

	//	分岐開始
	mtmp = stmp.PlusMove();	// 動き追加
	mtmp.SetTag( "RND_start" );
	mtmp.Set( 0, 0,  2, 0,  _eComMoveFlag_MoveEnd );
	{

		//	END1 (何もしない 確率の水増し)
		mtmp = stmp.PlusMove(); // 動き追加
		mtmp.SetTag( "END1" );	
		mtmp.Set( 0, 0,  25, 0,  _eComMoveFlag_MoveEnd );
		
		// 8:Ｊ236ＥＸ
		mtmp = stmp.PlusMove(); // 動き追加
		mtmp.SetTag( "J236C" );	
		mtmp.Set( 0, _eComButton_A,  65, 0,  _eComMoveFlag_MoveEnd );
	}
}


// ここからnowskillnumで定義開始
nowskillnum = 80;

//--------------------------------------------------------------
{	// 様子見セット:中遠距離：飛び道具
	stmp = com.GetSkill(nowskillnum); nowskillnum++;	// スキルを番号名で作成
	stmp.SetLotWait( 0 );							// 終了、失敗時のウェイト
	stmp.SetLotFailedAvg( 0 );						// 失敗確率

	stmp.checkfunc = function() // チェック
	{
		local st = BCom.GetStatus();
		if( st.GetELenX() < 60000 ) return 0;		//	X軸取得
		if( !st.IsPMoveable() ) return 0;			//	行動可能の場合、発動する

		return com_frequency1;
	}

	stmp.updatefunc = function() // 採用時の更新
	{
		local st = BCom.GetStatus();
		
		if( BCom.GetMoveTag() == "RND_start" ) //	分岐条件判定
		{
			local ar = ["236A","236B","9J236A","9J236B","8J236A","8J236B"]; // 分岐先を定義する
			local jump = BMvEff.Random_Limit( ar.len() );
			BCom.Move_Jump( ar[jump] );
		}
		
		return 1;
	}

	//	行動設定
	//	分岐開始
	mtmp = stmp.PlusMove();	// 動き追加
	mtmp.SetTag( "RND_start" );
	mtmp.Set( 0, 0,  2, 0,  _eComMoveFlag_MoveEnd );
	{
		// 236A
		mtmp = stmp.PlusMove();	// 動き追加
		mtmp.SetTag( "236A" );
		mtmp.SetSpSkill( def_CN_Skill_236A );
		mtmp.Set( 0, 0,  49, 0,  _eComMoveFlag_MoveableEnd | _eComMoveFlag_MoveEnd );

		// 236B
		mtmp = stmp.PlusMove();	// 動き追加
		mtmp.SetTag( "236B" );
		mtmp.SetSpSkill( def_CN_Skill_236B );
		mtmp.Set( 0, 0,  49, 0,  _eComMoveFlag_MoveableEnd | _eComMoveFlag_MoveEnd );	

		// 前ジャンプ236A
		mtmp = stmp.PlusMove();	// 動き追加
		mtmp.SetTag( "9J236A" );
		mtmp.Set( 9, 0,  18, 0,  0 );
		mtmp = stmp.PlusMove();	// 動き追加
		mtmp.SetSpSkill( def_CN_Skill_J236A );
		mtmp.Set( 0, 0,  60, 0,  _eComMoveFlag_MoveEnd );	
		
		// 前ジャンプ236B
		mtmp = stmp.PlusMove();	// 動き追加
		mtmp.SetTag( "9J236B" );
		mtmp.Set( 9, 0,  17, 0,  0 );
		mtmp = stmp.PlusMove();	// 動き追加
		mtmp.SetSpSkill( def_CN_Skill_J236B );
		mtmp.Set( 0, 0,  60, 0,  _eComMoveFlag_MoveEnd );	
		
		// 垂直ジャンプ236A
		mtmp = stmp.PlusMove();	// 動き追加
		mtmp.SetTag( "8J236A" );
		mtmp.Set( 8, 0,  18, 0,  0 );
		mtmp = stmp.PlusMove();	// 動き追加
		mtmp.SetSpSkill( def_CN_Skill_J236A );
		mtmp.Set( 0, 0,  60, 0,  _eComMoveFlag_MoveEnd );	
		
		// 垂直ジャンプ236B
		mtmp = stmp.PlusMove();	// 動き追加
		mtmp.SetTag( "8J236B" );
		mtmp.Set( 8, 0,  15, 0,  0 );
		mtmp = stmp.PlusMove();	// 動き追加
		mtmp.SetSpSkill( def_CN_Skill_J236B );
		mtmp.Set( 0, 0,  60, 0,  _eComMoveFlag_MoveEnd );	
		
	}
}

//--------------------------------------------------------------
{	// のけぞり中のコンボ1 （地上ダウン中の相手・ジャンプ攻撃HIT後に攻撃）

	stmp = com.GetSkill(nowskillnum); nowskillnum++;	// スキルを番号名で作成
	stmp.SetLotWait( 60 );							// 終了、失敗時のウェイト
	stmp.SetLotFailedAvg( 0 );						// 失敗確率

	// チェック
	stmp.checkfunc = function()
	{
		local st = BCom.GetStatus();
		
		//	自分の状態チェック	
		if( 35000 < st.GetELenX() )	return 0;			//	X軸取得
		if( !0 == st.GetELenY() )		return 0;			//	Y軸取得
		if( !st.CheckPosState( _PosState_Ground ) ) return 0;	//	地上の場合、発動する
		if( !st.IsPMoveable() ) return 0;					//	行動可能の場合、発動する

		//	敵の状態チェック
		if( !st.CheckEState( _eComState_Damage  ) ) return 0;	// 敵がやられ状態の場合、発動する
		
		return com_frequency2;
	}

	// 採用時の更新
	stmp.updatefunc = function()
	{
		local st = BCom.GetStatus();

		//	条件分岐判定	
		if( BCom.GetMoveTag() == "RND_start" )
		{
			local ar	=	["END1","5B","5C","6C","214B","22A"];	//	分岐先を定義
			local jump	=	BMvEff.Random_Limit( ar.len() );
			BCom.Move_Jump( ar[jump] );
		}

		return 1;
	}

	//	2B
	mtmp = stmp.PlusMove();	// 動き追加
	mtmp.Set( 2, _eComButton_B,  20, 0, _eComMoveFlag_DamageNext | _eComMoveFlag_MoveEnd );

	//	分岐開始
	mtmp = stmp.PlusMove();	// 動き追加
	mtmp.SetTag( "RND_start" );
	mtmp.Set( 0, 0,  2, 0,  _eComMoveFlag_MoveEnd );
	{

		//	END1 (何もしない 確率の水増し)
		mtmp = stmp.PlusMove(); // 動き追加
		mtmp.SetTag( "END1" );	
		mtmp.Set( 0, 0,  22, 0,  _eComMoveFlag_MoveEnd );

		//	5B
		mtmp = stmp.PlusMove();	// 動き追加
		mtmp.SetTag( "5B" );
		mtmp.Set( 0, _eComButton_B,  35, 0, _eComMoveFlag_DamageEnd | _eComMoveFlag_MoveEnd );
		
		
		//	5C
		mtmp = stmp.PlusMove();	// 動き追加
		mtmp.SetTag( "5C" );
		mtmp.Set( 0, _eComButton_C,  35, 0, _eComMoveFlag_DamageEnd | _eComMoveFlag_MoveEnd );

		//	6C
		mtmp = stmp.PlusMove();	// 動き追加
		mtmp.SetTag( "6C" );
		mtmp.Set( 6, _eComButton_C,  60, 0, _eComMoveFlag_DamageEnd | _eComMoveFlag_MoveEnd );
		
		//	214B
		mtmp = stmp.PlusMove();	// 動き追加
		mtmp.SetTag( "214B" );
		mtmp.SetSpSkill( def_CN_Skill_214B );
		mtmp.Set( 0, 0,  120, 0, _eComMoveFlag_MoveableEnd | _eComMoveFlag_MoveEnd );

		//	214B
		mtmp = stmp.PlusMove();	// 動き追加
		mtmp.SetTag( "22A" );
		mtmp.SetSpSkill( def_CN_Skill_0202A );
		mtmp.Set( 0, 0,  120, 0, _eComMoveFlag_MoveableEnd | _eComMoveFlag_MoveEnd );

	}
}

//--------------------------------------------------------------
{	// 近距離必殺技
	stmp = com.GetSkill(nowskillnum); nowskillnum++;	// スキルを番号名で作成
	stmp.SetLotWait( 60 );							// 終了、失敗時のウェイト
	stmp.SetLotFailedAvg( 0 );						// 失敗確率

	stmp.checkfunc = function() // チェック
	{
		local st = BCom.GetStatus();
		if( 40000 < st.GetELenX() ) return 0; // 
		if( !st.CheckPosState( _PosState_Ground ) ) return 0; // 地上じゃないとだめ

		return com_frequency1;
	}

	stmp.updatefunc = function() // 採用時の更新
	{
		local st = BCom.GetStatus();
		
		if( BCom.GetMoveTag() == "RND_start" ) //	分岐条件判定 
		{
			local ar = ["214A","214B","22B"]; // 分岐先を定義する
			local jump = BMvEff.Random_Limit( ar.len() );
			BCom.Move_Jump( ar[jump] );
		}
		return 1;
	}

	//	分岐開始
	mtmp = stmp.PlusMove();	// 動き追加
	mtmp.SetTag( "RND_start" );
	mtmp.Set( 0, 0,  2, 0,  _eComMoveFlag_MoveEnd );
	{

		//	214A
		mtmp = stmp.PlusMove();	// 動き追加
		mtmp.SetTag( "214A" );
		mtmp.SetSpSkill( def_CN_Skill_214A );
		mtmp.Set( 0, 0,  60, 0, _eComMoveFlag_MoveableEnd | _eComMoveFlag_MoveEnd );


		//	214B
		mtmp = stmp.PlusMove();	// 動き追加
		mtmp.SetTag( "214B" );
		mtmp.SetSpSkill( def_CN_Skill_214B );
		mtmp.Set( 0, 0,  60, 0, _eComMoveFlag_MoveableEnd | _eComMoveFlag_MoveEnd );

		//	22B
		mtmp = stmp.PlusMove();	// 動き追加
		mtmp.SetTag( "22B" );
		mtmp.SetSpSkill( def_CN_Skill_0202B );
		mtmp.Set( 0, 0,  60, 0, _eComMoveFlag_MoveableEnd | _eComMoveFlag_MoveEnd );
	}
}


//--------------------------------------------------------------
{	// ジャンプからのコンボ1
	stmp = com.GetSkill(nowskillnum); nowskillnum++; // 作成
	stmp.SetLotWait( 60 ); // 終了、失敗時のウェイト
	stmp.SetLotFailedAvg( 0 ); // 失敗確率

	stmp.checkfunc = function() // チェック
	{
		local st = BCom.GetStatus();
		if( !( 40000 < st.GetELenX() && st.GetELenX() < 72000 ) ) return 0; // 
		if( !st.CheckPosState( _PosState_Ground ) ) return 0; // 地上じゃないとだめ
		if( !st.IsPMoveable() ) return 0; // 行動可能じゃないと発動しない
		
		return com_frequency2;
	}

	stmp.updatefunc = function() // 採用時の更新
	{
		local st = BCom.GetStatus();
		
		if( BCom.GetMoveTag() == "RND_start" ) //密着コンボ開始 
		{
			local ar = ["6C","236A","214A"]; // 分岐先を定義する

			local jump = BMvEff.Random_Limit( ar.len() );
			BCom.Move_Jump( ar[jump] );
		}
		return 1;
	}

	//	行動設定
	//	9入力
	mtmp = stmp.PlusMove();	// 動き追加
	mtmp.SetTag( "9" );
	mtmp.Set( 9, 0, 19, 5, 0 );

	//	JC攻撃
	mtmp = stmp.PlusMove();	// 動き追加
	mtmp.SetTag( "jc" );
	mtmp.Set( 0, _eComButton_C,  60, 0,   _eComMoveFlag_HitNext | _eComMoveFlag_MoveEnd );

	//	HITしたら着地待ち
	mtmp = stmp.PlusMove();	// 動き追加
	mtmp.SetTag( "landwait" );
	mtmp.Set( 2, 0,  90, 0, _eComMoveFlag_GroundNext | _eComMoveFlag_MoveEnd );

	//	5C
	mtmp = stmp.PlusMove();	// 動き追加
	mtmp.SetTag( "5c" );
	mtmp.Set( 0, _eComButton_C,  60, 60,   _eComMoveFlag_HitNext | _eComMoveFlag_MoveEnd );


	//	分岐開始
	mtmp = stmp.PlusMove();	// 動き追加
	mtmp.SetTag( "RND_start" );
	mtmp.Set( 0, 0,  2, 0,  _eComMoveFlag_MoveEnd );
	{
		//	6C	浮かせ
		mtmp = stmp.PlusMove();	// 動き追加
		mtmp.SetTag( "6C" );
		mtmp.Set( 6, _eComButton_C,  40, 0,  _eComMoveFlag_MoveEnd );

		//	236A	飛び道具
		mtmp = stmp.PlusMove();	// 動き追加
		mtmp.SetTag( "236A" );
		mtmp.SetSpSkill( def_CN_Skill_236A );
		mtmp.Set( 0, 0,  40, 0,  _eComMoveFlag_MoveEnd );

		//	214A	牽制 その後に攻勢防御
		mtmp = stmp.PlusMove();	// 動き追加
		mtmp.SetTag( "214A" );
		mtmp.SetSpSkill( def_CN_Skill_214A );
		mtmp.Set( 0, 0,  4, 0,  0 );

		mtmp = stmp.PlusMove();	// 動き追加
		mtmp.Set( 2, 0,  50, 0,  0 );

		mtmp = stmp.PlusMove();	// 動き追加
		mtmp.Set( 2, _eComButton_B | _eComButton_C ,  60, 0,  _eComMoveFlag_MoveEnd );
	}
}
	
//--------------------------------------------------------------
{	// エリアル1	(アドリブ)
	stmp = com.GetSkill(nowskillnum); nowskillnum++; // 作成
	stmp.SetLotWait( 60 ); // 終了、失敗時のウェイト
	stmp.SetLotFailedAvg( 0 ); // 失敗確率

	stmp.checkfunc = function() // チェック
	{
		local st = BCom.GetStatus();
		
		// 自分の状態
		if( !( 7000 < st.GetELenX() && st.GetELenX() < 50000 ) ) return 0; // 	
		if( st.GetELenY() <= 6000 ) return 0;	//
		if( !st.CheckPosState( _PosState_Ground ) ) return 0; // 地上じゃないとだめ
		if( !st.IsPMoveable() ) return 0; // 行動可能じゃないと発動しない

		// 敵の状態
		if( !st.CheckEState( _eComState_Damage ) ) return 0; // 敵がやられじゃないとだめ	
		
		return com_frequency3;
	}

	stmp.updatefunc = function() // 採用時の更新
	{
		local st = BCom.GetStatus();
		
		if( BCom.GetMoveTag() == "RND_start" ) //	分岐条件判定 
		{
			local ar		=	["J5C","J214B","J214BJ236EX","J214BJ214EX"]; // 分岐先を定義する
			local jump	=	BMvEff.Random_Limit( ar.len() );
			BCom.Move_Jump( ar[jump] );
		}
		return 1;
	}

	//	行動設定
	//	9入力
	mtmp = stmp.PlusMove();	// 動き追加
	mtmp.SetTag( "9" );
	mtmp.Set( 9, 0, 4, 0, 0 );

	//	JA攻撃
	mtmp = stmp.PlusMove();	// 動き追加
	mtmp.SetTag( "JA" );
	mtmp.Set( 0, _eComButton_A,  60, 0,   _eComMoveFlag_HitNext | _eComMoveFlag_MoveEnd );

	//	JB攻撃
	mtmp = stmp.PlusMove();	// 動き追加
	mtmp.SetTag( "JB" );
	mtmp.Set( 0, _eComButton_B,  60, 0,   _eComMoveFlag_HitNext | _eComMoveFlag_MoveEnd );

	//	分岐開始
	mtmp = stmp.PlusMove();	// 動き追加
	mtmp.SetTag( "RND_start" );
	mtmp.Set( 0, 0,  2, 0,  _eComMoveFlag_MoveEnd );
	{
		//	J5C
		mtmp = stmp.PlusMove();	// 動き追加
		mtmp.SetTag( "J5C" );
		mtmp.Set( 0, _eComButton_C,  3, 0, _eComMoveFlag_MoveEnd );

		//	J214B
		mtmp = stmp.PlusMove();	// 動き追加
		mtmp.SetTag( "J214B" );
		mtmp.SetSpSkill( def_CN_Skill_J214B );
		mtmp.Set( 0, 0,  50, 0, _eComMoveFlag_MoveEnd );

		//	J214BJ236EX
		mtmp = stmp.PlusMove();	// 動き追加
		mtmp.SetTag( "J214BJ236EX" );
		mtmp.SetSpSkill( def_CN_Skill_J214B );
		mtmp.Set( 0, 0,  65, 0, 0 );
		mtmp = stmp.PlusMove();	// 動き追加
		mtmp.SetSpSkill( def_CN_Skill_J236EX );
		mtmp.Set( 0, 0,  60, 0, _eComMoveFlag_MoveEnd );
		
		//	J214BJ214EX
		mtmp = stmp.PlusMove();	// 動き追加
		mtmp.SetTag( "J214BJ214EX" );
		mtmp.SetSpSkill( def_CN_Skill_J214B );
		mtmp.Set( 0, 0,  40, 0, _eComMoveFlag_DamageNext | _eComMoveFlag_MoveEnd);
		mtmp = stmp.PlusMove();	// 動き追加
		mtmp.SetSpSkill( def_CN_Skill_J214EX );
		mtmp.Set( 0, 0,  150, 0, _eComMoveFlag_MoveEnd );
	}
}
	
//--------------------------------------------------------------
{	// エリアル2	(空対空)
	stmp = com.GetSkill(nowskillnum); nowskillnum++; // 作成
	stmp.SetLotWait( 60 ); // 終了、失敗時のウェイト
	stmp.SetLotFailedAvg( 0 ); // 失敗確率

	// 採用判定チェック
	stmp.checkfunc = function()
	{
		local st = BCom.GetStatus();
		
		// 自分の状態
		if( 70000 < st.GetELenX() ) return 0;				//	X軸取得	
		if( st.GetELenY() <= 6000 ) return 0;				//	Y軸取得
		if( st.CheckPosState( _PosState_Ground ) ) return 0;	//	地上の場合、発動しない
		if( !st.IsPMoveable() ) return 0;					//	行動可能の場合、発動する	
		
		return com_frequency3;
	}

	// 採用時の更新
	stmp.updatefunc = function()
	{
		local st = BCom.GetStatus();
		
		if( BCom.GetMoveTag() == "RND_start" ) //	分岐条件判定 
		{
			local ar		=	["J5C","J236A","J236B","J214B","J214BJ236EX","J214BJ214EX"]; // 分岐先を定義する
			local jump	=	BMvEff.Random_Limit( ar.len() );
			BCom.Move_Jump( ar[jump] );
		}
		return 1;
	}

	//	採用時の行動設定

	//	JA攻撃
	mtmp = stmp.PlusMove();	// 動き追加
	mtmp.SetTag( "JA" );
	mtmp.Set( 0, _eComButton_A,  60, 0,   _eComMoveFlag_HitNext | _eComMoveFlag_MoveEnd );

	//	JB攻撃
	mtmp = stmp.PlusMove();	// 動き追加
	mtmp.SetTag( "JB" );
	mtmp.Set( 0, _eComButton_B,  60, 0,   _eComMoveFlag_HitNext | _eComMoveFlag_MoveEnd );

	//	分岐開始
	mtmp = stmp.PlusMove();	// 動き追加
	mtmp.SetTag( "RND_start" );
	mtmp.Set( 0, 0,  2, 0,  _eComMoveFlag_MoveEnd );
	{
		//	J5C
		mtmp = stmp.PlusMove();	// 動き追加
		mtmp.SetTag( "J5C" );
		mtmp.Set( 0, _eComButton_C,  3, 0, _eComMoveFlag_HitEnd | _eComMoveFlag_MoveEnd );

		//	J236A
		mtmp = stmp.PlusMove();	// 動き追加
		mtmp.SetTag( "J236A" );
		mtmp.SetSpSkill( def_CN_Skill_J236A );
		mtmp.Set( 0, 0,  50, 0, _eComMoveFlag_MoveableEnd | _eComMoveFlag_MoveEnd );

		//	J236B
		mtmp = stmp.PlusMove();	// 動き追加
		mtmp.SetTag( "J236B" );
		mtmp.SetSpSkill( def_CN_Skill_J236B );
		mtmp.Set( 0, 0,  50, 0, _eComMoveFlag_MoveableEnd | _eComMoveFlag_MoveEnd );
		
		//	J214B
		mtmp = stmp.PlusMove();	// 動き追加
		mtmp.SetTag( "J214B" );
		mtmp.SetSpSkill( def_CN_Skill_J214B );
		mtmp.Set( 0, 0,  50, 0, _eComMoveFlag_MoveableEnd | _eComMoveFlag_MoveEnd );

		//	J214BJ236EX
		mtmp = stmp.PlusMove();	// 動き追加	多段ヒットの為、手動でディレイを設定します
		mtmp.SetTag( "J214BJ236EX" );
		mtmp.SetSpSkill( def_CN_Skill_J214B );
		mtmp.Set( 0, 0,  65, 0, 0 );
		mtmp = stmp.PlusMove();	// 動き追加	ディレイ後スパキャンします
		mtmp.SetSpSkill( def_CN_Skill_J236EX );
		mtmp.Set( 0, 0,  60, 0, _eComMoveFlag_MoveableEnd | _eComMoveFlag_MoveEnd );
		
		//	J214BJ214EX
		mtmp = stmp.PlusMove();	// 動き追加	多段ヒットの為、手動でディレイを設定します
		mtmp.SetTag( "J214BJ214EX" );
		mtmp.SetSpSkill( def_CN_Skill_J214B );
		mtmp.Set( 0, 0,  40, 0, _eComMoveFlag_DamageNext | _eComMoveFlag_MoveEnd);
		mtmp = stmp.PlusMove();	// 動き追加	ディレイ後スパキャンします
		mtmp.SetSpSkill( def_CN_Skill_J214EX );
		mtmp.Set( 0, 0,  150, 0, _eComMoveFlag_MoveableEnd | _eComMoveFlag_MoveEnd );
	}
}

//--------------------------------------------------------------
{	// エリアル3	(空中投げ)
	stmp = com.GetSkill(nowskillnum); nowskillnum++; // 作成
	stmp.SetLotWait( 60 ); // 終了、失敗時のウェイト
	stmp.SetLotFailedAvg( 0 ); // 失敗確率

	// 採用判定チェック
	stmp.checkfunc = function()
	{
		local st = BCom.GetStatus();
		
		// 自分の状態
		if( 26000 < st.GetELenX() ) return 0;				//	X軸取得	
		if( st.GetELenY() <= 6000 ) return 0;				//	Y軸取得
		if( st.CheckPosState( _PosState_Ground ) ) return 0;	//	地上の場合、発動しない
		if( !st.IsPMoveable() ) return 0;					//	行動可能の場合、発動する	

		//	敵の状態チェック
		if( st.CheckEState( _eComState_Damage  ) ) return 0;	// 敵がやられ状態の場合、発動しない
		
		return com_frequency3;
	}

	// 採用時の更新
	stmp.updatefunc = function()
	{
		return 1;
	}

	//	採用時の行動設定

	//	空投げ
	mtmp = stmp.PlusMove(); // 動き追加 投げ
	mtmp.SetTag( "air_throw" );
	mtmp.Set( 0, _eComButton_A|_eComButton_D,  50, 0,  _eComMoveFlag_MoveableEnd | _eComMoveFlag_MoveEnd );
}

//--------------------------------------------------------------
{	// 適当なダッシュ攻撃
	stmp = com.GetSkill(nowskillnum); nowskillnum++; // 作成
	stmp.SetLotWait( 60 ); // 終了、失敗時のウェイト
	stmp.SetLotFailedAvg( 0 ); // 失敗確率
	stmp.checkfunc = function() // チェック

	{
		local st = BCom.GetStatus();
		if( st.GetELenX() > 70000 ) return 0;				// X軸設定
		if( !st.CheckPosState( _PosState_Ground ) ) return 0;	// 地上じゃないとだめ
		if( !st.IsPMoveable() ) return 0;					// 行動可能じゃないと発動しない
		
		return com_frequency2;
	}

	stmp.updatefunc = function() // 採用時の更新
	{
		local st = BCom.GetStatus();
		if( BCom.GetMoveTag() == "RND_start" ) // 
		{
			local ar = ["44","2B","2C","J7","66B","66C"]; // 分岐先を定義する
			local jump = BMvEff.Random_Limit( ar.len() ); // jumpは配列の要素数（３）のランダム＝0か1か2が入る
			BCom.Move_Jump( ar[jump] );
		}
		return 1;
	}

	//	前ダッシュ準備
	mtmp = stmp.PlusMove(); // 動き追加
	mtmp.Set( 6, 0,  2, 0,  0 );

	//	ニュートラル
	mtmp = stmp.PlusMove(); // 動き追加
	mtmp.Set( 0, 0,  2, 0,  0 );

	//	前ダッシュ成立
	mtmp = stmp.PlusMove(); // 動き追加
	mtmp.Set( 6, 0,  4, 8,  _eComMoveFlag_StickHold );

	//	分岐開始
	mtmp = stmp.PlusMove(); // 動き追加
	mtmp.SetTag( "RND_start" );
	mtmp.Set( 6, 0,  2, 0,  _eComMoveFlag_StickHold );
	{
		//	相手の前でしゃがみガード後に後ろダッシュ
		mtmp = stmp.PlusMove(); // 動き追加	しゃがみガード
		mtmp.SetTag( "44" );
		mtmp.Set( 1, 0,  30, 0,  _eComMoveFlag_StickHold );
		mtmp = stmp.PlusMove(); // 動き追加	ニュートラル
		mtmp.Set( 0, 0,  1, 0,  0 );
		mtmp = stmp.PlusMove(); // 動き追加	後ろステップ入力１
		mtmp.Set( 4, 0,  2, 0,  0 );
		mtmp = stmp.PlusMove(); // 動き追加	後ろステップ入力２
		mtmp.Set( 4, 0,  2, 0,  _eComMoveFlag_MoveEnd );

		//	2B
		mtmp = stmp.PlusMove(); // 動き追加
		mtmp.SetTag( "2B" );
		mtmp.Set( 2, _eComButton_B,  20, 0,  _eComMoveFlag_StickHold | _eComMoveFlag_HitEnd | _eComMoveFlag_MoveEnd );

		//	2C
		mtmp = stmp.PlusMove(); // 動き追加
		mtmp.SetTag( "2C" );
		mtmp.Set( 1, _eComButton_C,  20, 0,  _eComMoveFlag_StickHold | _eComMoveFlag_HitEnd | _eComMoveFlag_MoveEnd );
		
		//	バックジャンプ
		mtmp = stmp.PlusMove(); // 動き追加
		mtmp.SetTag( "J7" );
		mtmp.Set( 7, 0,  16, 0,  _eComMoveFlag_MoveEnd );
		
		//	66B+214A
		mtmp = stmp.PlusMove(); // 動き追加
		mtmp.SetTag( "66B" );
		mtmp.Set( 6, _eComButton_B,  15, 0,  _eComMoveFlag_StickHold | _eComMoveFlag_HitNext | _eComMoveFlag_MoveEnd );
		mtmp = stmp.PlusMove(); // 動き追加
		mtmp.SetSpSkill( def_CN_Skill_214A );
		mtmp.Set( 0, 0,  4, 0,  _eComMoveFlag_MoveEnd );

		//	66C
		mtmp = stmp.PlusMove(); // 動き追加
		mtmp.SetTag( "66C" );
		mtmp.Set( 6, _eComButton_C,  16, 0,  _eComMoveFlag_StickHold | _eComMoveFlag_MoveEnd );	
	}
}

//--------------------------------------------------------------
{	// ダッシュからのコンボ 上下択
	stmp = com.GetSkill(nowskillnum); nowskillnum++; // 作成
	stmp.SetLotWait( 60 ); // 終了、失敗時のウェイト
	stmp.SetLotFailedAvg( 0 ); // 失敗確率

	stmp.checkfunc = function() // チェック
	{
		local st = BCom.GetStatus();
		if( st.GetELenX() > 70000 ) return 0; // 
		if( !st.CheckPosState( _PosState_Ground ) ) return 0; // 地上じゃないとだめ

		return com_frequency1;
	}

	stmp.updatefunc = function() // 採用時の更新
	{
		local st = BCom.GetStatus();
		
		if( BCom.GetMoveTag() == "RND_start" ) //	分岐条件判定
		{
			local ar = ["6B","2C"]; // 分岐先を定義する
			local jump = BMvEff.Random_Limit( ar.len() ); // jumpは配列の要素数（３）のランダム＝0か1か2が入る
			BCom.Move_Jump( ar[jump] );
		}
		return 1;
	}

	//	密着からのコンボ 上下択 行動設定
	//	6入力
	mtmp = stmp.PlusMove();	// 動き追加
	mtmp.Set( 6, 0, 2, 0, 0 );

	//	6入力ダッシュ
	mtmp = stmp.PlusMove();	// 動き追加
	mtmp.Set( 6, 0, 2, 25, 0 );

	//	2A
	mtmp = stmp.PlusMove();	// 動き追加
	mtmp.Set( 2, _eComButton_A,  60, 0,   _eComMoveFlag_HitNext | _eComMoveFlag_MoveEnd );

	//	2A
	mtmp = stmp.PlusMove();	// 動き追加
	mtmp.Set( 2, _eComButton_A,  60, 0,   _eComMoveFlag_HitNext | _eComMoveFlag_MoveEnd );

	//	2B
	mtmp = stmp.PlusMove();	// 動き追加
	mtmp.Set( 2, _eComButton_B,  60, 0,   _eComMoveFlag_HitNext | _eComMoveFlag_MoveEnd );

	//	2Bのディレイ待機フレーム
	mtmp = stmp.PlusMove();	// 動き追加
	mtmp.Set( 4, 0, 15, 0, 0 );

	//	分岐開始
	mtmp = stmp.PlusMove();	// 動き追加
	mtmp.SetTag( "RND_start" );
	mtmp.Set( 0, 0,  2, 0,  _eComMoveFlag_MoveEnd );
	{
		//	6B中段
		mtmp = stmp.PlusMove();	// 動き追加
		mtmp.SetTag( "6B" );
		mtmp.Set( 6, _eComButton_B,  90, 0,  _eComMoveFlag_MoveEnd );

		//	2C下段
		mtmp = stmp.PlusMove();	// 動き追加
		mtmp.SetTag( "2C" );
		mtmp.Set( 2, _eComButton_C,  60, 0,  _eComMoveFlag_MoveEnd );
	}	
}

//--------------------------------------------------------------
{	// 遠間てきとう
	stmp = com.GetSkill(nowskillnum); nowskillnum++; // 作成
	stmp.SetLotWait( 60 ); // 終了、失敗時のウェイト
	stmp.SetLotFailedAvg( 0 ); // 失敗確率
	stmp.checkfunc = function() // チェック

	{
		local st = BCom.GetStatus();
		if( st.GetELenX() < 65000 ) return 0; // 
		if( !st.CheckPosState( _PosState_Ground ) ) return 0; // 地上じゃないとだめ
		if( !st.IsPMoveable() ) return 0;					// 行動可能じゃないと発動しない
		
		return com_frequency1;
	}

	stmp.updatefunc = function() // 採用時の更新
	{
		local st = BCom.GetStatus();
		if( BCom.GetMoveTag() == "RND_start" )
		{
			local ar = ["214B","236A","236B","J236A","6DJB","6DJ236A","6DBC"]; // 分岐先を定義する
			local jump = BMvEff.Random_Limit( ar.len() );
			BCom.Move_Jump( ar[jump] );
		}
		return 1;
	}
	
	//	分岐開始
	mtmp = stmp.PlusMove(); // 動き追加
	mtmp.SetTag( "RND_start" );
	mtmp.Set( 0, 0,  2, 0,  _eComMoveFlag_MoveEnd );
	{
		// 
		mtmp = stmp.PlusMove(); // 動き追加
		mtmp.SetTag( "214B" );
		mtmp.SetSpSkill( def_CN_Skill_214B );
		mtmp.Set( 0, 0,  2, 0,  _eComMoveFlag_MoveEnd );
		
		// 
		mtmp = stmp.PlusMove(); // 動き追加
		mtmp.SetTag( "236A" );
		mtmp.SetSpSkill( def_CN_Skill_236A );
		mtmp.Set( 0, 0,  2, 0,  _eComMoveFlag_MoveEnd );
		
		// 
		mtmp = stmp.PlusMove(); // 動き追加
		mtmp.SetTag( "236B" );	
		mtmp.SetSpSkill( def_CN_Skill_236B );
		mtmp.Set( 0, 0,  2, 0,  _eComMoveFlag_MoveEnd );

		// 
		mtmp = stmp.PlusMove(); // 動き追加
		mtmp.SetTag( "J236A" );
		mtmp.Set( 9, 0,  16, 0,  0 );
		mtmp = stmp.PlusMove(); // 動き追加	
		mtmp.SetSpSkill( def_CN_Skill_J236A );
		mtmp.Set( 0, 0,  2, 0,  _eComMoveFlag_MoveEnd );

		// 
		mtmp = stmp.PlusMove(); // 動き追加
		mtmp.SetTag( "6DJB" );
		mtmp.SetSpSkill( def_CN_Assault_Std );
		mtmp.Set( 0, 0,  16, 0,  0 );
		mtmp = stmp.PlusMove(); // 動き追加	
		mtmp.Set( 0, _eComButton_B,  2, 0,  _eComMoveFlag_MoveEnd );	
		
		// 
		mtmp = stmp.PlusMove(); // 動き追加
		mtmp.SetTag( "6DJ236A" );
		mtmp.SetSpSkill( def_CN_Assault_Std );
		mtmp.Set( 0, 0,  20, 0,  0 );
		mtmp = stmp.PlusMove(); // 動き追加	
		mtmp.SetSpSkill( def_CN_Skill_J236B );
		mtmp.Set( 0, 0,  2, 0,  _eComMoveFlag_MoveEnd );

		// 
		mtmp = stmp.PlusMove(); // 動き追加
		mtmp.SetTag( "6DBC" );
		mtmp.SetSpSkill( def_CN_Assault_Std );
		mtmp.Set( 0, 0,  50, 0,  0);
		mtmp = stmp.PlusMove(); // 動き追加	
		mtmp.Set( 0, _eComButton_B | _eComButton_C , 35, 0, _eComMoveFlag_DamageNext | _eComMoveFlag_MoveEnd );
		mtmp = stmp.PlusMove(); // 動き追加
		mtmp.SetSpSkill( def_CN_Skill_214B );
		mtmp.Set( 0, 0,  2, 0,  _eComMoveFlag_MoveEnd );	
	}
}

//--------------------------------------------------------------
{	// 対空1
	stmp = com.GetSkill(nowskillnum); nowskillnum++; // 作成
	stmp.SetLotWait( 60 ); // 終了、失敗時のウェイト
	stmp.SetLotFailedAvg( 50 ); // 失敗確率

	stmp.checkfunc = function() // チェック
	{
		local st = BCom.GetStatus();
		
		//	自分の状態チェック	
		if( st.GetELenX() > 40000 ) return 0; // 
		if( st.GetELenY() <= 10 ) return 0; // 
		if( !st.CheckPosState( _PosState_Ground ) ) return 0;	//	地上の場合、発動する
		
		//	敵の状態チェック
		if( st.CheckEState( _eComState_Damage  ) ) return 0;	//	敵がやられ状態の場合、発動しない	
		
		return com_frequency2;
	}

	stmp.updatefunc = function() // 採用時の更新
	{
		local st = BCom.GetStatus();

		if( BCom.GetMoveTag() == "RND_start") // 対空分岐初期値
		{
				local ar = ["0202B","0202C","6C","BC"]; // 分岐先を定義する
				
				local jump = BMvEff.Random_Limit( ar.len() );
				BCom.Move_Jump( ar[jump] );
		}

		return 1;
	}
	
	//	分岐スタート 
	mtmp = stmp.PlusMove(); // 動き追加
	mtmp.SetTag( "RND_start" );
	mtmp.Set( 0, 0,  2, 0,  _eComMoveFlag_MoveEnd );
	{
		//	対空22B
		mtmp = stmp.PlusMove(); // 動き追加
		mtmp.SetSpSkill( def_CN_Skill_0202B );
		mtmp.SetTag( "0202B" );
		mtmp.Set( 0, 0,  30, 0,  _eComMoveFlag_MoveEnd );
		
		//	対空22C
		mtmp = stmp.PlusMove(); // 動き追加
		mtmp.SetTag( "0202C" );
		mtmp.SetSpSkill( def_CN_Skill_0202C );
		mtmp.Set( 0, 0,  30, 0,  _eComMoveFlag_MoveEnd );
		
		//	対空6C
		mtmp = stmp.PlusMove(); // 動き追加
		mtmp.SetTag( "6C" );
		mtmp.Set( 6, _eComButton_C,  35, 0,  _eComMoveFlag_MoveEnd );

		//	対空B+C
		mtmp = stmp.PlusMove(); // 動き追加	対空防御待機10Fディレイ
		mtmp.SetTag( "BC" );
		mtmp.Set( 4, 0,  10, 0, 0 );
		mtmp = stmp.PlusMove(); // 動き追加	対空防御発動
		mtmp.Set( 6, _eComButton_B | _eComButton_C,  6, 0,  _eComMoveFlag_MoveEnd );
	}
}

//--------------------------------------------------------------
{	// 空中てきとう
	stmp = com.GetSkill(nowskillnum); nowskillnum++; // 作成
	stmp.SetLotWait( 0 ); // 終了、失敗時のウェイト
	stmp.SetLotFailedAvg( 30 ); // 失敗確率
	stmp.checkfunc = function() // チェック
	{
		local st = BCom.GetStatus();
		if( !st.IsPMoveable() ) return 0; // 
		if( st.GetELenX() > 40000 ) return 0; // 
		if( !st.CheckPosState( _PosState_Air ) ) return 0; // 

		return com_frequency2;
	}
	stmp.updatefunc = function() // 採用時の更新
	{
		local st = BCom.GetStatus();
		if( BCom.GetMoveTag() == "RND_start") // 空中攻撃初期値
		{
				local ar = ["6D","J5B","J5C","J2C","throw"]; // 分岐先を定義する
				local jump = BMvEff.Random_Limit( ar.len() );
				BCom.Move_Jump( ar[jump] );
		}
		return 1;
	}
	// 
	mtmp = stmp.PlusMove(); // 動き追加
	mtmp.SetTag( "RND_start" );
	mtmp.Set( 0, 0,  2, 0,  _eComMoveFlag_MoveEnd );
	
	// 
	mtmp = stmp.PlusMove(); // 動き追加	アサルト
	mtmp.SetTag( "6D" );
	mtmp.SetSpSkill( def_CN_Assault_Air );
	mtmp.Set( 0, 0,  2, 0,  _eComMoveFlag_MoveEnd );
	
	//
	mtmp = stmp.PlusMove(); // 動き追加	J5B
	mtmp.SetTag( "J5B" );
	mtmp.Set( 0, _eComButton_B,  2, 0,  _eComMoveFlag_MoveEnd );
	
	//
	mtmp = stmp.PlusMove(); // 動き追加	J5C
	mtmp.SetTag( "J5C" );
	mtmp.Set( 0, _eComButton_C,  2, 0,  _eComMoveFlag_MoveEnd );
	
	// 
	mtmp = stmp.PlusMove(); // 動き追加	アサルト→2C
	mtmp.SetTag( "J2C" );
	mtmp.SetSpSkill( def_CN_Assault_Air );
	mtmp.Set( 2, _eComButton_C,  2, 0,  _eComMoveFlag_MoveEnd );
	// 
}

print("\n nowskillnum:"+nowskillnum );

// 最後にglobal_com_tmpへ渡す
ComBase_GlobalComTmp_Set( com );

print("\n\n>com Loaded<\n")


_dp("\n[_mv.txt]");
// 行動リストテーブル


local t = {};

t.Mv_WinMotionMessage <-
{
	function Init_After()
	{
		local rnd = BMvEff.Random_Limit(2);
		switch( rnd )
		{
		case 0:
			tDDC.Support_SetMessage( "@C100", 200, 100 ); // 
			break;
		case 1:
			tDDC.Support_SetMessage( "@C101", 200, 101 ); // 
			break;
		}
	}
}

t.Mv_LoseMotionMessage <-
{
	function Init_After()
	{
		local rnd = BMvEff.Random_Limit(2);
		switch( rnd )
		{
		case 0:
			tDDC.Support_SetMessage( "@C110", 200, 110 ); // 
			break;
		case 1:
			tDDC.Support_SetMessage( "@C111", 200, 111 ); // 
			break;
		}
	}
}

t.Mv_SupportChargeMessage <-
{
	function Init_After()
	{
		local rnd = BMvEff.Random_Limit(2);
		switch( rnd )
		{
		case 0:
			tDDC.Support_SetMessage( "@C120", 200, 160 ); // 
			break;
		case 1:
			tDDC.Support_SetMessage( "@C121", 200, 161 ); // 
			break;
		}
	}
}

//-----------------------------------------------------------------------------
// サポートキャラ
//-----------------------------------------------------------------------------

//-----------------------------------------------------------------------------
// 攻撃１
//-----------------------------------------------------------------------------

local pat_num_Sup00 = BMvEff.GetPatternNum( { datatype=0, pat="Sup00" } ); // パターン文字列のパターン番号を事前取得

t.Mv_SupportChara <- // サポートキャラの行動
{
	function Init_After() : (pat_num_Sup00)
	{
		BMvTbl.SetPattern( pat_num_Sup00 ); // 表示するパターンを設定
		
		// 表示座標指定
		// 何も指定しない場合呼び出された座標になる
		Battle_Std.AddXPos_CheckFrontStage( 150, 150 ); // X移動距離, ステージ端とこれ以上近づかない距離
	}
	function FrameUpdate_After()
	{
		switch( Battle_Std.GetUpdateFrameID() )
		{
		case 100: // イラスト書き始める
			BMvEff.CreateObject( { mvname="Mv_Baumkuchen" } );
			BSound.SE_Play( { type=_SeType_Player, num=[171,173] } );
			break;
		}
		
		local mvs = BMvTbl.GetMvStatus();
		if( mvs.FrameID == 900 )
		{
			if( BMvTbl.GetPP(5) <= 0 )
			{
				BMvTbl.SetFinalize( 0 );
			}
		}		
	}
	function HitInterrupt_After()
	{
	}
}

local pat_num_Sup00_Esc = BMvEff.GetPatternNum( { datatype=0, pat="Sup00_Esc" } ); // パターン文字列のパターン番号を事前取得

//サポートキャラがダメージを受けると入る行動
t.Mv_SupportCharaDamage <-
{
	function Init_After() : (pat_num_Sup00_Esc)
	{
		BMvTbl.SetPattern( pat_num_Sup00_Esc );
		BSound.SE_Play( { type=_SeType_Player, num=[140,141,142] } );
	}
}

//出現途中で親が殴られると入る行動
t.Mv_SupportCharaEscape <-
{
	function Init_After() : (pat_num_Sup00_Esc)
	{
		BMvTbl.SetPattern( pat_num_Sup00_Esc );
		BSound.SE_Play( { type=_SeType_Player, num=[130,131] } );
	}
}

local call_baumpar = function( _pat, _x, _y, _reverse, _xvec, _addxvec, _yvec, _addyvec, _scale )
{
	local eff = BMvEff.CreateObject( { start_pat=_pat, x=_x, y=_y, flags=_Position_ToolShift } );
	if( eff.push() )
	{
		BMvEff.SetObjectFlags( { flags=_ObjFlags_NoGround } );
		
		if( _reverse ) BMvTbl.SetMuki( _Direction_Reverse );
		
		BMvTbl.SetVector( { x=_xvec, addx=_addxvec, y=_yvec, addy=_addyvec } );
		BMvTbl.SetScale( { x=_scale, y=_scale } );
		
		eff.pop();
	}
}

local pat_num_Baum = BMvEff.GetPatternNum( { datatype=0, pat="Baum" } ); // パターン文字列のパターン番号を事前取得
local pat_num_baumpar = BMvEff.GetPatternNum( { datatype=0, pat="baumpar" } ); // パターン文字列のパターン番号を事前取得

t.Mv_Baumkuchen <-
{
	function Init() : (pat_num_Baum)
	{
		BMvTbl.SetPattern( pat_num_Baum );
		BMvEff.SetObjectFlags( { flags=_ObjFlags_EraseParentPatChange|_ObjFlags_NoGround } );	
		Battle_Std.MoveCode.AddFlag( def_MC_Sousai ); // 相殺される
		BMvTbl.SetHitCheckFlag( { type=1, val=_HitCheckFlag_FireBall, time=255, flag=_ClearFlag_ChangeMv } ); // 弾無敵にスカる		
		Battle_Std.MoveCodeEx.AddFlag( 1, def_MC1_AtkBall ); // 飛び道具
		
		BMvTbl.SetPP(5,1); // バームクーヘン生成
		
		BMvTbl.SetLP(6,0); // ヒット数

		BMvTbl.SetLP(7,-1); // 死亡予約 0になると死ぬ
		BMvTbl.SetLP(8,0); // 死亡予約があるよ 0:まだ 1:ある 2:おわった
	}
	function FrameUpdate() : (call_baumpar, pat_num_baumpar)
	{
		if( Battle_Std.MoveCodeEx.CheckFlag( 1, def_MC1_Sousai_MySubSuccess ) )
		{
			BMvTbl.SetFinalize(0); // 相殺したら消える
		
			local rc = BMvEff.GetHanteiRect ( { check=[ _Hantei_Etc, 4 ], flags=_HanteiFlag_NoMukiChange | _HanteiFlag_Tool  } );
			if( rc.sx != _Hantei_Error )
			{
				local posx = rc.sx;
				local posy = rc.sy;
				local patnum = BMvEff.GetPatternNum( { datatype=0, pat=pat_num_baumpar } );
				if( patnum != -1 )
				{
					call_baumpar( patnum, posx    , posy    , 0, -200, 0,  -700,  50, 10000 );
					call_baumpar( patnum, posx-100, posy-50 , 0, -700, 0, -1000, 100,  6000 );
					call_baumpar( patnum, posx+60 , posy-100, 1,  300, 0,  -800, 100,  6000 );
					call_baumpar( patnum, posx-30 , posy+100, 1, -200, 0,  -600,  80,  6000 );
					call_baumpar( patnum, posx+30 , posy+70 , 0,  400, 0,  -600,  90,  6000 );
					call_baumpar( patnum, posx+100, posy-80 , 0, -700, 0,  -500,  90,  6000 );
				}
			}
		}
		Battle_Std.CheckSousai(); // def_MC_Sousai と触れたら相殺し合う
	
		switch( Battle_Std.GetUpdateFrameID() )
		{
		case 100:
			BMvEff.EraseObjectFlags( { flags=_ObjFlags_EraseParentPatChange } );
			break;
		case 500: // 爆発する別パターン
			// 違和感がやばいので無くす
			// Battle_Std.SetPos_MarkingEnemy();
			break;
		}
		
		
		// _dp("\n 7:"+BMvTbl.GetLP(7)+" 8:"+BMvTbl.GetLP(8) );
		
		if( BMvTbl.GetLP(8) == 1 ) // 死亡予約がある時
		{
			local endFrame = BMvTbl.GetLP(7); // nF後に死ぬ
			if( endFrame > 0 ) BMvTbl.AddLP(7,-1);
			
			if( endFrame <= 0 )
			{
				// _dp("\n しぬ");
				BMvTbl.SetLP(8,2); // 予約が終わった
				
				local rc = BMvEff.GetHanteiRect ( { check=[ _Hantei_Etc, 4 ], flags=_HanteiFlag_NoMukiChange | _HanteiFlag_Tool  } );
				if( rc.sx != _Hantei_Error )
				{
					local posx = rc.sx;
					local posy = rc.sy;
					local patnum = BMvEff.GetPatternNum( { datatype=0, pat=pat_num_baumpar } );
					if( patnum != -1 )
					{
						call_baumpar( patnum, posx    , posy    , 0, -200+1500, 0,  -700,  50, 10000 );
						call_baumpar( patnum, posx-100, posy-50 , 0, -700+1500, 0, -1000, 100,  6000 );
						call_baumpar( patnum, posx+60 , posy-100, 0,  300+1500, 0,  -800, 100,  6000 );
						call_baumpar( patnum, posx-30 , posy+100, 0, -200+1500, 0,  -600,  80,  6000 );
						call_baumpar( patnum, posx+30 , posy+70 , 0,  400+1500, 0,  -600,  90,  6000 );
						call_baumpar( patnum, posx+100, posy-80 , 0, -700+1500, 0,  -500,  90,  6000 );
					}
					
					BMvTbl.SetPattern( "BaumFinHit" );
				}
				//BMvTbl.SetFinalize( 0 );
			}
		}
	}
	function HitInterrupt() : (call_baumpar, pat_num_baumpar)
	{
		if( Battle_Std.CheckHitTiming() )
		{
			local hit_cnt = BMvTbl.AddLP(6,1); // ヒット数を加算して、ある程度のヒットで消えるように
			
			if( hit_cnt >= 4 && BMvTbl.GetLP(8) == 0 )
			{
				BMvTbl.SetLP(7,10); // 10F後に死ぬ
				BMvTbl.SetLP(8,1); // 予約があるよ
				// _dp("\n 死亡予約");
			}
		}
	}
	function Finalize()
	{
		BMvTbl.SetDeleteMoveTable();
	}
	function LastUpdate()
	{
		BMvTbl.SetPP(5,0); // バームクーヘン生成終わり
	}
}


//-----------------------------------------------------------------------------
// 攻撃２
//-----------------------------------------------------------------------------

local pat_num_Sup10 = BMvEff.GetPatternNum( { datatype=0, pat="Sup10" } ); // パターン文字列のパターン番号を事前取得

t.Mv_SupportChara2 <- // サポートキャラの行動
{
	function Init_After() : (pat_num_Sup10)
	{
		BMvTbl.SetPattern( pat_num_Sup10 ); // 表示するパターンを設定
		
		// 表示座標指定
		Battle_Std.AddXPos_CheckFrontStage( 100, 600 ); // X移動距離, ステージ端とこれ以上近づかない距離
	}
	function FrameUpdate_After()
	{
		switch( Battle_Std.GetUpdateFrameID() )
		{
		case 100: // 猫生成ＴＬ作成
			BMvEff.CreateObject( { mvname="Mv_CatCreater" } );
			BSound.SE_Play( { type=_SeType_Player, num=[170,172] } );
			break;
		}	
		local mvs = BMvTbl.GetMvStatus();
		if( mvs.FrameID == 900 )
		{
			if( BMvTbl.GetPP(0) <= 0 )
			{
				BMvTbl.SetFinalize( 0 );
			}
		}
	}
	function HitInterrupt_After()
	{
	}
}

// 猫はましろから生成される ＝ ましろがやられると消える
local call_CatFromMashiro = function( _mv, _x, _y, _reverse, _cnt )
{
	local oya = BMvCore.GetParentCharaData(); // ましろ
	if( oya.push() )
	{
		local eff = BMvEff.CreateObject( { mvname=_mv, x=_x<<7, y=_y<<7 } );
		if( eff.push() )
		{
			BMvTbl.SetLP(0,_cnt);
			if( _reverse ) BMvTbl.SetMuki( _Direction_Reverse );
			eff.pop();
		}
		
		oya.pop();
	}
}

local pat_num_sup10_catTL = BMvEff.GetPatternNum( { datatype=0, pat="sup10_catTL" } ); // パターン文字列のパターン番号を事前取得

t.Mv_CatCreater <-
{
	function Init() : (pat_num_sup10_catTL)
	{
		BMvTbl.SetPattern( pat_num_sup10_catTL );
		BMvEff.SetObjectFlags( { flags=_ObjFlags_NoGround | _ObjFlags_NoRender | _ObjFlags_ParentMove | _ObjFlags_EraseParentPatChange } );	
		BMvEff.SetExist( { level = _Exist_NoHantei } );	
	}
	function FrameUpdate_After() : (call_CatFromMashiro)
	{
		switch( Battle_Std.GetUpdateFrameID() )
		{
		case 100:
			call_CatFromMashiro( "Mv_Cat_TypeA", 10, -330, 0, 0 );
			break;
		case 200:
			call_CatFromMashiro( "Mv_Cat_TypeB", -20, -250, 1, 1 );
			break;
		case 300:
			call_CatFromMashiro( "Mv_Cat_TypeC", -30, -175, 0, 0 );
			break;
		case 400:
			call_CatFromMashiro( "Mv_Cat_TypeD", 20, -150, 1, 1 );
			break;
		}	
	}	
	function Finalize()
	{
		BMvTbl.SetDeleteMoveTable();
	}
}

local makemv_cat = function( param={} )
{
	local retmv = {};

	retmv.Init <- function() : (param)
	{
		BMvTbl.SetPattern( param.pat );
		BMvEff.SetObjectFlags( { flags=_ObjFlags_EraseParentPatChange } );

		// BMvTbl.SetLP(0,0); // 何回端で反射するか（生成時にpushして書き換え）
		BMvTbl.AddPP(0,1); // 猫生成カウンタを加算 これが0にならないとましろはFinしないので注意
		
		BMvTbl.SetLP(2,0); // やられに進んだかどうか
	}

	retmv.FrameUpdate <- function()
	{
		if( BMvTbl.GetLP(2) == 0 )
		{
			local main = BMvCore.GetMainCharaData();
			if( main.push() )
			{
				local isdamage = Battle_Std.CheckPlayerisDamage();
				main.pop();
				
				if( isdamage )
				{
					BMvTbl.SetLP(2,1); // やられに進んだ
					BMvTbl.JumpFrameID( 900 ); // やられへ進む
					return;
				}
			}
		}
		
		switch( Battle_Std.GetUpdateFrameID() )
		{
		case 100:
			BMvEff.EraseObjectFlags( { flags=_ObjFlags_EraseParentPatChange } );
			break;
		}
		if( BMvTbl.GetLP(0) > 0 )
		{
			// 画面外で逆に歩き始める
			if( Battle_Std.CheckFromtCornerDistance( 0 ) )
			{
				BMvTbl.AddLP(0,-1); // 残り反射回数を減らす
				local vec = BMvTbl.GetVector( 0 );
				BMvTbl.SetMuki( _Direction_Reverse );
				BMvTbl.SetVector( { x=vec.x } ); // ベクトルを逆にする

				// ヒット数を１に復活させる
				BMvTbl.CalcHitValue(-10000);
				BMvTbl.CalcHitValue(1);
			}
		}
		else
		{
			// 画面外まで進んだら消える
			if( Battle_Std.CheckFromtCornerDistance( -300 ) )
			{
				BMvTbl.SetFinalize( 0 );
			}
		}
		
	}
	
	retmv.Finalize <- function()
	{
		BMvTbl.SetDeleteMoveTable();
	}
	
	retmv.LastUpdate_After <- function()
	{
		BMvTbl.AddPP(0,-1);
	}
	
	return retmv;
}


local pat_num_sup10_catA = BMvEff.GetPatternNum( { datatype=0, pat="sup10_catA" } ); // パターン文字列のパターン番号を事前取得
local pat_num_sup10_catB = BMvEff.GetPatternNum( { datatype=0, pat="sup10_catB" } ); // パターン文字列のパターン番号を事前取得
local pat_num_sup10_catC = BMvEff.GetPatternNum( { datatype=0, pat="sup10_catC" } ); // パターン文字列のパターン番号を事前取得
local pat_num_sup10_catD = BMvEff.GetPatternNum( { datatype=0, pat="sup10_catD" } ); // パターン文字列のパターン番号を事前取得

t.Mv_Cat_TypeA <- makemv_cat( { pat=pat_num_sup10_catA } );
t.Mv_Cat_TypeB <- makemv_cat( { pat=pat_num_sup10_catB } );
t.Mv_Cat_TypeC <- makemv_cat( { pat=pat_num_sup10_catC } );
t.Mv_Cat_TypeD <- makemv_cat( { pat=pat_num_sup10_catD } );

local pat_num_Sup10_Esc = BMvEff.GetPatternNum( { datatype=0, pat="Sup10_Esc" } ); // パターン文字列のパターン番号を事前取得

//サポートキャラがダメージを受けると入る行動
t.Mv_SupportCharaDamage2 <-
{
	function Init_After() : (pat_num_Sup10_Esc)
	{
		BMvTbl.SetPattern( pat_num_Sup10_Esc );
		BSound.SE_Play( { type=_SeType_Player, num=[140,141,142] } );
	}
}

//出現途中で親が殴られると入る行動
t.Mv_SupportCharaEscape2 <-
{
	function Init_After() : (pat_num_Sup10_Esc)
	{
		BMvTbl.SetPattern( pat_num_Sup10_Esc );
		BSound.SE_Play( { type=_SeType_Player, num=[130,131] } );
	}
}


MAS_S_MoveTable <- Battle_Std.SupportChara.MakeMoveTable( t, Def_ChrNo_Mas_s );

_dp(" -> Load OK");
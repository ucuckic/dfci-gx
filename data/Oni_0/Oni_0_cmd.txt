//コマンドテーブル skillは格ゲーコマンド表記
btl_debPrint2("\n[cmd.txt]");

local t =
{
	MultiJump_F = { CmdCheck = { HeightLimit = def_POS_AirDashLimitHeight, }	},
	MultiJump_N = { CmdCheck = { HeightLimit = def_POS_AirDashLimitHeight, }	},
	MultiJump_B = { CmdCheck = { HeightLimit = def_POS_AirDashLimitHeight, }	},
	MultiJumpCancel_F = { CmdCheck = { HeightLimit = def_POS_AirDashLimitHeight, }	},
	MultiJumpCancel_N = { CmdCheck = { HeightLimit = def_POS_AirDashLimitHeight, }	},
	MultiJumpCancel_B = { CmdCheck = { HeightLimit = def_POS_AirDashLimitHeight, }	},

	Skill_236A = {},
	Skill_236B = {},
	Skill_236C = {},
	Skill_236EX = {},
	
	Skill_236_AddA =
	{
		num = def_CN_Skill_AddCommand3,// コマンドの優先度を設定
		command = "A",
		function CmdBeforeFunc()
		{
			// 派生していいタイミングかどうかチェック
			local mvs = BMvTbl.GetMvStatus();
			if( mvs.Param3 != 1 ) return 0;
			return 1;
		},
		CmdCheck = 
		{
			SkillType = "AddCommand"
			MvCheck = { Only = ["Mv_Skill_236A","Mv_Skill_236B","Mv_Skill_236C",] },
			HitStatus = "Hit",
		},
		UpdateTable = { name = "Mv_Skill_236_AddA", },
	},
	Skill_236_AddB =
	{
		num = def_CN_Skill_AddCommand2,// コマンドの優先度を設定
		command = "B",
		function CmdBeforeFunc()
		{
			// 派生していいタイミングかどうかチェック
			local mvs = BMvTbl.GetMvStatus();
			if( mvs.Param3 != 1 ) return 0;
			return 1;
		},
		CmdCheck = 
		{
			SkillType = "AddCommand"
			MvCheck = { Only = ["Mv_Skill_236A","Mv_Skill_236B","Mv_Skill_236C",] },
			HitStatus = "Hit",
		},
		UpdateTable = { name = "Mv_Skill_236_AddB", },
	},
	Skill_236_AddC =
	{
		num = def_CN_Skill_AddCommand1,// コマンドの優先度を設定
		command = "C",
		function CmdBeforeFunc()
		{
			// 派生していいタイミングかどうかチェック
			local mvs = BMvTbl.GetMvStatus();
			if( mvs.Param3 != 1 ) return 0;
			return 1;
		},
		CmdCheck = 
		{
			SkillType = "AddCommand"
			MvCheck = { Only = ["Mv_Skill_236A","Mv_Skill_236B","Mv_Skill_236C",] },
			HitStatus = "Hit",
		},
		UpdateTable = { name = "Mv_Skill_236_AddC", },
	},
	Skill_236EX_AddEX =
	{
		num = def_CN_Skill_AddCommand4,// コマンドの優先度を設定
		command = 
		[
		"A","B","C"
		],
		function CmdBeforeFunc()
		{
			// 派生していいタイミングかどうかチェック
			local mvs = BMvTbl.GetMvStatus();
			local param3 = mvs.Param3;
			
			if( !(param3 & 1) )
			{
				return 0; // 1じゃないと出ない
			}
			
			if( param3 & 2 && !Battle_Std.CheckEnemyisDamage() )
			{
				return 0; // 2があるとダメージ時出せる(1+2=3)
			}
			return 1;
		},
		CmdCheck = 
		{
			SkillType = "AddCommand"
			MvCheck = { Only = ["Mv_Skill_236EX"] },
			HitStatus = "Hit",
		},
		UpdateTable = { name = "Mv_Skill_236EX_AddEX", },
	},
	
	Skill_J236A = {},
	Skill_J236B = {},
	Skill_J236C = {},
	Skill_J236EX = {},
	
	Skill_J236_AddA =
	{
		num = def_CN_Skill_AddCommand3,// コマンドの優先度を設定
		command = "A",
		function CmdBeforeFunc()
		{
			// 派生していいタイミングかどうかチェック
			local mvs = BMvTbl.GetMvStatus();
			if( mvs.Param3 != 1 ) return 0;
			return 1;
		},
		CmdCheck = 
		{
			SkillType = "AddCommand"
			MvCheck = { Only = ["Mv_Skill_J236A","Mv_Skill_J236B","Mv_Skill_J236C",] },
			PosState="Air",
			HitStatus = "Hit",
		},
		UpdateTable = { name = "Mv_Skill_J236_AddA", },
	},
	Skill_J236_AddB =
	{
		num = def_CN_Skill_AddCommand2,// コマンドの優先度を設定
		command = "B",
		function CmdBeforeFunc()
		{
			// 派生していいタイミングかどうかチェック
			local mvs = BMvTbl.GetMvStatus();
			if( mvs.Param3 != 1 ) return 0;
			return 1;
		},
		CmdCheck = 
		{
			SkillType = "AddCommand"
			MvCheck = { Only = ["Mv_Skill_J236A","Mv_Skill_J236B","Mv_Skill_J236C",] },
			PosState="Air",
			HitStatus = "Hit",
		},
		UpdateTable = { name = "Mv_Skill_J236_AddB", },
	},
	Skill_J236_AddC =
	{
		num = def_CN_Skill_AddCommand1,// コマンドの優先度を設定
		command = "C",
		function CmdBeforeFunc()
		{
			// 派生していいタイミングかどうかチェック
			local mvs = BMvTbl.GetMvStatus();
			if( mvs.Param3 != 1 ) return 0;
			return 1;
		},
		CmdCheck = 
		{
			SkillType = "AddCommand"
			MvCheck = { Only = ["Mv_Skill_J236A","Mv_Skill_J236B","Mv_Skill_J236C",] },
			PosState="Air",
			HitStatus = "Hit",
		},
		UpdateTable = { name = "Mv_Skill_J236_AddC", },
	},
	Skill_J236EX_AddEX =
	{
		num = def_CN_Skill_AddCommand4,// コマンドの優先度を設定
		command = 
		[
		"A","B","C"
		],
		function CmdBeforeFunc()
		{
			// 派生していいタイミングかどうかチェック
			local mvs = BMvTbl.GetMvStatus();
			local param3 = mvs.Param3;

			if( !(param3 & 1) )
			{
				return 0; // 1じゃないと出ない
			}
			
			if( param3 & 2 && !Battle_Std.CheckEnemyisDamage() )
			{
				return 0; // 2があるとダメージ時出せる(1+2=3)
			}
			return 1;
		},
		CmdCheck = 
		{
			SkillType = "AddCommand"
			MvCheck = { Only = ["Mv_Skill_J236EX"] },
			PosState="Air",
			HitStatus = "Hit",
		},
		UpdateTable = { name = "Mv_Skill_J236EX_AddEX", },
	},
	
	Skill_214Sousai_AddA =
	{
		num = def_CN_Skill_AddCommand10, command = 
		[
		"A",
		],
		function CmdBeforeFunc()
		{
			// 必殺ＣがＨＩＴ時の時のみ出せる
			if( BCMDTbl.CheckCancelFlag( 1 ) != _CancelFlag_Hit ) return 0;
		
			// 214攻で相殺成功していないとダメ
			if( BMvTbl.GetLP(0) != 1 ) return 0;
			return 1;
		},
		CmdCheck = 
		{
			SkillType = "AddCommand"
			PosState = "Air",
			MvCheck = { Only = ["Mv_Skill_214B","Mv_Skill_214C","Mv_Skill_214EX"] },
		},
		UpdateTable = { name = "Mv_Skill_214Sousai_AddA", },
	},	
	Skill_214Sousai_AddB =
	{
		num = def_CN_Skill_AddCommand11, command = 
		[
		"B",
		],
		function CmdBeforeFunc()
		{
			// 必殺ＣがＨＩＴ時の時のみ出せる
			if( BCMDTbl.CheckCancelFlag( 1 ) != _CancelFlag_Hit ) return 0;
		
			// 214攻で相殺成功していないとダメ
			if( BMvTbl.GetLP(0) != 1 ) return 0;
			return 1;
		},
		CmdCheck = 
		{
			SkillType = "AddCommand"
			PosState = "Air",
			MvCheck = { Only = ["Mv_Skill_214B","Mv_Skill_214C","Mv_Skill_214EX"] },
		},
		UpdateTable = { name = "Mv_Skill_214Sousai_AddB", },
	},		
	Skill_214Sousai_AddC =
	{
		num = def_CN_Skill_AddCommand12, command = 
		[
		"C",
		],
		function CmdBeforeFunc()
		{
			// 必殺ＣがＨＩＴ時の時のみ出せる
			if( BCMDTbl.CheckCancelFlag( 1 ) != _CancelFlag_Hit ) return 0;
		
			// 214攻で相殺成功していないとダメ
			if( BMvTbl.GetLP(0) != 1 ) return 0;
			return 1;
		},
		CmdCheck = 
		{
			SkillType = "AddCommand"
			PosState = "Air",
			MvCheck = { Only = ["Mv_Skill_214B","Mv_Skill_214C","Mv_Skill_214EX"] },
		},
		UpdateTable = { name = "Mv_Skill_214Sousai_AddC", },
	},		
	
	Skill_J214A = {},
	Skill_J214B = {},
	Skill_J214C = {},
	Skill_J214EX = {},	

	Skill_214A = {},
	Skill_214B = {},
	Skill_214C = {},
	Skill_214EX = {},
	
	Skill_Sousai = {},
	Skill_Sousai2 = {},
	Skill_Sousai4 = {},
	Skill_Sousai4_JAdd = {},
	Skill_Kirifuda = {},
	
	Skill_41236SP = {},
	Skill_63214SP = {},	
	
	Atk_Std4C = { num = def_CN_Atk_StdC-1 },
	
	Std_Throw_F = { command = ["6+C"] },
	
	AirDash_F = {
	CmdBeforeFunc = function()
	{
		if( Battle_Std.CancelCheck_SpecialSkill()==0 ) return 0;
		return 1;
	},
	CmdCheck =
		{
			SkillType = "Special", PosState = "Air",
			MvCheck = { Fail = 0 }	
		},
	},
	
}

local ar =
[
	{
		CheckMoveName="Mv_Atk_StdA",
		UpdateMoveName="Mv_Atk_StdB",
	},
	{
		CheckMoveName="Mv_Atk_StdB",
		UpdateMoveName="Mv_Atk_StdC",
		ResetTmplName="Std_Atk_StdB"
	},
	{
		CheckMoveName="Mv_Atk_StdC",
		UpdateMoveName="Mv_Skill_Sousai",
		ResetTmplName="Std_Atk_StdC",
		CmdTmplFlags=def_CMDFlags_AnnounceSmaetSteer, //スマートステアアナウンスの追加
	},
	{
		CheckMoveName="Mv_Skill_Sousai",
		UpdateMoveName="Mv_Skill_214EX",
		ResetTmplName="Skill_Sousai",
		CmdCheck = 
		{
			SkillType = "ExSpecial",
			HitStatus="Damage",
			Cost = { ComboGauge = 10000 },
			FrameIDCheck = { Only = 300 },
		}
	},
]
Battle_Std.MakeStdCombo( t, ar, 0 );

local ar =
[
	{
		CheckMoveName="Mv_Atk_CroA",
		UpdateMoveName="Mv_Atk_CroB",
	},
	{
		CheckMoveName="Mv_Atk_CroB",
		UpdateMoveName="Mv_Atk_StdC",
		ResetTmplName="Std_Atk_CroB"
	},
	{
		CheckMoveName="Mv_Atk_StdC",
		UpdateMoveName="Mv_Skill_Sousai",
		ResetTmplName="Std_Atk_StdC",
		CmdTmplFlags=def_CMDFlags_AnnounceSmaetSteer, //スマートステアアナウンスの追加
	},
	{
		CheckMoveName="Mv_Skill_Sousai",
		UpdateMoveName="Mv_Skill_214EX",
		ResetTmplName="Skill_Sousai",
		CmdCheck = 
		{
			SkillType = "ExSpecial",
			HitStatus="Damage",
			Cost = { ComboGauge = 10000 },
			FrameIDCheck = { Only = 300 },
		}
	},
]
Battle_Std.MakeStdCombo( t, ar, 1 );

local ar =
[
	{
		CheckMoveName="Mv_Atk_AirA",
		UpdateMoveName="Mv_Atk_AirB",
	},
	{
		CheckMoveName="Mv_Atk_AirB",
		UpdateMoveName="Mv_Atk_AirC",
		ResetTmplName="Std_Atk_AirB",
		CmdTmplFlags=def_CMDFlags_AnnounceSmaetSteerAir, //スマートステアアナウンスの追加
	},	
]
Battle_Std.MakeStdCombo( t, ar, 2 );

ONI_CommandTable <- Battle_Std.MakeCommandTable( t );

_dp(" -> Load OK");

//コマンドテーブル skillは格ゲーコマンド表記
btl_debPrint2("\n[cmd.txt]");

local t =
{
	MultiJump_F = { CmdCheck = { HeightLimit = def_POS_AirDashLimitHeight, }	},
	MultiJump_N = { CmdCheck = { HeightLimit = def_POS_AirDashLimitHeight, }	},
	MultiJump_B = { CmdCheck = { HeightLimit = def_POS_AirDashLimitHeight, }	},
	MultiJumpCancel_F = { CmdCheck = { HeightLimit = def_POS_AirDashLimitHeight, }	},
	MultiJumpCancel_N = { CmdCheck = { HeightLimit = def_POS_AirDashLimitHeight, }	},
	MultiJumpCancel_B = { CmdCheck = { HeightLimit = def_POS_AirDashLimitHeight, }	},
	
	Skill_0202A = {},
	Skill_0202B = {},
	//Skill_0202C = {},

	Skill_236A = {},
	Skill_236B = {},
	Skill_236C = {},
	Skill_236EX = {},

	Skill_J236A = {},
	Skill_J236B = {},
	Skill_J236C = {},
	Skill_J236EX = {},

	Skill_214A = {},
	Skill_214B = {},
	Skill_214C = {},
	Skill_214EX = {},
	
	/*
	Skill_214_AddJumpF =
	{
		num = def_CN_Skill_AddCommand1, command = "9",
		function CmdBeforeFunc()
		{
			if( Battle_Std.CancelCheck_SpecialSkill()==0 ) return 0;
			
			if( Def_Rule_Kirifuda_FreeJumpCancel && tDDC.Kirifuda_CheckTime() )
			{
				// 切り札効果中はジャンプキャンセル制限を無くす　＋　切り札効果中
			}
			else if( Def_IGNM_JumpCancel && Battle_Std.CheckDoubleIgnition( Def_IGNT_MainCharacter ) )
			{
				// プレイヤーのダブルイグニッション時は制限を無くす
			}
			else
			{
				if( Battle_Std.EnemyDamageFlag_Check( def_DF_JumpCanseled ) ) return 0; // 「ＪＣされた」があったら失敗
				//if( Battle_Std.MoveCode.CheckFlag(def_MC_NoJumpCansel) ) return 0; //通常ＣでもＪＣ不可
				//if( Battle_Std.CheckDownOiuti() ) return 0; // ダウン追い討ち時は不可
			}
			if( Battle_Std.GS_CheckFlag( def_PP_GS_NoAct_Move ) ) return 0;		
			return 1;
		}
		CmdCheck = 
		{
			SkillType = "AddCommand"
			HitStatus="Hit",
			MvCheck = { Only = ["Mv_Skill_214A_Hit","Mv_Skill_214B_Hit","Mv_Skill_214C_Hit"] },
			SpGaugePlus = 0, //発動時のゲージ増加量割合(100で1.0)
		},
		UpdateTable = { name = "Mv_JumpCanselWait_F", },
	}
	
	Skill_214_AddJumpN =
	{
		num = def_CN_Skill_AddCommand1, command = "8",
		function CmdBeforeFunc()
		{
			if( Battle_Std.CancelCheck_SpecialSkill()==0 ) return 0;
		
			if( Def_Rule_Kirifuda_FreeJumpCancel && tDDC.Kirifuda_CheckTime() )
			{
				// 切り札効果中はジャンプキャンセル制限を無くす　＋　切り札効果中
			}
			else if( Def_IGNM_JumpCancel && Battle_Std.CheckDoubleIgnition( Def_IGNT_MainCharacter ) )
			{
				// プレイヤーのダブルイグニッション時は制限を無くす
			}
			else
			{
				if( Battle_Std.EnemyDamageFlag_Check( def_DF_JumpCanseled ) ) return 0; // 「ＪＣされた」があったら失敗
				//if( Battle_Std.MoveCode.CheckFlag(def_MC_NoJumpCansel) ) return 0; //通常ＣでもＪＣ不可
				//if( Battle_Std.CheckDownOiuti() ) return 0; // ダウン追い討ち時は不可
			}
			if( Battle_Std.GS_CheckFlag( def_PP_GS_NoAct_Move ) ) return 0;		
			return 1;
		}
		CmdCheck = 
		{
			SkillType = "AddCommand"
			HitStatus="Hit",
			MvCheck = { Only = ["Mv_Skill_214A_Hit","Mv_Skill_214B_Hit","Mv_Skill_214C_Hit"] },
			SpGaugePlus = 0, //発動時のゲージ増加量割合(100で1.0)
		},
		UpdateTable = { name = "Mv_JumpCanselWait_N", },
	}
	
	Skill_214_AddJumpB =
	{
		num = def_CN_Skill_AddCommand1, command = "7",
		function CmdBeforeFunc()
		{
			if( Battle_Std.CancelCheck_SpecialSkill()==0 ) return 0;
			
			if( Def_Rule_Kirifuda_FreeJumpCancel && tDDC.Kirifuda_CheckTime() )
			{
				// 切り札効果中はジャンプキャンセル制限を無くす　＋　切り札効果中
			}
			else if( Def_IGNM_JumpCancel && Battle_Std.CheckDoubleIgnition( Def_IGNT_MainCharacter ) )
			{
				// プレイヤーのダブルイグニッション時は制限を無くす
			}
			else
			{
				if( Battle_Std.EnemyDamageFlag_Check( def_DF_JumpCanseled ) ) return 0; // 「ＪＣされた」があったら失敗
				//if( Battle_Std.MoveCode.CheckFlag(def_MC_NoJumpCansel) ) return 0; //通常ＣでもＪＣ不可
				//if( Battle_Std.CheckDownOiuti() ) return 0; // ダウン追い討ち時は不可
			}
			if( Battle_Std.GS_CheckFlag( def_PP_GS_NoAct_Move ) ) return 0;		
			return 1;
		}
		CmdCheck = 
		{
			SkillType = "AddCommand"
			HitStatus="Hit",
			MvCheck = { Only = ["Mv_Skill_214A_Hit","Mv_Skill_214B_Hit","Mv_Skill_214C_Hit"] },
			SpGaugePlus = 0, //発動時のゲージ増加量割合(100で1.0)
		},
		UpdateTable = { name = "Mv_JumpCanselWait_B", },
	}
	*/
	
	Skill_Sousai = {},
	Skill_Sousai2 = {},
	Skill_Sousai4 = {},
	Skill_Sousai4_JAdd = {},
	Skill_Kirifuda = {},
	
	Skill_41236SP = {},
	Skill_63214SP = {},	
	
	Atk_Std6C = { num = def_CN_Atk_StdC-1 },
	
	Std_Throw_F ={ command = ["4+C"] }
	
}

local ar =
[
	{
		CheckMoveName="Mv_Atk_StdA",
		UpdateMoveName="Mv_Atk_StdB",
	},
	{
		CheckMoveName="Mv_Atk_StdB",
		UpdateMoveName="Mv_Atk_StdC",
		ResetTmplName="Std_Atk_StdB"
	},
	{
		CheckMoveName="Mv_Atk_StdC",
		UpdateMoveName="Mv_Skill_Sousai",
		ResetTmplName="Std_Atk_StdC",
		CmdTmplFlags=def_CMDFlags_AnnounceSmaetSteer, //スマートステアアナウンスの追加
	},
	{
		CheckMoveName="Mv_Skill_Sousai",
		UpdateMoveName="Mv_Skill_236EX",
		ResetTmplName="Skill_Sousai",
		CmdCheck = 
		{
			SkillType = "ExSpecial",
			HitStatus="Damage",
			Cost = { ComboGauge = 10000 },
			FrameIDCheck = { Only = 100 },
		}
	},
]
Battle_Std.MakeStdCombo( t, ar, 0 );

local ar =
[
	{
		CheckMoveName="Mv_Atk_CroA",
		UpdateMoveName="Mv_Atk_CroB",
	},
	{
		CheckMoveName="Mv_Atk_CroB",
		UpdateMoveName="Mv_Atk_StdC",
		ResetTmplName="Std_Atk_CroB"
	},
	{
		CheckMoveName="Mv_Atk_StdC",
		UpdateMoveName="Mv_Skill_Sousai",
		ResetTmplName="Std_Atk_StdC",
		CmdTmplFlags=def_CMDFlags_AnnounceSmaetSteer, //スマートステアアナウンスの追加
	},
	{
		CheckMoveName="Mv_Skill_Sousai",
		UpdateMoveName="Mv_Skill_236EX",
		ResetTmplName="Skill_Sousai",
		CmdCheck = 
		{
			SkillType = "ExSpecial",
			HitStatus="Damage",
			Cost = { ComboGauge = 10000 },
			FrameIDCheck = { Only = 100 },
		}
	},
]
Battle_Std.MakeStdCombo( t, ar, 1 );

local ar =
[
	{
		CheckMoveName="Mv_Atk_AirA",
		UpdateMoveName="Mv_Atk_AirB",
	},
	{
		CheckMoveName="Mv_Atk_AirB",
		UpdateMoveName="Mv_Atk_AirC",
		ResetTmplName="Std_Atk_AirB",
		CmdTmplFlags=def_CMDFlags_AnnounceSmaetSteerAir, //スマートステアアナウンスの追加
	},	
]
Battle_Std.MakeStdCombo( t, ar, 2 );

HIW_CommandTable <- Battle_Std.MakeCommandTable( t );

_dp(" -> Load OK");

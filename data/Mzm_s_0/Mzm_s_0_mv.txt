_dp("\n[_mv.txt]");
// 行動リストテーブル


local t = {};

local pat_num = -1;

t.Mv_WinMotionMessage <-
{
	function Init_After()
	{
		local rnd = BMvEff.Random_Limit(2);
		switch( rnd )
		{
		case 0:
			tDDC.Support_SetMessage( "@C100", 200, 100 ); // 
			break;
		case 1:
			tDDC.Support_SetMessage( "@C101", 200, 101 ); // 
			break;
		}
	}
}

t.Mv_LoseMotionMessage <-
{
	function Init_After()
	{
		local rnd = BMvEff.Random_Limit(2);
		switch( rnd )
		{
		case 0:
			tDDC.Support_SetMessage( "@C110", 200, 110 ); // 
			break;
		case 1:
			tDDC.Support_SetMessage( "@C111", 200, 111 ); // 
			break;
		}
	}
}

t.Mv_SupportChargeMessage <-
{
	function Init_After()
	{
		local rnd = BMvEff.Random_Limit(2);
		switch( rnd )
		{
		case 0:
			tDDC.Support_SetMessage( "@C120", 200, 160 ); // 
			break;
		case 1:
			tDDC.Support_SetMessage( "@C121", 200, 161 ); // 
			break;
		}
	}
}

//-----------------------------------------------------------------------------
// サポートキャラ
//-----------------------------------------------------------------------------

// 相手サポートが上条かチェック
local func_EnemySupport_isTom = function()
{
	local enemy_sup = BMvCore.GetEnemySupportData();
	if( enemy_sup.push() )
	{
		local e_mvs = BMvTbl.GetMvStatus();
		
		enemy_sup.pop();
		
		// これ空振りでもＯＫでから、判定の接触チェックしないとだめかも
		if( e_mvs.CharaNo+100 == Def_ChrNo_Tom_s )
		{
			return 1;
		}
	}
	return 0;
}

local func_Mv_TomisImagineBreak = function( param = {} )
{
	if( param.core.push() )
	{
		local e_mvs = BMvTbl.GetMvStatus();
		local e_mv = BMvTbl.GetMvName();
		local e_lp7 = BMvTbl.GetLP(7);
		
		param.core.pop();
		
		// _dp("\n 上条さんっす？:"+Def_ChrNo_Tom_s+" e_mvs.CharaNo:"+e_mvs.CharaNo );
		if( e_mv == "Mv_SupportChara2" && e_mvs.FrameID == 500 && e_lp7 == 0 )
		{
			_dp("\n 上条さんっす");
			if( param.core.push() )
			{
				// 上条パンチ成立・特殊な奴
				BMvTbl.SetLP(7,1);
				
				param.core.pop();
			}
			
			BSound.SE_Play( { type=_SeType_Player, num=[150] } ); // クソォ！
			Battle_Std.SupSt_AddFlag( def_PP_VerySlowRecast ); // 回復を超遅くする
			
			return 1;
		}
	}
	return 0;
}

//-----------------------------------------------------------------------------
// 攻撃１
//-----------------------------------------------------------------------------

local pat_num_Sup00 = BMvEff.GetPatternNum( { datatype=0, pat="Sup00" } ); // パターン文字列のパターン番号を事前取得
local pat_num_Sup00_Hit = BMvEff.GetPatternNum( { datatype=0, pat="Sup00_Hit" } ); // パターン文字列のパターン番号を事前取得
local pat_num_Sup00_Acr = BMvEff.GetPatternNum( { datatype=0, pat="Sup00_Acr" } ); // パターン文字列のパターン番号を事前取得

local pat_num_Sup00_TomDmg = BMvEff.GetPatternNum( { datatype=0, pat="Sup00_TomDmg" } ); // パターン文字列のパターン番号を事前取得

t.Mv_Obj_ShoeObj <-
{
	function Init_After()
	{
		BMvTbl.SetPattern( "ShoeObj" );
		
		BMvTbl.SetVector( { x=3000, y=-3100, addy=150, flags=_Vector_Normal } );
		//BMvTbl.SetVector( { x=3000, y=-100, addy=0, flags=_Vector_Normal } );
		
		BMvTbl.SetLP(0,0);
		
		if( !Battle_Std.CheckEnemyisDamage() && Battle_Std.CheckEnemyPosState()==_PosState_Air ) BMvTbl.JumpFrameID( 101 );
	}
	function FrameUpdate_After()
	{
		if(BMvTbl.GetLP(0)==0) Battle_Std.SetAngle_fromVector();
		
		local mvs = BMvTbl.GetMvStatus();
		
		//if(mvs.CallCount==0) Battle_Std.DrawHitBoxes();	
	}
	function HitInterrupt_After()
	{
		local mvs = BMvTbl.GetMvStatus();
		
		if( Battle_Std.CheckHitTiming() ) 
		{
			BMvTbl.SetLP(0,1);
			BMvTbl.SetVector( { x=-400, y=-2600, addx=0, addy=150, flags=_Vector_Normal } );
		}
		
		BMvTbl.SetAngle( { angle=-mvs.MvCount*900 } );
	}
	function Finalize()
	{
		BMvTbl.SetDeleteMoveTable();
	}
}

t.Mv_Obj_HitboxBox_Debug <-
{
	function Init()
	{
		//BMvTbl.SetLP(1,-1); //hitcheckflag
		
		//BMvTbl.JumpFrameID( 100 );
		
		BMvTbl.SetLP(4,BMvTbl.GetLP(0)); 
		
		//BMvTbl.SetFinalize(0);

	}
	function FrameUpdate()
	{		
		local s = BMvTbl.GetMvStatus();	
		if(s.CallCount==0)
		{
			local oya = BMvCore.GetParentCharaData();
			
			local p_layer = _CharaPrio_GaugeCombo_P1; // _CharaPrio_Near_Layer_0
			local o_layer = _CharaPrio_GaugeCombo_P1;
			
			//Battle_Std.DrawDebugAttackInfo( "flag val "+_CharaPrio_GaugeCombo_P1 );
					
			if(oya.isPlayer())
			{
				BMvTbl.SetPrio( p_layer );
			}
			else
			{
				BMvTbl.SetPrio( o_layer );
			}
			
			if(oya.push())
			{
				local bs = BMvTbl.GetMvStatus();
				local e_mv = BMvTbl.GetMvName();
				
				oya.pop();
				
				if(s.MvCount > 0) BMvTbl.SetFinalize(0);
				
				/*
				
				if( BMvTbl.GetLP(0) != BMvTbl.GetLP(4) )
				{
					BMvTbl.SetFinalize(0); // by doing it here it corrects for mid move frame jumps hopefully
				}

				BMvTbl.SetLP(4,bs.DataFrame);
				
				if( ( BMvTbl.GetLP(0) == BMvTbl.GetLP(4) && bs.isFrameUpdate ) && s.MvCount > 0	 ) BMvTbl.SetFinalize(0); // correct for looping sequences
				*/
				Battle_Std.DrawDebugAttackInfo( "oya mvs "+e_mv );
			}
		}
		
		
		
		//if( oya.isPlayer()==0 && BMvTbl.GetLP(1)==0 ) BMvTbl.SetFinalize(0); // correct for created objects
	}
	function Finalize()
	{
		//Battle_Std.DrawDebugAttackInfo( "box destroy" );
		
		BMvTbl.SetDeleteMoveTable();
	}
}

t.Mv_SupAtk_Kick <-
{
	function Init_Before()
	{
		local nowvec = BMvTbl.GetVector( 0 );
		BMvTbl.SetVector( { x=nowvec.x, addx=0, flags=_Vector_Keep } );
	}
	function Init_After()
	{
		BMvTbl.SetPattern( "Atk_Kick" );
		
		local nowvec = BMvTbl.GetVector( { flags=_Vector_Keep }  );
		BMvTbl.SetVector( { x=nowvec.x, addx=-nowvec.x/12, flags=_Vector_Normal } );
		
		BMvTbl.SetVector_MaxX( 1 ); // リセット
		
		//Battle_Std.DrawHitboxChecker();
	}
	function FrameUpdate_After()
	{	
		local mvs = BMvTbl.GetMvStatus();
		
		//if(mvs.CallCount==0) Battle_Std.DrawHitBoxes();
		
		switch( Battle_Std.GetUpdateFrameID() )
		{
		case 100:
			//local eff = Battle_Std.CreateFireBall( { x=182, y=-278, mv="Mv_FireBall_ShoeObj" } );
			BMvEff.CreateObject( { x=280, y=-300 mvname="Mv_Obj_ShoeObj", flags=_Position_ToolShift } );
			break;
		}
	}
	function Finalize()
	{
		Battle_Std.SwitchNextMoveTable("Mv_SupportCharaFinish");
	}
}

t.Mv_SupportChara <- // サポートキャラの行動
{
	function Init_After()
	{
		BMvTbl.SetPattern( "Sup00" ); // 表示するパターンを設定
		BMvTbl.SetPosition( { y=0 } );
	}
	function FrameUpdate_After()
	{
		local mvs = BMvTbl.GetMvStatus();
		local e_dst = Battle_Std.GetNearEnemyDistance({ flags=_Position_ToolShift|_Position_ChangeMuki });
		if(e_dst.x < 300 && mvs.MvCount > 6)
		{
			BMvTbl.SetFinalize( 256 );
		}
		
		local main = BMvCore.GetMainCharaData();
		if( main.push() )
		{
			local no_hold_d = (BMvTbl.CheckButtonHold( (1<<3) ) == 0);
			main.pop();
			
			if( no_hold_d )
			{
				BMvTbl.SetFinalize( 256 );
			}
		}
	}
	function HitInterrupt_After()
	{
	}
	function Finalize()
	{
		Battle_Std.SwitchNextMoveTable("Mv_SupportCharaFinish",[256,"Mv_SupAtk_Kick"]);
	}
}

t.Mv_Sup00_Acr <-
{
	function Init()
	{
		BMvEff.SetObjectFlags( { flags=_ObjFlags_NoGround } );
		// お助け一方通行
		// これが出ている間はリキャストしてはいけないよね
		// BMvEff.SetObjectFlags( { flags=_ObjFlags_EraseParentPatChange } );
		// BMvEff.ObjProcFlags_Set( { flags=_ObjProcFlags_EraseParentNull|_ObjProcFlags_EraseChangeParentMv } );
		
		// 出てきたら無敵でしかも消えることは無い…とかにしておく
		
		// 各種補正は最初の１ヒットのみ
		BMvTbl.SetNoHoseiFlag( { val=1, time=254, flag=_ClearFlag_ChangeMv } );
	}
	function FrameUpdate()
	{
		switch( Battle_Std.GetUpdateFrameID() )
		{
		case 100: // 出現1F後
			// HitInterruptで出て座標を動かした直後の振り向きはちゃんと機能しないのでこの辺で処理
			Battle_Std.SupportSetMuki( _Direction_Auto );
			break;
		case 200: // 出現後攻撃開始
			// 出現後背後に相手がいることもあるので再度振り向く
			Battle_Std.SupportSetMuki( _Direction_Auto );
			break;
		case 900: // とどめ
			break;
		}
	}
	function HitInterrupt_After()
	{
		if( Battle_Std.CheckDamageTiming_ExceptDownFrameID( 900 ) )
		{
			BMvEff.Slowmotion_Set( { time=10, power=5000 } );
		}	
	}
	function Finalize()
	{
		BMvTbl.SetDeleteMoveTable();
	}
	function LastUpdate()
	{
		if( BMvTbl.CheckMvUniqueID( { datatype=_DataType_Parent } ) != 0 ) // 発生させた行動中
		{
			local oya = BMvCore.GetParentCharaData();
			if( oya.push() )
			{
				BMvTbl.SetLP(1,0); // 一方通行がいなくなったのを記憶
				oya.pop();
			}
		}
	}
}

t.Mv_Sup00_AcrTomDmg <-
{
	function Init()
	{
		BMvEff.SetObjectFlags( { flags=_ObjFlags_NoGround } );
		// ぶっとばされ一方通行
		// これが出ている間はリキャストしてはいけないよね
	}
	function Finalize()
	{
		BMvTbl.SetDeleteMoveTable();
	}
	function LastUpdate()
	{
		if( BMvTbl.CheckMvUniqueID( { datatype=_DataType_Parent } ) != 0 ) // 発生させた行動中
		{
			local oya = BMvCore.GetParentCharaData();
			if( oya.push() )
			{
				BMvTbl.SetLP(1,0); // 一方通行がいなくなったのを記憶
				oya.pop();
			}
		}
	}
}

local pat_num_Sup00_Esc = BMvEff.GetPatternNum( { datatype=0, pat="Sup00_Esc" } ); // パターン文字列のパターン番号を事前取得

//サポートキャラがダメージを受けると入る行動
t.Mv_SupportCharaDamage <-
{
	function Init_After() : (pat_num_Sup00_Esc)
	{
		BMvTbl.SetPattern( pat_num_Sup00_Esc );
		BSound.SE_Play( { type=_SeType_Player, num=[144,145,146] } );
	}
}

//出現途中で親が殴られると入る行動
t.Mv_SupportCharaEscape <-
{
	function Init_After() : (pat_num_Sup00_Esc)
	{
		BMvTbl.SetPattern( pat_num_Sup00_Esc );
		BSound.SE_Play( { type=_SeType_Player, num=[133] } );
	}
}

//-----------------------------------------------------------------------------
// 攻撃２
//-----------------------------------------------------------------------------

local pat_num_Sup10 = BMvEff.GetPatternNum( { datatype=0, pat="Sup10" } ); // パターン文字列のパターン番号を事前取得

t.Mv_SupportChara2 <- // サポートキャラの行動
{
	function Init_After() : (pat_num_Sup10)
	{
		BMvTbl.SetPattern( pat_num_Sup10 ); // 表示するパターンを設定
		
		Battle_Std.AddXPos_CheckFrontStage( 50, 100 ); // X移動距離, ステージ端とこれ以上近づかない距離
	}
	function FrameUpdate_After()
	{
		switch( Battle_Std.GetUpdateFrameID() )
		{
		case 50: // 登場
			BSound.SE_Play( { type=_SeType_Player, num=[180,181,182,183] } );
			break;
		case 100: // 踏みつけ
			break;
		}
	}
	function HitInterrupt_After()
	{
		if( Battle_Std.CheckDamageTiming_ExceptDown() )
		{
			BMvEff.Slowmotion_Set( { time=10, power=5000 } );
		}
	}
}

t.Mv_AcrVecAtkObject <-
{
	function Init()
	{
		BMvTbl.SetPattern( 85 );
		BMvEff.SetObjectFlags( { flags=_ObjFlags_NoGround|_ObjFlags_FromParentStop|_ObjFlags_ToParentStop } );
	}
	function Update()
	{
		// 相手がやられ中のみ継続
		local enemy = BMvCore.GetEnemyCharaData();
		if( enemy.push() )
		{
			local bs = BtlMvStd.GetBoundStatus();
			local epos = BMvTbl.GetPosition( 0 );
			enemy.pop();
			
			// 相手がやられ中のみ継続
			if( bs.isBound != 1 )
			{
				BMvTbl.SetFinalize( 0 ); // 終わり
			}
			
			// 相手座標にくっつく
			// 向きは固定でいいのかな？
			BMvTbl.SetPosition( { x=epos.x, y=epos.y } );
		}
		
	}
	function Finalize()
	{
		BMvTbl.SetDeleteMoveTable();
	}
}

local pat_num_Sup10_Esc = BMvEff.GetPatternNum( { datatype=0, pat="Sup10_Esc" } ); // パターン文字列のパターン番号を事前取得
local pat_num_Sup10_TomDmg = BMvEff.GetPatternNum( { datatype=0, pat="Sup10_TomDmg" } ); // パターン文字列のパターン番号を事前取得

//サポートキャラがダメージを受けると入る行動
t.Mv_SupportCharaDamage2 <-
{
	function Init_After() : (pat_num_Sup10_Esc, pat_num_Sup10_TomDmg, func_EnemySupport_isTom, func_Mv_TomisImagineBreak)
	{
		BMvTbl.SetPattern( pat_num_Sup10_Esc );
		BSound.SE_Play( { type=_SeType_Player, num=[140,141,142] } );
		
		if( func_EnemySupport_isTom() ) // 相手サポートが上条かチェック
		{
			local hanteiobj = BMvEff.CCheckRect(); // オブジェクト作成

			hanteiobj.SetPlayer(); //プレイヤー情報設定
			hanteiobj.SetSrc( [ _Hantei_Etc, 4, 1 ] ); //自分の情報設定
			hanteiobj.SetDst( [ _Hantei_Attack, 0, -1 ] ); //相手の情報設定
			hanteiobj.SetFlags( _HC_EnemyObj ); //検索条件設定

			while( hanteiobj.Check() != 0 ) // 見つかっている間ループ
			{
				local enemy = hanteiobj.GetCharaData(); // 見つかったオブジェクト取得
				if( enemy.push() )
				{
					local e_muki = BMvTbl.GetMuki();
					local e_pos = BMvTbl.GetPosition( 0 );
					enemy.pop();
					
					if( func_Mv_TomisImagineBreak( { core=enemy } ) )
					{
						BMvTbl.SetPattern( pat_num_Sup10_TomDmg );
						if( e_muki == 1 )
						{
							BMvTbl.SetMuki( _Direction_Left );
						}
						else
						{
							BMvTbl.SetMuki( _Direction_Right );
						}						
					}
				}				
			}
		}
	}
}

//出現途中で親が殴られると入る行動
t.Mv_SupportCharaEscape2 <-
{
	function Init_After() : (pat_num_Sup10_Esc)
	{
		BMvTbl.SetPattern( pat_num_Sup10_Esc );
		BSound.SE_Play( { type=_SeType_Player, num=[130,131] } );
	}
}


MZM_S_MoveTable <- Battle_Std.SupportChara.MakeMoveTable( t, Def_ChrNo_Mzm_s );

_dp(" -> Load OK");
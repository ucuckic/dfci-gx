//コマンドテーブル skillは格ゲーコマンド表記
btl_debPrint2("\n[cmd.txt]");

local t =
{
	MultiJump_F = { CmdCheck = { HeightLimit = def_POS_AirDashLimitHeight, }	},
	MultiJump_N = { CmdCheck = { HeightLimit = def_POS_AirDashLimitHeight, }	},
	MultiJump_B = { CmdCheck = { HeightLimit = def_POS_AirDashLimitHeight, }	},
	MultiJumpCancel_F = { CmdCheck = { HeightLimit = def_POS_AirDashLimitHeight, }	},
	MultiJumpCancel_N = { CmdCheck = { HeightLimit = def_POS_AirDashLimitHeight, }	},
	MultiJumpCancel_B = { CmdCheck = { HeightLimit = def_POS_AirDashLimitHeight, }	},
	
	AirDash_F = {
	CmdBeforeFunc = function()
	{
		if( Battle_Std.CancelCheck_SpecialSkill()==0 ) return 0;
		return 1;
	},
	CmdCheck =
		{
			SkillType = "Special", PosState = "Air",
			MvCheck = { Fail = 0 }	
		},
	},


	Skill_0202A = {},
	
	Atk_Std3C = {},
	
	Skill_236A = {},
	Skill_236B = {},
	Skill_236C = {},
	Skill_236EX = {},
	
	// 236派生214みたいな技
	Skill_236_AddA =
	{
		num = def_CN_Skill_AddCommand1, command = "@B,A,15@",
		function CmdBeforeFunc()
		{
			local mvs = BMvTbl.GetMvStatus();
			if( !(mvs.Param3 & 32) ) return 0;
			return 1;
		},
		CmdCheck = 
		{
			SkillType = "AddCommand"
			MvCheck = { Only = ["Mv_Skill_236A"] },
			HitStatus = "Hit",
		},
		UpdateTable = { name = "Mv_Skill_236_AddA", },
	},
	Skill_236_AddB =
	{
		num = def_CN_Skill_AddCommand2, command = "@B,B,15@",
		function CmdBeforeFunc()
		{
			local mvs = BMvTbl.GetMvStatus();
			if( !(mvs.Param3 & 32) ) return 0;
			return 1;
		},
		CmdCheck = 
		{
			SkillType = "AddCommand"
			MvCheck = { Only = ["Mv_Skill_236B"] },
			HitStatus = "Hit",
		},
		UpdateTable = { name = "Mv_Skill_236_AddB", },
	},
	Skill_236_AddC =
	{
		num = def_CN_Skill_AddCommand3, command = "@B,C,15@",
		function CmdBeforeFunc()
		{
			local mvs = BMvTbl.GetMvStatus();
			if( !(mvs.Param3 & 32) ) return 0;
			return 1;
		},
		CmdCheck = 
		{
			SkillType = "AddCommand"
			MvCheck = { Only = ["Mv_Skill_236C"] },
			HitStatus = "Hit",
		},
		UpdateTable = { name = "Mv_Skill_236_AddC", },
	},	
	
	
	Skill_J236A = {},
	Skill_J236B = {},
	Skill_J236C = {},
	Skill_J236EX = {},	

	Skill_J214A = {
		function CmdBeforeFunc()
		{
			if( BMvTbl.AddAirCount( 0, 0 ) > 0 ) return 0; // 空中は１回だけ
			return 1;
		}
	},
	Skill_J214B = {},
	Skill_J214C = {},
	Skill_J214EX = {},

	Skill_214A = {},
	Skill_214B = {},
	Skill_214C = {},
	Skill_214EX = {},
	
	Skill_Sousai = {},
	Skill_Sousai2 = {},
	Skill_Sousai4 = {},
	Skill_Sousai4_JAdd = {},
	Skill_Kirifuda = {},
	
	// XXX:KO後大丈夫これ？
	Skill_DownKirifuda =
	{
		num = def_CN_AtkRAandC, name = "Cmd_Skill_DownKirifuda", command = ["@B,A+C,13@"],
		flags = [ "lastdelay" ], //1F増加
		CmdBeforeStdFunc = function()
		{
			// 今作からはCPUは使わないでいい
			if( BMvTbl.IsCpu() ) return 0;
			
			// レバーが7に入っていないと失敗
			local check_stick = (1<<7); //チェックするレバーの向き
			if( BMvTbl.CheckFurimuki() ) //相手の方を向いていない
			{
				check_stick = (1<<9); //チェックするレバーは逆
			}
			if( BMvTbl.CheckStickHold( check_stick ) == 0 ) return 0;
			
			local left = tDDC.Kirifuda_GetValue();
			if( left <= 1 ) return 0;
			// if( Battle_Std.GS_CheckFlag( def_PP_GS_NoAct_Atk ) ) return 0;
			local mvs = BMvTbl.GetMvStatus();
			if( mvs.MvCount != 2 ) return 0; // ＫＯ処理が終わって次のフレーム
			if( mvs.DataFrame != 0 ) return 0; // ダウンの絵一枚目でのみ発動可能
			
			// クライマックスラウンドでのみ使用可能
			local rs = BMvTbl.GetMvRoundStatus();
			if( rs.isWinRound && rs.isLoseRound )
			{
				// クライマックスラウンド
			}
			else
			{
				return 0;
			}
			
			// 瀕死時のみ可能
			// local mvs = BMvTbl.GetMvStatus();
			// if( ( mvs.flags & _MvStFlag_DangerHPDef ) == 0 ) return 0;
			// 瀕死時のみは条件シビアすぎるから無しにしてみる
			return 1;
		},
		CmdCheck = { SkillType="AddCommand", MvCheck={ SkillFail="Mv_Skill_DownKirifuda", Only=["Mv_Modori_Down"] },
		CommandButton = def_PP_CBS_ButtonA|def_PP_CBS_ButtonC,
		flags=Def_CmdCh_GenDoujiCheck|Def_CmdCh_KeepDoujiCheck },
		UpdateTable = { name = "Mv_Skill_DownKirifuda", }
	},
	
	Skill_41236SP = {},
	Skill_63214SP = {},	
	
	Atk_Std6C = { num = def_CN_Atk_StdC-1 },
	
	Std_Throw_F = { command = ["4+C"] },
	
}

local ar =
[
	{
		CheckMoveName="Mv_Atk_StdA",
		UpdateMoveName="Mv_Atk_StdB",
	},
	{
		CheckMoveName="Mv_Atk_StdB",
		UpdateMoveName="Mv_Atk_StdC",
		ResetTmplName="Std_Atk_StdB"
	},
	{
		CheckMoveName="Mv_Atk_StdC",
		UpdateMoveName="Mv_Skill_Sousai",
		ResetTmplName="Std_Atk_StdC",
		CmdTmplFlags=def_CMDFlags_AnnounceSmaetSteer, //スマートステアアナウンスの追加
	},
	{
		CheckMoveName="Mv_Skill_Sousai",
		UpdateMoveName="Mv_Skill_214EX",
		ResetTmplName="Skill_Sousai",
		CmdCheck = 
		{
			SkillType = "ExSpecial",
			HitStatus="Damage",
			Cost = { ComboGauge = 10000 },
			FrameIDCheck = { Only = 100 },
		}
	},
]
Battle_Std.MakeStdCombo( t, ar, 0 );

local ar =
[
	{
		CheckMoveName="Mv_Atk_CroA",
		UpdateMoveName="Mv_Atk_CroB",
	},
	{
		CheckMoveName="Mv_Atk_CroB",
		UpdateMoveName="Mv_Atk_StdC",
		ResetTmplName="Std_Atk_CroB"
	},
	{
		CheckMoveName="Mv_Atk_StdC",
		UpdateMoveName="Mv_Skill_Sousai",
		ResetTmplName="Std_Atk_StdC",
		CmdTmplFlags=def_CMDFlags_AnnounceSmaetSteer, //スマートステアアナウンスの追加
	},
	{
		CheckMoveName="Mv_Skill_Sousai",
		UpdateMoveName="Mv_Skill_214EX",
		ResetTmplName="Skill_Sousai",
		CmdCheck = 
		{
			SkillType = "ExSpecial",
			HitStatus="Damage",
			Cost = { ComboGauge = 10000 },
			FrameIDCheck = { Only = 100 },
		}
	},
]
Battle_Std.MakeStdCombo( t, ar, 1 );

local ar =
[
	{
		CheckMoveName="Mv_Atk_AirA",
		UpdateMoveName="Mv_Atk_AirB",
	},
	{
		CheckMoveName="Mv_Atk_AirB",
		UpdateMoveName="Mv_Atk_AirC",
		ResetTmplName="Std_Atk_AirB",
		CmdTmplFlags=def_CMDFlags_AnnounceSmaetSteerAir, //スマートステアアナウンスの追加
	},	
]
Battle_Std.MakeStdCombo( t, ar, 2 );

SLV_CommandTable <- Battle_Std.MakeCommandTable( t );

_dp(" -> Load OK");
